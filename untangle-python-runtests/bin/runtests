#!/usr/bin/python3 -u
# pylint: disable=too-many-instance-attributes
# pylint: disable=missing-docstring
# pylint: disable=unused-argument
# pylint: disable=global-variable-not-assigned
# pylint: disable=protected-access
# pylint: disable=broad-except
import sys
import os
import getopt
import signal
import time
import traceback
import unittest
import importlib
import datetime

class ArgumentParser(object):
    """Command line argument parser"""
    def __init__(self):
        self.client_ip = "192.0.2.2"
        self.paths = []
        self.host_username = None
        self.host_key_file = None
        self.verbosity = 2 # changed to default 2 because jcoffin
        self.logfile = '/tmp/unittest.log'
        self.fastfail = False
        self.repeat = False
        self.repeat_count = None
        self.external_intf_id = 1
        self.internal_intf_id = 2
        self.suites_to_run = ['all']
        self.suites_to_exclude = []
        self.tests_to_run = ['all']
        self.tests_to_exclude = []
        self.quick_tests_only = False

    def set_client_ip(self, arg):
        self.client_ip = arg

    def set_username(self, arg):
        self.host_username = arg

    def set_path(self, arg):
        self.paths.append(arg)

    def set_keyfile(self, arg):
        self.host_key_file = arg

    def set_logfile(self, arg):
        self.logfile = arg

    def set_fastfail(self, arg):
        self.fastfail = True

    def set_repeat(self, arg):
        self.repeat = True

    def set_repeat_count(self, arg):
        self.repeat = True
        self.repeat_count = int(arg)

    def set_suites_to_run(self, arg):
        self.suites_to_run = arg.split(",")

    def set_suites_to_exclude(self, arg):
        self.suites_to_exclude = arg.split(",")

    def set_tests_to_run(self, arg):
        self.tests_to_run = arg.split(",")

    def set_tests_to_exclude(self, arg):
        self.tests_to_exclude = arg.split(",")

    def increase_verbosity(self, arg):
        self.verbosity += 1

    def set_external_intf_id(self, arg):
        self.external_intf_id = arg

    def set_internal_intf_id(self, arg):
        self.internal_intf_id = arg

    def set_quick_tests_only(self, arg):
        self.quick_tests_only = True

    def parse_args(self):
        handlers = {
            '-h' : self.set_client_ip,
            '-u' : self.set_username,
            '-i' : self.set_keyfile,
            '-p' : self.set_path,
            '-l' : self.set_logfile,
            '-v' : self.increase_verbosity,
            '-q' : self.set_fastfail,
            '-r' : self.set_repeat,
            '-c' : self.set_repeat_count,
            '-t' : self.set_suites_to_run,
            '-T' : self.set_tests_to_run,
            '-e' : self.set_suites_to_exclude,
            '-E' : self.set_tests_to_exclude,
            '-d' : self.set_external_intf_id,
            '-s' : self.set_internal_intf_id,
            '-z' : self.set_quick_tests_only,
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'h:u:i:p:l:d:s:t:T:e:E:vqrc:xz')
            for opt in optlist:
                handlers[opt[0]](opt[1])
            return args
        except getopt.GetoptError as exc:
            print(exc)
            print_usage()
            myexit(1)

def print_usage():
    sys.stderr.write("""\
%s Usage:
  optional args:
    -h <host>  : client host IP (behind Untangle)
    -u <user>  : client host SSH login
    -i <file>  : client host SSH identity (key) file
    -l <file>  : log file
    -d <int>   : interface ID of the external interface (outside) default: 1
    -s <int>   : interface ID of the internal interface (client) default: 2
    -t <suite> : comma seperated list test suites to run (default: "all") (exm: "web-filter,ad-blocker")
    -T <test>  : comma seperated list tests within suites to run (default: "all") (exm: "test_010_clientOnline")
    -e <suite> : comma seperated list test suites to EXCLUDE (default: "all") (exm: "web-filter,ad-blocker")
    -E <test>  : comma seperated list tests within suites to EXCLUDE (default: "all") (exm: "test_010_clientOnline")
    -v         : verbose (can be specified more than one time)
    -q         : quit on first failure
    -r         : repeat test indefinitely or until repeat count if specified (or until failure if -q is specified)
    -c <count> : repeat test count
    -z         : skip lengthly test suites
""" % sys.argv[0])

def signal_handler(sig, frame):
    global orig_stdout, exit_flag, interrupt_count
    interrupt_count = interrupt_count + 1
    orig_stdout.write("Interrupt...\n")
    orig_stdout.flush()
    if interrupt_count > 4:
        myexit(1)
    else:
        exit_flag = True

def myexit(code):
    global parser
    if code != 0:
        print("\nMore details found in %s" % parser.logfile)
    sys.exit(code)

def run_initial_setup(suite):
    sys.stdout = logfile
    sys.stderr = logfile
    if "initial_setup" in dir(suite):
        try:
            suite.initial_setup(suite)
        except Exception:
            print("initial_setup exception: ")
            traceback.print_exc()
            unittest.skip("initial_setup exception: ")(suite)
    sys.stdout = orig_stdout
    sys.stderr = orig_stderr

def run_final_tear_down(suite):
    if "final_tear_down" in dir(suite):
        try:
            suite.final_tear_down(suite)
        except Exception:
            print("final_tear_down exception: ")
            traceback.print_exc()

def run_test_suite(suite):
    global parser, logfile, exit_flag
    if exit_flag:
        return

    print("== testing %s ==" % suite.module_name())
    tests_list = unittest.TestLoader().loadTestsFromTestCase(suite)
    suite_fail_count = 0
    suite_skip_count = 0
    suite_total_count = 0
    time_string = ""
    suite_start_time = time.time()

    run_initial_setup(suite)

    for test in tests_list:
        test_name = test._testMethodName

        if not (test_name in parser.tests_to_run or "all" in parser.tests_to_run):
            continue
        if test_name in parser.tests_to_exclude:
            continue

        sys.stdout = logfile
        sys.stderr = logfile

        test_start_time = time.time()
        runtests.test_start_time = datetime.datetime.now()

        print("\n\n")
        print("="*70)
        print(test_name + " start [" + time.strftime("%Y-%m-%dT%H:%M:%S") + "]")
        results = unittest.TextTestRunner(stream=logfile, verbosity=parser.verbosity).run(test)
        print(test_name + " end   [" + time.strftime("%Y-%m-%dT%H:%M:%S") + "]")
        print("="*70)

        test_elapsed_time = time.time() - test_start_time
        time_string = "[%.1fs]" % test_elapsed_time

        sys.stdout = orig_stdout
        sys.stderr = orig_stderr

        if exit_flag:
            break

        suite_total_count += 1
        if len(results.failures) > 0 or len(results.errors) > 0:
            print("Test FAILED  : %s %s" % (test_name, time_string))
            suite_fail_count += 1
            if parser.fastfail:
                exit_flag = True
                # we return here, don't break because we dont
                # want to run final_tear_down
                return suite_fail_count, suite_skip_count, suite_total_count
        elif len(results.skipped) > 0:
            print("Test skipped : %s %s" % (test_name, time_string))
            suite_skip_count += 1
        else:
            print("Test success : %s %s " % (test_name, time_string))

    run_final_tear_down(suite)

    suite_elapsed_time = time.time() - suite_start_time
    print("== testing %s [%.1fs] ==" % (suite.module_name(), suite_elapsed_time))
    return suite_fail_count, suite_skip_count, suite_total_count

def run_environment_tests():
    """Verify the test enviroment is setup correctly"""
    global parser
    global logfile
    suite = runtests.test_registry.get_test("environment")
    if suite == None:
        print("Enviroment tests not found")
        return
    test_list = unittest.TestLoader().loadTestsFromTestCase(suite)
    print("== testing environment ==")
    for test in test_list:
        results = unittest.TextTestRunner(stream=logfile, verbosity=parser.verbosity).run(test)
        if exit_flag:
            break
        if len(results.failures) > 0 or len(results.errors) > 0:
            print("Test FAILED  : %s " % test._testMethodName)
            print("The test enviroment is not configured correctly. Aborting...")
            myexit(1) # always fast fail on basic test environment tests
        else:
            print("Test success : %s " % test._testMethodName)
    print("== testing environment ==")

def load_modules(path):
    """load all test modules in the specified path"""
    if not os.path.isdir(path):
        return
    sys.path.insert(0, path)
    testsdir = path+"tests"
    if not os.path.isdir(testsdir):
        return
    print("Loading tests from " + path)
    for i in os.listdir(testsdir):
        (name, ext) = os.path.splitext(i)
        if not ext in ['.py']:
            continue
        if name.startswith('__'):
            continue
        print("Loading: " + path + i)
        importlib.import_module("tests."+name)


orig_stdout = sys.stdout
orig_stderr = sys.stderr
exit_flag = False
interrupt_count = 0
parser = ArgumentParser()
script_args = parser.parse_args()
logfile = open(parser.logfile, 'w')

signal.signal(signal.SIGINT, signal_handler)

if len(parser.paths) == 0:
    load_modules('./usr/lib/python%d/' % sys.version_info[2])
    load_modules('./usr/lib/python%d/dist-packages/' % sys.version_info[2])
    load_modules('/usr/lib/python%d/' % sys.version_info[2])
    load_modules('/usr/lib/python%d/dist-packages/' % sys.version_info[2])
else:
    for p in parser.paths:
        load_modules(p)
        load_modules(p + ('/usr/lib/python%d.%d/' % sys.version_info[:2]))
        load_modules(p + ('/usr/lib/python%d.%d/dist-packages/' % sys.version_info[:2]))

runtests = importlib.import_module("runtests")

if parser.client_ip != None:
    runtests.remote_control.client_ip = parser.client_ip
if parser.host_username != None:
    runtests.remote_control.host_username = parser.host_username
if parser.host_key_file != None:
    runtests.remote_control.host_key_file = parser.host_key_file
runtests.remote_control.verbosity = parser.verbosity
runtests.remote_control.logfile = logfile
runtests.remote_control.interface = int(parser.internal_intf_id)
runtests.remote_control.interface_external = int(parser.external_intf_id)

runtests.quick_tests_only = parser.quick_tests_only

if ("environment" in parser.suites_to_run or "all" in parser.suites_to_run) and "environment" not in parser.suites_to_exclude:
    run_environment_tests()

if exit_flag:
    myexit(0)

if "all" in parser.suites_to_run:
    parser.suites_to_run = runtests.test_registry.all_modules()

# remove excluded tests
for suite_name in parser.suites_to_exclude:
    if suite_name in parser.suites_to_run:
        parser.suites_to_run.remove(suite_name)

start_time = time.time()
total_count = 0
fail_count = 0
skip_count = 0

while True:
    for module in parser.suites_to_run:
        if exit_flag is True:
            break
        if module == "environment":
            continue
        test_clz = runtests.test_registry.get_test(module)
        if test_clz is None:
            print("Unable to find tests for \"%s\"" % module)
            myexit(1)
        sub_fail_count, sub_skip_count, sub_total_count = run_test_suite(test_clz)
        fail_count += sub_fail_count
        total_count += sub_total_count
        skip_count += sub_skip_count

    if exit_flag is True:
        break
    if not parser.repeat:
        break
    if parser.repeat_count != None:
        parser.repeat_count = parser.repeat_count-1
        if parser.repeat_count < 1:
            break

elapsedTime = time.time() - start_time

print("")
print("Tests complete. [%.1f seconds]" % elapsedTime)
print("%s passed, %s skipped, %s failed" % (total_count-fail_count-skip_count, skip_count, fail_count))
print("")
if total_count > 0:
    print("Total          : %4i" % total_count)
    print("Passed         : %4i" % (total_count-fail_count-skip_count))
    print("Skipped        : %4i" % (skip_count))
    print("Passed/Skipped : %4i [%6.2f%%]" % (total_count-fail_count, (100*(total_count-fail_count)/total_count)))
    print("Failed         : %4i [%6.2f%%]" % (fail_count, 100*fail_count/total_count))
    print("")
print("More details found in %s" % parser.logfile)

myexit(fail_count)
