export default {
  data() {
    return {
      // used to determine if a change has occured or not
      isChanged: false,
      // used to allow redirection to certain routes
      allowedRoutes: [],
      // this flag is needed to check if the user is saving on a newly created entry
      newSaved: false,
    }
  },

  beforeRouteLeave(to, from, next) {
    this.handleRouteLeave(to, next)
  },

  mounted() {
    this.addUnsavedChangesListener()
  },

  beforeUnload() {
    this.removeUnsavedChangesListener()
  },

  methods: {
    /**
     * add `beforeunload` event
     */
    addUnsavedChangesListener() {
      window.addEventListener('beforeunload', this.unsavedChangesListener)
    },

    /**
     * remove `beforeunload` event
     * to stop showing the dialog when user cancels or confirms leaving the page
     */
    removeUnsavedChangesListener() {
      window.removeEventListener('beforeunload', this.unsavedChangesListener)
    },

    /**
     * shows browser native confirmation dialog when refreshing the page
     *
     * @param {*} event beforeUnload event
     */
    unsavedChangesListener(event) {
      if (this.isChanged) {
        event.preventDefault()
        // both preventDefault() and returnValue = '' are responsible for showing the popup when closing the window
        // depending on which browser is being used
        event.returnValue = ''
      }
    },

    /**
     * Display a confirmation dialog when attempting to leave page with unsaved changes
     * There are two actions available:
     * - Cancel (or ESC) - to remain in the editing page
     * - Discard - to navigate away without saving
     *
     * @param {*} to route where is trying to navigate to
     * @param {*} next callback to process redirection
     * @returns void
     */
    handleRouteLeave(to, next) {
      // only show dialog if the item was changed. If it comes from a successful save, don't show either
      if (!this.isChanged || this.allowedRoutes.includes(to.name) || this.newSaved) {
        next()
        return
      }
      this.showConfirmDialog(to, next)
    },

    /**
     * shows a confirmation dialog for unsaved changes
     *
     * @param any to route where is trying to navigate to
     * @param any next callback to process redirection
     * @returns void
     */
    showConfirmDialog(to, next) {
      this.$vuntangle.confirm.show({
        title: 'discard_changes',
        message: this.$vuntangle.$t('discard_changes_text'),
        buttons: [
          // cancel button - stay on page
          {
            name: this.$vuntangle.$t('cancel'),
            props: {
              minWidth: null,
              small: false,
              text: true,
              depressed: true,
              class: 'text-capitalize',
            },
            handler() {
              this.onClose()
            },
          },
          // discard button, leave page
          {
            name: this.$vuntangle.$t('discard'),
            props: {
              minWidth: null,
              small: false,
              color: 'error',
              depressed: true,
              class: 'text-capitalize px-4',
            },
            handler() {
              this.onClose()
              next()
            },
          },
        ],
      })
    },
  },
}
