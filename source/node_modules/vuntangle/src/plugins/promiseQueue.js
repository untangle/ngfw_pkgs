/**
 * This object is used to process promises one at a time in a FIFO queue
 */
export default {
  queue: [],
  processing: false,

  /**
   * Add a function that will return a promise to the queue for processing.
   *
   * @param {Function} promiseFunction
   *
   * @returns {Promise<*>}
   */
  add(promiseFunction) {
    // wrap the function in a promise so resolve/reject can be called to signal it is done
    return new Promise((resolve, reject) => {
      // make sure the promise function is a function
      if (typeof promiseFunction !== 'function') {
        reject(new Error('Cannot add a non-function to the promise queue'))
        return
      }

      // add the function to the queue and start processing promises
      this.queue.push({ promiseFunction, resolve, reject })
      this.process()
    })
  },

  /**
   * Process promises from the queue.  This is a recursive function that will run until there are no more items in
   * the queue.
   *
   * @returns {Void}
   */
  async process() {
    // check the processing flag to not run calls at the same time
    if (this.processing) {
      return
    }

    // get and remove the first item in the queue, return if it is empty
    const item = this.queue.shift()
    if (!item) {
      return
    }

    try {
      this.processing = true

      // run the promise function and call resolve/reject to signal it is done
      const results = await item.promiseFunction()
      item.resolve(results)
    } catch (err) {
      item.reject(err)
    }

    // run this method again to process the next item in the queue
    this.processing = false
    this.process()
  },
}
