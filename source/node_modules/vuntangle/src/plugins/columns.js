/**
 * All columns settings and methods
 * to build `column-defs` as expected by the grid
 * based on database fields, custom renderers and box settings
 */
import util from './util'
import dates from './dates'
import i18n from './vue-i18n'
import renderer from './renderer'

// all existing columns
const columns = {
  /**
   * SESSIONS TABLE COLUMN FIELDS AS IN DB
   */
  // APPLICATION
  application_blocked: {},
  application_category: {},
  application_category_inferred: {},
  application_confidence: {},
  application_confidence_inferred: {},
  application_control_blocked: {},
  application_control_bypassed: {},
  application_control_flagged: {},
  application_control_rejected: {},
  application_detail: {}, // not used
  application_flagged: {}, // not_used
  application_id: {}, // not used
  application_id_inferred: {}, // not used
  application_name: {
    valueGetter: ({ data }) =>
      data.application_name !== undefined && data.application_name !== null ? data.application_name : i18n.t('unknown'),
  },
  application_name_inferred: {
    valueGetter: ({ data }) =>
      data.application_name_inferred !== undefined && data.application_name_inferred !== null
        ? data.application_name_inferred
        : i18n.t('unknown'),
  },
  application_productivity: {
    valueGetter: ({ data }) => renderer.applicationProductivityLevel(data.application_productivity),
  },
  application_productivity_inferred: {
    valueGetter: ({ data }) => renderer.applicationProductivityLevel(data.application_productivity_inferred),
  },
  application_protochain: {}, // not used
  application_protochain_inferred: {}, // not_used
  application_risk: {
    valueGetter: ({ data }) => renderer.applicationRiskLevel(data.application_risk),
  },
  application_risk_inferred: {
    valueGetter: ({ data }) => renderer.applicationRiskLevel(data.application_risk_inferred),
  },

  // BYPASS
  bypassed: {},

  // CAPTIVE PORTAL
  captive_portal_client_ip: {
    comparator: (a, b) => util.compareIpAny(a, b),
  },
  captive_portal_event_name: {},

  // CERTS
  certificate_subject_cn: {},
  certificate_subject_o: {},

  // CLIENT
  client_address: {
    comparator: (a, b) => util.compareIpAny(a, b),
    valueGetter: ({ data }) => data.client_address || i18n.t('unknown'),
  },
  client_address_new: {
    comparator: (a, b) => util.compareIpAny(a, b),
    valueGetter: ({ data }) => data.client_address_new || i18n.t('unknown'),
  },
  client_country: {
    valueGetter: ({ data }) => renderer.country(data.client_country),
  },
  client_dns_hint: {},
  client_hops: {},
  client_interface_id: {
    valueGetter: undefined, // this is going to be set upon building the columns
  },
  client_interface_type: {
    valueGetter: ({ data }) => renderer.interfaceType(data.client_interface_type),
  },
  client_latitude: {},
  client_longitude: {},
  client_port: {
    valueGetter: ({ data }) =>
      data.client_port !== undefined && data.client_port !== null ? data.client_port : i18n.t('unknown'),
  },
  client_port_new: {
    valueGetter: ({ data }) =>
      data.client_port_new !== undefined && data.client_port_new !== null ? data.client_port_new : i18n.t('unknown'),
  },

  device_uid: {}, // not used
  end_time: {},
  family: {
    valueGetter: ({ data }) => renderer.familyRenderer(data.family),
  },

  // GEOIP
  geo_ip_blocked_client: {
    valueGetter: ({ data }) => renderer.boolean(data.geo_ip_blocked_client),
  },
  geo_ip_blocked_server: {
    valueGetter: ({ data }) => renderer.boolean(data.geo_ip_blocked_server),
  },

  hostname: {},
  ip_protocol: {
    valueGetter: ({ data }) => renderer.ipProtocol(data.ip_protocol),
  },
  local_address: {
    comparator: (a, b) => util.compareIpAny(a, b),
  },

  policy__id: {}, // not used and `__` is not a typo
  policy_flow_id: {}, // not used

  // Policy Manager Events
  action: {
    valueGetter: ({ data }) => i18n.t(data.action.toLowerCase()) || i18n.t('unknown'),
  },
  evaluation: {
    valueGetter: () => renderer.boolean(true),
  },
  policy_id: {},
  rule_id: {},
  config_set_id: {},

  remote_address: {
    comparator: (a, b) => util.compareIpAny(a, b),
  },

  // SERVER
  server_address: {
    comparator: (a, b) => util.compareIpAny(a, b),
    valueGetter: ({ data }) => data.server_address || i18n.t('unknown'),
  },
  server_address_new: {
    comparator: (a, b) => util.compareIpAny(a, b),
    valueGetter: ({ data }) => data.server_address_new || i18n.t('unknown'),
  },
  server_country: {
    valueGetter: ({ data }) => renderer.country(data.server_country),
  },
  server_dns_hint: {},
  server_hops: {},
  server_interface_id: {
    valueGetter: undefined, // this is going to be set upon building the columns
  },
  server_interface_type: {
    valueGetter: ({ data }) => renderer.interfaceType(data.server_interface_type),
  },
  server_latitude: {},
  server_longitude: {},
  server_port: {
    valueGetter: ({ data }) =>
      data.server_port !== undefined && data.server_port !== null ? data.server_port : i18n.t('unknown'),
  },
  server_port_new: {
    valueGetter: ({ data }) =>
      data.server_port_new !== undefined && data.server_port_new !== null ? data.server_port_new : i18n.t('unknown'),
  },

  session_id: {},

  ssl_sni: {},

  // THREAT PREVENTION
  threat_prevention_blocked_address: {
    comparator: (a, b) => util.compareIpAny(a, b),
  },
  threat_prevention_threat_level: {
    valueGetter: ({ data }) => renderer.incomingThreatLevel(data.threat_prevention_threat_level),
  },

  dynamic_lists_blocked_address: {
    comparator: (a, b) => util.compareIpAny(a, b),
  },

  time_stamp: {
    comparator: (a, b) => dates.compareDates(a, b),
    sort: 'desc',
    // minWidth: 200,
  },

  username: {},
  uuid: {}, // not used

  // WAN POLICY
  wan_policy_id: {},
  wan_rule_chain: {}, // not used
  wan_rule_id: {},

  // WEB FILTER
  web_filter_blocked: {},
  web_filter_catid: {
    valueGetter: ({ data }) => renderer.webfilterCategory(data.web_filter_catid),
  },
  web_filter_flagged: {},
  web_filter_hostname: {},
  web_filter_reason: {
    valueFormatter: params => renderer.webfilterReason(params.value),
  },
  /** END SESSIONS TABLE COLUMN FILEDS */

  /**
   * DOS_EVENTS TABLE COLUMN FILEDS AS IN DB
   */
  from_host: {
    valueGetter: ({ data }) => data.from_host,
  },
  to_host: {
    valueGetter: ({ data }) => data.to_host,
  },
  dos_rule_id: {
    valueGetter: ({ data }) => data.rule_id,
  },
  dos_ip_protocol: {
    valueGetter: ({ data }) => renderer.dosIPProtocol(data.ip_protocol),
  },
  /** DOS_EVENTS TABLE COLUMN FILEDS END   */

  /**
   * SESSION_STATS TABLE COLUMN FILEDS AS IN DB
   */
  byte_rate: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesSecRenderer(params.value),
  },
  bytes: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesRenderer(params.value),
  },
  client_byte_rate: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesSecRenderer(params.value),
  },
  client_bytes: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesRenderer(params.value),
  },
  client_packet_rate: {
    type: 'numericColumn',
  },
  client_packets: {},
  // `device_uid` already in sessions table
  packet_rate: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesSecRenderer(params.value),
  },
  packets: {
    type: 'numericColumn',
  },
  server_byte_rate: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesSecRenderer(params.value),
  },
  server_bytes: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesRenderer(params.value),
  },
  server_packet_rate: {
    type: 'numericColumn',
    cellRenderer: params => renderer.bytesSecRenderer(params.value),
  },
  server_packets: {},

  // `session_id` already in sessions
  tcp_state: {
    valueGetter: ({ data }) => renderer.tcpStateRenderer(data.tcp_state),
  },

  // `uuid` already in sessions
  /** SESSION_STATS TABLE COLUMN FILEDS END   */

  // other fields
  age_milliseconds: {
    sort: 'asc',
    cellRenderer: ({ value }) => renderer.timeRangeMilliseconds(value),
  },
  conntrack_id: {},
  mark: {},

  priority: {
    valueGetter: ({ data }) => renderer.priorityNumToText(data.priority),
  },

  /** non field columns */
  application_control_action: {
    valueGetter: ({ data }) => {
      if (data.application_control_rejected) return i18n.t('rejected')
      if (data.application_control_blocked) return i18n.t('blocked')
      if (data.application_control_bypassed) return i18n.t('bypassed')
      if (data.application_control_flagged) return i18n.t('flagged')
      return ''
    },
  },
}

/**
 * Predefined columns specific for some grids in the form
 * {
 *    all: ['col_name', ...] - all columns shown in the grid in the desired order
 *    hidden: ['col_name', ...] - columns found in `all` but by default are hidden
 *    renamed: { original_column_name: 'new_column_name' } - used for some grids in the UI
 * }
 */
const gridColumns = {
  active_sessions: {
    all: [
      'age_milliseconds',
      // application
      'application_name',
      'application_name_inferred',
      'application_category',
      'application_category_inferred',
      'application_confidence',
      'application_confidence_inferred',
      'application_productivity',
      'application_productivity_inferred',
      'application_risk',
      'application_risk_inferred',
      // client
      'client_address',
      'client_address_new',
      'client_interface_id',
      'client_interface_type',
      'client_port',
      'client_port_new',
      'client_country',
      // server
      'server_address',
      'server_address_new',
      'server_interface_id',
      'server_interface_type',
      'server_country',
      'server_dns_hint',
      'server_port',
      'server_port_new',
      // bytes
      'bytes',
      'byte_rate',
      // certs
      'certificate_subject_cn',
      'certificate_subject_o',
      'ssl_sni',
      'ip_protocol',
      'family',
      'local_address',
      'remote_address',
      'tcp_state',
      'timeout_seconds',
      'priority',
      // web-filter
      'web_filter_hostname',
      'web_filter_reason',
      'web_filter_blocked',
      'web_filter_flagged',
      'web_filter_catid',
      // geoip
      'geo_ip_blocked_client',
      'geo_ip_blocked_server',
      // threat-prevention
      'threat_prevention_blocked_address',
      'threat_prevention_threat_level',
    ],
    hidden: [
      'application_name_inferred',
      'application_category',
      'application_category_inferred',
      'application_confidence',
      'application_confidence_inferred',
      'application_productivity',
      'application_productivity_inferred',
      'application_risk',
      'application_risk_inferred',
      'client_address_new',
      'client_interface_type',
      'client_port',
      'client_port_new',
      'client_country',
      'server_address_new',
      'server_interface_type',
      'server_port_new',
      'certificate_subject_cn',
      'certificate_subject_o',
      'ssl_sni',
      'ip_protocol',
      'family',
      'local_address',
      'remote_address',
      'tcp_state',
      'timeout_seconds',
      'priority',
      'web_filter_hostname',
      'web_filter_reason',
      'web_filter_blocked',
      'web_filter_flagged',
      'web_filter_catid',
      'geo_ip_blocked_client',
      'geo_ip_blocked_server',
      'threat_prevention_blocked_address',
      'threat_prevention_threat_level',
    ],
    renamed: {
      priority: 'qos_priority',
      client_port: 'source_port',
      server_country: 'destination_country',
      server_dns_hint: 'destination_dns_cache',
      server_port: 'destination_port',
    },
  },
  sessions: {
    all: [
      // this seems to be the order as it was before refactor
      'time_stamp',
      'geo_ip_blocked_server',
      'threat_prevention_blocked_address',
      'threat_prevention_threat_level',

      // application
      'application_name',
      'application_name_inferred',
      'application_category',
      'application_category_inferred',
      'application_confidence',
      'application_confidence_inferred',
      'application_productivity',
      'application_productivity_inferred',
      'application_risk',
      'application_risk_inferred',
      // client
      'client_address',
      'client_address_new',
      'client_interface_id',
      'client_interface_type',
      'client_port',
      'client_port_new',
      'client_country',
      // server
      'server_address',
      'server_address_new',
      'server_interface_id',
      'server_interface_type',
      'server_country',
      'server_dns_hint',
      'server_port',
      'server_port_new',
      // certs
      'certificate_subject_cn',
      'certificate_subject_o',
      'ssl_sni',
      'ip_protocol',
      'family',
      'local_address',
      'remote_address',
      'priority',
      // web-filter
      'web_filter_hostname',
      'web_filter_reason',
      'web_filter_blocked',
      'web_filter_flagged',
      'web_filter_catid',
      // geoip
      'geo_ip_blocked_client',
      // dynamic-lists
      'dynamic_lists_blocked_address',
      // tcp state
      'tcp_state',
      // bypass
      'bypassed',
    ],
    hidden: [
      'application_name_inferred',
      'application_category',
      'application_category_inferred',
      'application_confidence',
      'application_confidence_inferred',
      'application_productivity',
      'application_productivity_inferred',
      'application_risk',
      'application_risk_inferred',
      'client_address_new',
      'client_interface_type',
      'client_port',
      'client_port_new',
      'client_country',
      'server_address_new',
      'server_interface_type',
      'server_port_new',
      'certificate_subject_cn',
      'certificate_subject_o',
      'ssl_sni',
      'ip_protocol',
      'family',
      'local_address',
      'remote_address',
      'priority',
      'web_filter_hostname',
      'web_filter_reason',
      'web_filter_blocked',
      'web_filter_flagged',
      'web_filter_catid',
      'geo_ip_blocked_client',
      // dynamic-lists
      'dynamic_lists_blocked_address',
      // tcp state
      'tcp_state',
    ],
    renamed: {
      priority: 'qos_priority',
      client_port: 'source_port',
      server_country: 'destination_country',
      server_dns_hint: 'destination_dns_cache',
      server_port: 'destination_port',
    },
  },
  wan_routing: {
    all: [
      'time_stamp',
      'server_interface_id',
      'client_address',
      'server_address',
      'server_country',
      'application_name_inferred',
      'wan_rule_id',
      'wan_policy_id',
      'server_dns_hint',
    ],
    renamed: {
      wan_rule_id: 'wan_rule',
      wan_policy_id: 'wan_policy',
      server_interface_id: 'wan_route',
      server_dns_hint: 'domain_name',
      server_country: 'destination_country',
    },
  },
  threat_prevention_blocked: {
    all: ['time_stamp', 'client_address', 'threat_prevention_blocked_address', 'threat_prevention_threat_level'],
  },
  dynamic_lists_blocked: {
    all: ['time_stamp', 'client_address', 'dynamic_lists_blocked_address'],
  },
  geoip_outbound_blocked_sessions: {
    all: ['time_stamp', 'client_address', 'server_address', 'server_country', 'server_dns_hint'],
    renamed: {
      server_country: 'destination_country',
      server_dns_hint: 'destination_dns_cache',
    },
  },

  geoip_inbound_blocked_sessions: {
    all: ['time_stamp', 'client_address', 'server_address', 'client_country'],
  },
  web_filter_visited_sites: {
    all: [
      'time_stamp',
      'web_filter_hostname',
      'client_address',
      'server_address',
      'web_filter_blocked',
      'web_filter_flagged',
      'web_filter_catid',
      'web_filter_reason',
    ],
    renamed: {
      web_filter_hostname: 'site',
      web_filter_reason: 'reason',
      web_filter_catid: 'category',
      web_filter_blocked: 'blocked',
      web_filter_flagged: 'flagged',
    },
  },
  application_control_applications: {
    all: [
      'time_stamp',
      'application_name',
      'category', // not rendered
      'application_productivity',
      'application_risk',
      'application_control_action',
      'client_address',
      'client_port',
      'server_address',
      'server_port',
    ],
    renamed: {
      application_name: 'name',
      application_control_action: 'action',
      client_port: 'source_port',
      server_port: 'destination_port',
    },
  },
  captive_portal_events: {
    all: ['time_stamp', 'captive_portal_client_ip', 'server_address', 'server_port', 'captive_portal_event_name'],
    renamed: {
      server_port: 'destination_port',
    },
  },
  policy_manager_events: {
    all: [
      'time_stamp',
      'session_id',
      'policy_id',
      'rule_id',
      'config_set_id',
      'device_uid',
      'action',
      'evaluation',
      'client_address',
      'client_port',
      'ip_protocol',
      'server_address',
      'server_port',
    ],
    renamed: {
      policy_id: 'policy_name',
      rule_id: 'rule_name',
      config_set_id: 'config_name',
      client_port: 'source_port',
      server_port: 'destination_port',
    },
    hidden: ['ip_protocol', 'config_set_id', 'device_uid'],
  },
  denial_of_service_events: {
    all: ['time_stamp', 'from_host', 'to_host', 'dos_ip_protocol', 'dos_rule_id'],
    renamed: {
      dos_ip_protocol: 'ip_protocol',
    },
  },
}

/**
 * Return needed mappings between ids and names as existing on the box
 * This are needed for proper rendering some of the columns like: `interface_id`, `wan_rule_id`, `wan_policy_id`
 * @param {Object} boxSettings - the box settings
 * @returns {Object}
 */
const boxIdNameMappings = boxSettings => {
  const interfaceIdNameMap = boxSettings?.network?.interfaces.reduce((res, intf) => {
    return { ...res, [intf.interfaceId]: intf.name }
  }, {})

  const wanRules = boxSettings?.wan?.policy_chains.find(chain => chain.name === 'user-wan-rules').rules
  const wanRuleIdNameMap = wanRules?.reduce((res, rule) => {
    return { ...res, [rule.ruleId]: rule.description }
  }, {})

  const wanPolicyIdNameMap = boxSettings?.wan?.policies.reduce((res, policy) => {
    return { ...res, [policy.policyId]: policy.description }
  }, {})

  const policyIdNameMap = boxSettings?.policy_manager?.policies.reduce((res, policy) => {
    return { ...res, [policy.id]: policy.name }
  }, {})

  const policyRuleIDNameMap = boxSettings?.policy_manager?.rules.reduce((res, rule) => {
    return { ...res, [rule.id]: rule.name }
  }, {})

  const configSetIdNameMap = boxSettings?.policy_manager?.configurations.reduce((res, config) => {
    return { ...res, [config.id]: config.name }
  }, {})

  return {
    interfaceIdNameMap,
    wanRuleIdNameMap,
    wanPolicyIdNameMap,
    policyIdNameMap,
    policyRuleIDNameMap,
    configSetIdNameMap,
  }
}

/**
 * Global method used to build columns definitions as expected by the grid
 * @param {Object} gridColumns - array of grid columns as defined above: { all: [], hidden: [], renamed: [] }
 * @param {Object} boxSettings - the box settings
 * @returns {Array} - the `column-defs` prop for the grid
 */
const buildColumnDefs = (gridColumns, boxSettings) => {
  const defs = []
  const all = gridColumns.all
  const hidden = gridColumns.hidden
  const renamed = gridColumns.renamed

  // get the id/name mappings from box settings
  const idNameMappings = boxIdNameMappings(boxSettings)

  all.forEach(field => {
    if (!columns[field]) return

    const col = {
      // data field
      field,
      // column header
      headerName: renamed?.[field] ? i18n.t(renamed[field]) : i18n.t(field),
      // if it's hidden
      hide: hidden?.includes(field),
      flex: 1,
      // any other static props from `columns`
      ...columns[field],
    }

    // for fields requiring box data for rendering, set the proper valueRenderer
    switch (field) {
      case 'client_interface_id':
        col.valueGetter = ({ data }) =>
          renderer.interfaceName(data.client_interface_id, idNameMappings?.interfaceIdNameMap)
        break
      case 'server_interface_id':
        col.valueGetter = ({ data }) =>
          renderer.interfaceName(data.server_interface_id, idNameMappings?.interfaceIdNameMap)
        break
      case 'wan_rule_id':
        col.valueGetter = ({ data }) => renderer.wanRule(data.wan_rule_id, idNameMappings?.wanRuleIdNameMap)
        break
      case 'wan_policy_id':
        col.valueGetter = ({ data }) => renderer.wanPolicy(data.wan_policy_id, idNameMappings?.wanPolicyIdNameMap)
        break
      case 'time_stamp':
        col.valueFormatter = ({ value }) => renderer.timeStamp(value)
        break
      case 'policy_id':
        col.valueGetter = ({ data }) => renderer.policyName(data.policy_id, idNameMappings?.policyIdNameMap)
        break
      case 'rule_id':
        col.autoHeight = true
        col.cellRenderer = ({ data }) =>
          renderer.ruleName(data.rule_id.split('|'), idNameMappings?.policyRuleIDNameMap).join(`<br>`)
        break
      case 'config_set_id':
        col.valueGetter = ({ data }) => renderer.configName(data.config_set_id, idNameMappings?.configSetIdNameMap)
        break
    }
    defs.push(col)
  })

  return defs
}

export default { gridColumns, buildColumnDefs }
