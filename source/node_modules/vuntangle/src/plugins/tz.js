/**
 * Utility methods used to convert and display box timestamps to box timezone date strings
 *
 * There are corner cases when the box timezone db is outdated for some of the timezones,
 * meaning that the box system date is not reflecting what it should be in reality (usually being off by 30m or 1h).
 * `getTimezoneOffset` is not using the box system date, but only it's timezone to compute offsets
 * and implicitly the datetimes that are displayed; so the UI will show the correct real date and time
 */

export default {
  /**
   * The default format in which the date is displayed in UI (reports/charts)
   * It should be used in conjunction with `locale` like`date.toLocaleString('ja', tz.defaultFormat)`
   * resulting e.g. `Nov 22, 10:08 PM`, `22. Nov., 22:08`, `11月22日 22:08`
   */
  defaultFormat: { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' },

  /**
   * Returns the timezone offset string based on timezone name: e.g. 'UTC+05:00', 'UTC-02:30'
   * Note: GMT is replaced with UTC for display
   * @param {String} timeZone - the timezone string (e.g. from the box settings), as in IANA tz database
   * @returns {String}
   */
  getTimezoneOffset(timeZone) {
    try {
      const parts = Intl.DateTimeFormat([], { timeZone, timeZoneName: 'longOffset' }).formatToParts()
      const part = parts.find(p => p.type === 'timeZoneName')
      return part.value === 'GMT' ? 'UTC+00:00' : part.value.replace(/GMT/i, 'UTC')
    } catch (ex) {
      // fallback to UTC in case timezone name is wrong (not found)
      return 'UTC+00:00'
    }
  },

  /**
   * Returns the timezone offset in milliseconds relative to UTC
   * @param {String} timeZone - the timezone string
   * @returns {Number} milliseconds
   */
  getTimezoneOffsetMillis(timeZone) {
    const tzOffset = this.getTimezoneOffset(timeZone)
    const parts = tzOffset.replace(/UTC/, '').split(':')
    // compute offset hours from string (e.g. from "UTC+07:00" => +420 minutes)
    const hours = parts[0] ? parseInt(parts[0]) * 60 : 0
    // compute minutes, take in count "-" and "+" (e.g. from "UTC-02:30" => -30 minutes)
    const minutes = parts[1] ? parseInt(hours >= 0 ? parts[1] : -parts[1]) : 0

    // return milliseconds
    return (hours + minutes) * 60 * 1000
  },

  /**
   * Returns a date having date & time equivalent for the specified timezone
   * @param {Date} date - the Date object
   * @param {String} timeZone - the timezone name
   * @returns {Date}
   */
  getTimezoneDate(date, timeZone) {
    // convert input date to a timestamp
    const remoteTimestamp = date.getTime()
    // compute timezone offset in millis based on 'remote/box' timezone
    const remoteOffset = this.getTimezoneOffsetMillis(timeZone)
    // get local timezone offset in millis too
    const localOffset = new Date().getTimezoneOffset() * 60 * 1000

    // return computed date as expected in specified timezone
    // should be further used with `toLocaleString` method for UI display
    return new Date(remoteTimestamp + remoteOffset + localOffset)
  },
}
