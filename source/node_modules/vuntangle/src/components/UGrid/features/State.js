/**
 * State class
 * manages the grid columns and filters state
 */
export default class State {
  /**
   * State constructor
   * @param {String} id - the grid id
   * @param {GridApi} gridApi - the grid api
   * @param {ColumnApi} columnApi - the column api
   */
  constructor(id, gridApi, columnApi) {
    this.gridId = id
    this.gridApi = gridApi
    this.columnApi = columnApi
    this.stateId = null // the state identifier from local storage
    this.init()
  }

  /**
   * initialize state by adding grid events for which state is saved
   * compute stateId based on gridId & location pathname
   */
  init() {
    // UI-406 remove `/` at the end of id generated by pathname
    const stateId = this.gridId + '_' + window.location.pathname
    this.stateId = stateId.slice(-1) === '/' ? stateId.slice(0, -1) : stateId

    // register the grid events
    const events = ['columnVisible', 'columnPinned', 'dragStopped', 'sortChanged', 'filterChanged']
    events.forEach(evt => this.gridApi.addEventListener(evt, () => this.save()))
  }

  // try to load a previously stored state if exists
  load() {
    try {
      const state = JSON.parse(window.localStorage.getItem(this.stateId))
      this.gridApi.setFilterModel(state?.filterModel)
      this.columnApi.applyColumnState({ state: state?.columnState, applyOrder: true })
    } catch (e) {}
  }

  // saves the state into local storage
  save() {
    window.localStorage.setItem(
      this.stateId,
      JSON.stringify({
        filterModel: this.gridApi.getFilterModel(),
        columnState: this.columnApi.getColumnState(),
      }),
    )
  }
}
