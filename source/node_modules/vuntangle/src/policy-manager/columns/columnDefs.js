/**
 * Defines methods used by the policy manager grids to retrieve column defs
 */

import { ConditionTarget } from '../config/constants'
import column from './column'

export default {
  /**
   * Common column defs used in lookup grid, provisioning, groups edit
   * @param {boolean} conditionGroups - whether to show condition groups column
   * @returns - array of columns definitions
   */
  getCommonColumnDefs: (conditionGroups = true) => [
    column.name(),
    column.description(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    ...(conditionGroups ? [column.groupConditions()] : []),
    column.created(),
    column.updated(),
  ],

  getConditionsObjectsColumnDefs: () => [
    column.name(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.policies(),
    column.created(),
    column.updated(),
  ],

  getRulesColumnDefs: () => [
    column.name(),
    column.description(),
    column.type(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.action(),
    column.policies(),
    column.appliances(),
    column.created(),
    column.updated(),
  ],

  getTemplatesColumnDefs: () => [
    column.name(),
    column.description(),
    column.type(),
    column.policies(),
    column.appliances(),
    column.created(),
    column.updated(),
  ],

  getAppliancePoliciesColumnDefs: () => [
    column.order(),
    column.name(),
    column.description(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.syncStatus('syncStatus'),
    column.lastSynced('lastSynced'),
  ],

  getApplianceRulesColumnDefs: () => [
    column.enabled(),
    column.name(),
    column.description(),
    column.type(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.action(),
    column.policies(),
    column.created(),
    column.updated(),
  ],

  getBoxPoliciesColumnDefs: () => [
    column.name(),
    column.description(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
  ],

  getBoxRulesColumnDefs: () => [
    column.enabled(),
    column.name(),
    column.description(),
    column.type(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.action(),
    column.policies(),
  ],

  getPolicyRulesColumnDefs: () => [
    column.checkbox(),
    column.name(),
    column.description(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.action(),
    column.created(),
  ],

  getPoliciesWithAppliancesColumnDefs: () => [
    column.name(),
    column.description(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.appliances(),
    column.created(),
    column.updated(),
  ],

  getAllRulesColumnDefs: () => [
    column.name(),
    column.description(),
    column.conditions(ConditionTarget.Source),
    column.conditions(ConditionTarget.Destination),
    column.conditions(ConditionTarget.Other),
    column.groupConditions(),
    column.action(),
    column.updated(),
    column.created(),
  ],

  getObjectsColumnDefs: () => [column.name(), column.object(), column.updated()],

  getPolicyAnalyticsColumnDefs: () => [
    column.analyticsIssue(),
    column.analyticsSeverity(),
    column.analyticsRecommendation(),
    column.analyticsDateCreated(),
  ],
}
