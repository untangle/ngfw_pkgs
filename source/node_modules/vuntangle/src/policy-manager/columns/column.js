/**
 * Defines every column used in policies grids
 * Data feeded to the grids must match field name and must be structured as instructed for each column
 */

import dates from '../../plugins/dates'
import { ConditionTarget } from '../config/constants'
import renderer from '../../plugins/renderer'
import formatters from './formatters'
import i18n from '@/plugins/vue-i18n'

export default {
  // Generic object name column, data value provided via `name` field
  name: () => ({
    colId: 'name',
    field: 'name',
    headerName: i18n.t('name'),
    flex: 1,
    autoHeight: true,
    wrapText: true,
    cellClass: 'pr-8', // to make room for G (group) icon
    cellRenderer: 'NameRenderer',
  }),

  // Generic object description column, data value provided via `description` field
  description: () => ({
    colId: 'description',
    field: 'description',
    headerName: i18n.t('description'),
    flex: 1,
    hide: true,
  }),

  // Generic object creation date, data value provided via `created` field
  created: () => ({
    colId: 'created',
    field: 'created',
    headerName: i18n.t('date_created'),
    flex: 1,
    hide: true,
    comparator: (a, b) => dates.compareDates(a, b),
  }),

  // Generic object updated date, data value provided via `updated` field
  updated: () => ({
    colId: 'updated',
    field: 'updated',
    headerName: i18n.t('date_updated'),
    flex: 1,
    hide: false,
    comparator: (a, b) => dates.compareDates(a, b),
  }),

  // Generic object type, data value provided via `type` field
  type: () => ({
    colId: 'type',
    field: 'type',
    headerName: i18n.t('type'),
    flex: 1,
  }),

  enabled: () => ({
    colId: 'enabled',
    field: 'enabled',
    headerName: i18n.t('enabled'),
    valueFormatter: ({ value }) => renderer.boolean(value),
  }),

  checkbox: () => ({
    colId: 'enabled-checkbox',
    headerName: i18n.t('enabled'),
    field: 'enabled',
    width: 80,
    minWidth: 80,
    flex: 0,
    cellRenderer: 'CheckboxRenderer',
  }),

  /**
   * Rule action column
   * Data value is an object provided via `action` field representing the rule action
   * e.g:
   * {
   *    text: "Some conf name", // the text
   *    id: '1234-5678...', // optional, e.g. the id of a configurations/wan policy
   *    icon: 'mdi-something...', // the prepend icon font
   *    iconColor: 'green', // optional, an icon color
   * }
   * Above object
   * - uses `ActionRenderer` component used for pretty rendering
   */
  action: () => ({
    colId: 'action',
    field: 'action',
    headerName: i18n.t('action'),
    flex: 1,
    autoHeight: true,
    wrapText: true,
    cellRenderer: 'ActionRenderer',
    valueFormatter: ({ value }) => value.text,
    comparator: (a, b) => a.text.localeCompare(b.text),
  }),

  /**
   * Policies associated with a Rule, Template etc...
   * Data value is an array of objects provided via `policies` field representing the associated policies
   * e.g:
   * [
   *   {
   *     "id": "27d95b01-11f7-4913-85af-4bebe67f4cea", // the Policy id
   *     "name": "Some Policy Name" // the Policy name
   *   }
   *   ...
   * ]
   * Above array of objects
   * - uses `AssociatedPolicyRenderer` component for pretty rendering and links
   */
  policies: () => ({
    colId: 'policies',
    field: 'policies',
    headerName: i18n.t('policies'),
    flex: 1,
    autoHeight: true,
    wrapText: true,
    cellRenderer: 'AssociatedPolicyRenderer',
    valueFormatter: ({ value }) => value.map(policy => policy.name).join(', '),
  }),

  /**
   * Appliances associated with a Policy
   * Data value is an array of objects provided via `appliances` field representing the associated appliances
   * e.g:
   * [
   *   {
   *     "uid": "31dae4cd-8af4-4cb9-b90e-2fc5fadd6a07", // the appliance UID
   *     "host": "mfw.example.com" // the appliance host
   *   }
   *   ...
   * ]
   * Above array
   * - uses `AssociatedApplianceRenderer` component for pretty rendering and links
   */
  appliances: () => ({
    colId: 'appliances',
    field: 'appliances',
    headerName: i18n.t('appliances'),
    flex: 1,
    autoHeight: true,
    wrapText: true,
    cellRenderer: 'AssociatedApplianceRenderer',
    valueFormatter: ({ value }) => value.map(appl => appl.host).join(', '),
  }),

  /**
   * The object value column
   * Data value is passed via `value` field and can be:
   * - a plain value string for simple objects: e.g. "Port Number: 20 - IP Addresses: 4.5.6.7", "Algeria, Anguilla, Argentina"
   * - an array of objects that are part of an object group:
   * [
   *   {
   *     "name": "HTTP", // object name
   *     "isGroup": false, // bool
   *     "tooltip": "Port Number: 80 - IP Addresses: 3.4.5.6" // tooltip generated for the object from it's value
   *   },
   *   {
   *     "name": "App",
   *     "isGroup": false,
   *     "tooltip": "Port Number: 20 - IP Addresses: 4.5.6.7"
   *   }
   * ]
   * Above array
   * - uses a `objectValueFormatter` needed for grid filtering/sorting
   * - uses `ObjectValueRenderer` component for pretty rendering and tooltips
   */
  object: () => ({
    colId: 'value',
    field: 'value',
    headerName: i18n.t('value'),
    flex: 1,
    autoHeight: true,
    wrapText: true,
    cellRenderer: 'ObjectValueRenderer',
    valueFormatter: formatters.objectValueFormatter,
  }),

  // Fixed left positioned column for rules/policies ordering
  order: () => ({
    colId: 'order',
    field: 'order',
    headerName: i18n.t('order'),
    maxWidth: 100,
    lockPosition: 'left',
    sort: 'asc',
  }),

  /**
   * Column used for showing appliance sync status
   * @param {String} field - the expected data field, e.g. `SyncStatus` for ETM objects, `syncStatus` for hydrated data
   * @returns Object
   */
  syncStatus: field => ({
    colId: 'sync_status',
    field,
    headerName: i18n.t('sync_status'),
    valueFormatter: ({ value }) => (value ? i18n.t(value) : ''),
    comparator: (a, b) => {
      // convert values to empty string if undefined
      const statusA = a || ''
      const statusB = b || ''

      return statusA.localeCompare(statusB)
    },
  }),

  /**
   * Column used for showing appliance last synced
   * @param {String} field - the expected data field, e.g. `LastSynced` for ETM objects, `lastSynced` for hydrated data
   * @returns Object
   */
  lastSynced: field => ({
    colId: 'last_synced',
    field,
    headerName: i18n.t('last_synced'),
    flex: 1,
    valueGetter: ({ data }) => dates.formatDateFromApi(data[field]),
  }),

  /**
   * Returns grid column def for conditions
   * @param {String} conditionTarget - 'SOURCE', 'DEST', 'OTHER' or undefined
   * @returns - column definition for conditions
   // The data for the each column have to be provided via `source`, `dest` or `other` fields
   /**
   * Sample data:
   * [
   *   {
   *     "type": "Source Address", // long condition type translation (includes prefix: source, dest)
   *     "prefixType": "Address" // short condition type (without target prefix)
   *     "op": "Match", // translated operator
   *     "objects": // array of objects name/tooltip associated with this condition
   *       [
   *         { "name": "some obj", "tooltip": "1.2.3.4" },
   *       ],
   *   },
   */
  conditions: target => {
    let headerKey = 'conditions'
    let field
    switch (target) {
      case ConditionTarget.Source:
        headerKey = 'source_conditions'
        field = 'source'
        break
      case ConditionTarget.Destination:
        headerKey = 'destination_conditions'
        field = 'dest'
        break
      case ConditionTarget.Other:
        headerKey = 'other_conditions'
        field = 'other'
        break
    }

    return {
      colId: `${target ? target + '-conditions' : 'conditions'}`,
      field,
      headerName: i18n.t(headerKey),
      flex: 1,
      autoHeight: true,
      wrapText: true,
      cellRenderer: 'ConditionsRenderer',
      // valueFormatter helps with exporting CSV in human readable values but not column sorting
      valueFormatter: formatters.conditionsFormatter,
      // values are arrays of objects so sorting relies on them being stringified
      comparator: (value1, value2) => JSON.stringify(value1).localeCompare(JSON.stringify(value2)),
    }
  },

  /**
   * returns group condition columns
   */
  groupConditions: () => {
    return {
      colId: 'group-conditions',
      field: 'group',
      headerName: i18n.t('group_conditions'),
      flex: 1,
      hide: true,
      autoHeight: true,
      wrapText: true,
      cellRenderer: 'ConditionGroupsRenderer',
      valueFormatter: formatters.objectValueFormatter,
    }
  },

  // analytics columns

  analyticsIssue: () => ({
    headerName: i18n.t('issue'),
    field: 'issue',
    cellRenderer: ({ data }) => {
      const info = data.additionalInfo ? data.additionalInfo : { name: '' }
      if (info.nameOfOriginal) return `${i18n.t(data.issue)}: <b>${info.nameOfOriginal}</b>`
      return `${i18n.t(data.issue)}: <b>${info.name}</b>`
    },
    valueFormatter: ({ data }) => {
      const info = data.additionalInfo ? data.additionalInfo : { name: '' }
      if (info.nameOfOriginal) return `${i18n.t(data.issue)}: ${info.nameOfOriginal}`
      return `${i18n.t(data.issue)}: ${info.name}`
    },
  }),

  analyticsSeverity: () => ({
    headerName: i18n.t('severity'),
    field: 'severity',
    valueGetter: ({ data }) => i18n.t(data.severity),
  }),

  analyticsRecommendation: () => ({
    headerName: i18n.t('recommendation'),
    field: 'recommendation',
    cellRenderer: ({ data }) => {
      const info = data.additionalInfo ? data.additionalInfo : { name: '' }
      return `${i18n.t(data.recommendation)}: <b>${info.name}</b>`
    },
    valueFormatter: ({ data }) => {
      const info = data.additionalInfo ? data.additionalInfo : { name: '' }
      return `${i18n.t(data.recommendation)}: ${info.name}`
    },
  }),

  analyticsDateCreated: () => ({
    colId: 'dateCreated',
    headerName: i18n.t('date_created'),
    field: 'timestamp',
    valueFormatter: ({ value }) => dates.formatDateFromApi(value),
    comparator: (a, b) => dates.compareDates(a, b),
  }),
}
