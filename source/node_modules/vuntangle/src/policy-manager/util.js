import {
  countryCodes,
  priorities,
  protocols,
  productivityLevels,
  riskLevels,
  interfaceTypes,
  daysOfWeek,
} from '../constants'
import {
  ConditionType,
  ActionType,
  ConditionTarget,
  sourceConditionTypes,
  destinationConditionTypes,
  otherConditionTypes,
} from './config/constants'
import rulesConfig from './config/rulesConfig'
import actionsConfig from './config/actionsConfig'
import templatesConfig from './config/templatesConfig'

import conditionsConfig from './config/conditionsConfig'
import i18n from '@/plugins/vue-i18n'

/**
 * Returns a mapped data of policy_manager from settings.json
 *
 * @param {Object} originalData - the original policy_manager data from settings.json
 * @returns a maped data based on ids
 */
const mapData = originalData => {
  let mappedData = {}
  const keys = ['policies', 'rules', 'conditions', 'condition_groups', 'objects', 'object_groups', 'configurations']

  keys.forEach(key => {
    mappedData = { ...mappedData, ...originalData[key]?.reduce((acc, el) => ({ ...acc, [el.id]: el }), {}) }
  })
  return mappedData
}

/**
 * Filter a set of conditions items based on their SOURCE/DEST/OTHER
 * @param {Array} items - condition items
 * @param {String} target - the target as SOURCE/DEST/OTHER
 * @returns Array
 */
function filterConditionItems(items, target) {
  let filteredItems
  switch (target) {
    case ConditionTarget.Source:
      filteredItems = items.filter(item => sourceConditionTypes.includes(item.type))
      break
    case ConditionTarget.Destination:
      filteredItems = items.filter(item => destinationConditionTypes.includes(item.type))
      break
    case ConditionTarget.Other:
      filteredItems = items.filter(item => otherConditionTypes.includes(item.type))
      break
    default:
      filteredItems = items
  }

  return filteredItems
}

/**
 * Returns the translated condition type (with source/dest prefix)
 * @param {String} type - condition type, e.g. CLIENT_ADDRESS
 * @returns String
 */
function conditionType(type) {
  return i18n.t(conditionsConfig[type].text)
}

/**
 * Returns the short translated condition type (without source/dest prefix)
 * @param {String} conditionType - condition type, e.g. CLIENT_ADDRESS
 * @param {String} target - cond target as SOURCE/DEST
 * @returns String
 */
function shortConditionType(type) {
  return i18n.t(conditionsConfig[type].short_text || conditionsConfig[type].text)
}

/**
 * Computes a readable condition value for equal operators based on its type
 * @param {Object} conditionItem - a condition item, { type, equalOp, value }
 * @returns String
 */
function equalsConditionValue(conditionItem) {
  switch (conditionItem.type) {
    case ConditionType.IpProtocol:
      return conditionItem.value?.map(number => protocols[number]).join(', ')

    case ConditionType.ApplicationProductivity:
    case ConditionType.ApplicationProductivityInferred:
      return i18n.t(productivityLevels[conditionItem.value?.[0]])

    case ConditionType.ClientGeoIp:
    case ConditionType.ServerGeoIp:
      return countryCodes[conditionItem.value?.[0]]

    case ConditionType.ApplicationRisk:
    case ConditionType.ApplicationRiskInferred:
      return i18n.t(riskLevels[conditionItem.value?.[0]])

    case ConditionType.ClientInterfaceType:
    case ConditionType.ServerInterfaceType:
      return i18n.t(interfaceTypes[conditionItem.value?.[0]])

    case ConditionType.DayOfWeek:
      return conditionItem.value?.map(day => i18n.t(daysOfWeek[day])).join(', ')

    default:
      return conditionItem.value?.join(', ')
  }
}

/**
 * Returns rule action data as expected by the grid action column
 * @param {Object} action - the action object, e.g. { type: 'WAN_POLICY', policy: '1111-2222-3333' }, { type: 'CONFIGURATION', configuration_id: '1111-2222-3333' }
 * @param {Object} conf - object having { name, id } for WAN_POLICY or CONFIGURATION action types
 * @returns Object
 */
function actionValue(action, conf) {
  const out = {
    text: undefined,
    id: undefined,
    icon: actionsConfig[action.type].icon,
    iconColor: actionsConfig[action.type].iconColor,
  }
  switch (action.type) {
    case ActionType.Drop:
    case ActionType.Accept:
    case ActionType.Reject:
    case ActionType.Masquerade:
      out.text = i18n.t(actionsConfig[action.type].text)
      break
    case ActionType.SourceAddress:
      out.text = `${i18n.t('new_source')}: ${action.snat_address}`
      break
    case ActionType.DestinationAddress:
      out.text = `${i18n.t('new_destination')}: ${action.dnat_address}${action.dnat_port ? `:${action.dnat_port}` : ''}`
      break
    case ActionType.Priority:
      out.text = `${i18n.t('priority')}: ${i18n.t(priorities[action.priority])}`
      break
    case ActionType.Configuration:
    case ActionType.WanPolicy:
      out.text = conf.name
      out.id = conf.id
  }
  return out
}

/**
 * Returns translated rule type
 * @param {String} ruleType - the rule type
 * @returns String
 */
function ruleType(ruleType) {
  return i18n.t(rulesConfig[ruleType]?.text)
}

/**
 * Returns translated template type
 * @param {String} templateType - the template type
 * @returns String
 */
function templateType(templateType) {
  return i18n.t(templatesConfig[templateType]?.text)
}

export {
  mapData,
  filterConditionItems,
  conditionType,
  shortConditionType,
  equalsConditionValue,
  actionValue,
  ruleType,
  templateType,
}
