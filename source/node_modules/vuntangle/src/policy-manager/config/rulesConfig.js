import { Type, ActionType, ConditionType } from './constants'

// all available conditions used for configurations
const allConditions = Object.values(ConditionType)

/**
 * Rules configurations based on Type
 * `mfw-rule-security`: {
 *   category: 'network' => to which category this rule belongs (to build up categorised menu)
 *   text: 'some_text' => the translation key used for it
 *   conditions: the available conditions for a specific rule type
 *   defaultRule: {} => the default rule when creating a new one
 *   header: 'text' => action column header used in grids
 * }
 */
export default Object.freeze({
  [Type.RuleSecurity]: {
    category: 'none',
    text: 'security',
    avatar: 'SEC',
    subtitle: 'security_description',
    allowDisable: true,
    conditions: [
      ConditionType.ApplicationCategory,
      ConditionType.ApplicationName,
      ConditionType.ApplicationProductivity,
      ConditionType.ApplicationRisk,
      ConditionType.ServerAddress,
      ConditionType.ServerAddressV6,
      ConditionType.ServerGeoIp,
      ConditionType.ServerInterfaceType,
      ConditionType.ServerPort,
      ConditionType.ClientReverseDns,
      ConditionType.ServerDnsHint,
      ConditionType.ClientAddress,
      ConditionType.ClientAddressV6,
      ConditionType.ClientGeoIp,
      ConditionType.ClientInterfaceType,
      ConditionType.ClientPort,
      ConditionType.IpProtocol,
    ],
    defaultRule: {
      action: { type: ActionType.Drop },
      conditions: [],
    },
    header: 'Action',
  },
  // // CD- 6048 Hide WAN Rules from Policy Manager (not yet implemented)
  // [Type.RuleWanPolicy]: {
  //   category: 'routing',
  //   text: 'wan_rule',
  //   avatar: 'WAN',
  //   subtitle: 'wan_rule_description',
  //   templateType: Type.ConfigWanPolicy,
  //   allowDisable: true,
  //   conditions: [
  //     ConditionType.ApplicationCategoryInferred,
  //     ConditionType.ApplicationNameInferred,
  //     ConditionType.ApplicationProductivityInferred,
  //     ConditionType.ApplicationRiskInferred,
  //     ConditionType.ServerAddress,
  //     ConditionType.ServerAddressV6,
  //     // ConditionType.DestinationAddressType,
  //     ConditionType.ServerGeoIp,
  //     ConditionType.ServerPort,
  //     ConditionType.ClientAddress,
  //     ConditionType.ClientAddressV6,
  //     // ConditionType.SourceAddressType,
  //     ConditionType.ClientGeoIp,
  //     ConditionType.SourceInterface,
  //     ConditionType.ClientInterfaceType,
  //     ConditionType.ClientPort,
  //     ConditionType.ServerDnsHint,
  //     ConditionType.IpProtocol,
  //   ],
  //   defaultRule: {
  //     action: { type: ActionType.WanPolicy, policy: undefined },
  //     conditions: [],
  //   },
  //   header: 'Action',
  // },
  [Type.RulePortForward]: {
    category: 'network',
    text: 'port_forward',
    avatar: 'PF',
    subtitle: 'port_forward_description',
    allowDisable: true,
    conditions: [
      ConditionType.ServerAddress,
      ConditionType.ServerAddressV6,
      ConditionType.ServerPort,
      ConditionType.ClientAddress,
      ConditionType.ClientAddressV6,
      // ConditionType.SourceAddressType,
      ConditionType.SourceInterface,
      ConditionType.ClientInterfaceType,
      ConditionType.ClientPort,
      ConditionType.DestinedLocal,
    ],
    defaultRule: {
      action: { type: ActionType.DestinationAddress },
      conditions: [],
    },
    header: 'Action',
  },

  [Type.RuleShaping]: {
    category: 'network',
    text: 'shaping',
    avatar: 'SH',
    subtitle: 'shaping_description',
    allowDisable: true,
    conditions: [
      ConditionType.ApplicationCategory,
      ConditionType.ApplicationName,
      ConditionType.ApplicationProductivity,
      ConditionType.ApplicationRisk,
      ConditionType.ClientAddress,
      ConditionType.ClientAddressV6,
      ConditionType.ClientInterfaceType,
      ConditionType.ClientPort,
      ConditionType.ClientReverseDns,
      ConditionType.ServerAddress,
      ConditionType.ServerAddressV6,
      ConditionType.ServerDnsHint,
      ConditionType.ServerInterfaceType,
      ConditionType.ServerPort,
      ConditionType.IpProtocol,
      // ConditionType.LimitRate,
    ],
    defaultRule: {
      action: { type: ActionType.Priority, priority: '3' }, // 3 = standard priority
      conditions: [],
    },
    header: 'Action',
  },
  [Type.RuleNat]: {
    category: 'network',
    subtitle: 'nat_description',
    text: 'nat',
    avatar: 'NAT',
    allowDisable: true,
    conditions: [
      ConditionType.ApplicationCategory,
      ConditionType.ApplicationName,
      ConditionType.ApplicationProductivity,
      ConditionType.ApplicationRisk,
      ConditionType.ServerAddress,
      ConditionType.ServerAddressV6,
      // ConditionType.DestinationAddressType,
      ConditionType.DestinationInterface,
      ConditionType.ServerInterfaceType,
      ConditionType.ServerPort,
      ConditionType.ClientAddress,
      ConditionType.ClientAddressV6,
      // ConditionType.SourceAddressType,
      ConditionType.SourceInterface,
      ConditionType.ClientInterfaceType,
      ConditionType.ClientPort,
      ConditionType.IpProtocol,
    ],
    defaultRule: {
      action: { type: ActionType.Masquerade },
      conditions: [],
    },
    header: 'Action',
  },
  [Type.RuleApplicationControl]: {
    category: 'services',
    text: 'application_control',
    avatar: 'AC',
    subtitle: 'application_control_description',
    templateType: Type.ConfigApplicationControl,
    conditions: allConditions,
    defaultRule: {
      action: { type: 'SET_CONFIGURATION', key: Type.RuleApplicationControl, configuration_id: '' },
      conditions: [],
    },
    header: 'Configuration',
  },
  [Type.RuleGeoipFilter]: {
    category: 'services',
    text: 'geoip_filter',
    avatar: 'GEO',
    subtitle: 'geo_ip_description',
    templateType: Type.ConfigGeoipFilter,
    conditions: allConditions,
    defaultRule: {
      action: { type: 'SET_CONFIGURATION', key: Type.RuleGeoipFilter, configuration_id: '' },
      conditions: [],
    },
    header: 'Configuration',
  },
  [Type.RuleThreatPrevention]: {
    category: 'services',
    text: 'threat_prevention',
    avatar: 'TP',
    subtitle: 'threat_prevention_description',
    templateType: Type.ConfigThreatPrevention,
    conditions: allConditions,
    defaultRule: {
      action: { type: 'SET_CONFIGURATION', key: Type.RuleThreatPrevention, configuration_id: '' },
      conditions: [],
    },
    header: 'Configuration',
  },
  [Type.RuleWebFilter]: {
    category: 'services',
    text: 'web_filter',
    avatar: 'WF',
    subtitle: 'web_filter_description',
    templateType: Type.ConfigWebFilter,
    conditions: allConditions,
    defaultRule: {
      action: { type: 'SET_CONFIGURATION', key: Type.RuleWebFilter, configuration_id: '' },
      conditions: [],
    },
    header: 'Configuration',
  },
  [Type.RuleCaptivePortal]: {
    category: 'services',
    text: 'captive_portal',
    avatar: 'CP',
    subtitle: 'captive_portal_description',
    templateType: Type.ConfigCaptivePortal,
    conditions: allConditions,
    defaultRule: {
      action: { type: 'SET_CONFIGURATION', key: Type.RuleCaptivePortal, configuration_id: '' },
      conditions: [],
    },
    header: 'Configuration',
  },
})
