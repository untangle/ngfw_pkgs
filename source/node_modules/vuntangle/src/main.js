// import base packages
import Vue from 'vue'
import { ValidationProvider, ValidationObserver } from 'vee-validate'
import { captureException } from '@sentry/vue'
import i18n from './plugins/vue-i18n'
import initSentry from './plugins/init-sentry'
import initVeeValidate from './plugins/init-vee-validate'
import dates from './plugins/dates'
import util from './plugins/util'
import promiseQueue from './plugins/promiseQueue'
import widgets from './plugins/widgets'
import net from './plugins/net'
import renderer from './plugins/renderer'
import chartOptions from './plugins/chartOptions'
import columns from './plugins/columns'
import reports from './plugins/reports'
import tz from './plugins/tz'

import '@mdi/font/css/materialdesignicons.css'

// import vuntangle theme
import './scss/theme.scss'

import webFilterCategoriesDefs from './shared/SettingsWebFilter/categories.json'

// error logging handler to send sentry logging
const errorLogger = err => {
  captureException(err)
  // eslint-disable-next-line no-console
  console.error(err)
}

export default class VUntangle {
  constructor() {
    /*
     * Hold a vue 'vm' instance for the plugin.  Used for events, data, and it's own plugins like i18n.
     */
    this.vm = new Vue({
      data: {
        locale: 'en',
        theme: 'light',
      },
      i18n,
    })

    // used so 'this.$vuntangle.confirm.show()' can be used to manipulate the base <u-framework-confirm> component
    this.confirm = {
      show: options => this.vm.$emit('show-confirm', options),
    }

    // used so 'this.$vuntangle.dialog.show()' can be used to manipulate the base <u-framework-dialog> component
    this.dialog = {
      show: options => this.vm.$emit('show-dialog', options),
    }

    // used so 'this.$vuntangle.toast.add()' can be used to manipulate the base <u-framework-toast> component
    this.toast = {
      add: (message, type = 'info') => this.vm.$emit('add-toast', { message, type }),
      clear: () => this.vm.$emit('clear-toasts'),
    }

    // hold the environment the plugin was installed on
    this.env = VUntangle.env

    // add plugins
    this.dates = dates
    this.util = util
    this.widgets = widgets
    this.net = net
    this.promiseQueue = promiseQueue
    this.renderer = renderer
    this.chartOptions = chartOptions
    this.columns = columns
    this.reports = reports
    this.tz = tz
  }

  /*
   * Sugar methods so theme, locale, translations in the vm instance can easily be accessed just by: this.$vuntangle
   */
  get theme() {
    return this.vm.theme
  }

  set theme(newTheme) {
    this.vm.theme = newTheme
  }

  get locale() {
    return this.vm.locale
  }

  set locale(newLocale) {
    this.vm.locale = newLocale
    this.vm.$i18n.locale = newLocale
  }

  $t() {
    return this.vm.$t(...arguments)
  }

  $tc() {
    return this.vm.$tc(...arguments)
  }

  /**
   * The base Vuntangle plugin install which is called upon Vue.use()
   */
  static install(Vue, options) {
    if (VUntangle.installed) {
      // eslint-disable-next-line no-console
      console.warn('Already installed!')
      return
    }
    VUntangle.installed = true
    VUntangle.env = options?.env || 'production'

    // add sentry error logging if a sentry dsn was passed in and not in a developer environment
    const sentryDsn = options?.sentryDsn || null
    if (sentryDsn && VUntangle.env !== 'devServer' && VUntangle.env !== 'local') {
      initSentry(VUntangle.env, sentryDsn)

      // add logging to the vue base error handlers
      Vue.config.errorHandler = errorLogger
      Vue.config.renderError = errorLogger
      Vue.config.warnHandler = errorLogger
    }

    // set developer tools when using dev server
    Vue.config.devtools = VUntangle.env === 'devServer'
    Vue.config.productionTip = false

    // register components globally
    if (options?.components) {
      VUntangle.registerComponents(options.components)
    }

    // add vee validate rules and register components
    initVeeValidate()
    Vue.component('ValidationProvider', ValidationProvider)
    Vue.component('ValidationObserver', ValidationObserver)

    // bind $vuntangle to 'this' in components
    Vue.mixin({
      beforeCreate() {
        const options = this.$options
        if (options.vuntangle) {
          this.$vuntangle = options.vuntangle
        } else if (options.parent?.$vuntangle) {
          this.$vuntangle = options.parent.$vuntangle
        }
      },
    })

    /**
     * Filter that highlights a substring from given text
     * The lookup is case insensitive but to preserve the letters capitalization
     * it is used a regex substring index and length
     * @param {String} str The original string
     * @param {String} term The search term that is highlighted inside the string
     * @param {String} textColor Custom text color
     * @param {String} bgColor Custom text background color
     * @return {String} sting with markup that highlights the term
     */
    Vue.filter('highlight', (str, term, textColor = '#0071DC', bgColor = '#EEE') => {
      const idx = str.toLowerCase().indexOf(term?.toLowerCase())
      if (idx === -1) return str
      const sub = str.substr(idx, term.length)
      return str.replace(
        new RegExp(sub, 'gi'),
        `<span style="color: ${textColor}; background-color: ${bgColor}">${sub}</span>`,
      )
    })
  }

  /**
   * Used to register VUntangle components globally.
   *
   * @param {Object} components
   */
  static registerComponents(components) {
    for (const key in components) {
      Vue.component(key, components[key])
    }
  }
}
VUntangle.installed = false

// export a singleton instance for use when multiple packages may use vuntangle
VUntangle.instance = new VUntangle()

export { webFilterCategoriesDefs }

// export all modules for easy importing
export * from './components'
export * from './framework'
export * from './config'
export * from './locales'
export * from './shared'
