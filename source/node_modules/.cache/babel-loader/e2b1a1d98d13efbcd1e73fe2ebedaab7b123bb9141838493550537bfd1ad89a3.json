{"ast":null,"code":"var passwordFill = '******';\nexport default {\n  inject: ['$intf'],\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    pppoePassword: {\n      /**\n       * If we do have the `v4PPPoEPasswordEncrypted` means a password was already set (edit mode)\n       * and if password field is not being touched it will be just filled with 6 dots\n       */\n      get: function get(_ref2) {\n        var intf = _ref2.intf;\n        return intf.v4PPPoEPasswordEncrypted && !('v4PPPoEPassword' in intf) ? passwordFill : intf.v4PPPoEPassword;\n      },\n      set: function set(value) {\n        // on password field input, just set/update the `v4PPPoEPassword` plain password prop on interface settings\n        this.$set(this.intf, 'v4PPPoEPassword', value);\n      }\n    }\n  },\n  methods: {\n    /**\n     * Empty the field when settings a new password\n     */\n    onFocus: function onFocus() {\n      if (this.pppoePassword === passwordFill) this.pppoePassword = '';\n    },\n    /**\n     * Fill in the dummy password fill if password field is empty\n     * and remove it from interface settings\n     */\n    onBlur: function onBlur() {\n      if (this.pppoePassword === '') {\n        this.pppoePassword = passwordFill;\n        this.$delete(this.intf, 'v4PPPoEPassword');\n      }\n    }\n  }\n};","map":{"version":3,"names":["passwordFill","inject","computed","intf","_ref","$intf","pppoePassword","get","_ref2","v4PPPoEPasswordEncrypted","v4PPPoEPassword","set","value","$set","methods","onFocus","onBlur","$delete"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/ipv4/Ipv4Pppoe.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row>\n      <v-col>\n        <!-- v4PPPoEUsername -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-text-field v-model=\"intf.v4PPPoEUsername\" :label=\"$t('username')\" :error-messages=\"errors\">\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n      <v-col>\n        <!-- v4PPPoEPassword -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required|min:6\">\n          <u-text-field\n            v-model=\"pppoePassword\"\n            :label=\"$t('password')\"\n            type=\"password\"\n            :error-messages=\"errors\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n    </v-row>\n    <!-- v4PPPoEUsePeerDNS -->\n    <v-checkbox v-model=\"intf.v4PPPoEUsePeerDNS\" :label=\"$t('use_peer_dns')\" />\n    <v-row>\n      <v-col>\n        <!-- v4PPPoEOverrideDNS1 -->\n        <ValidationProvider\n          v-slot=\"{ errors }\"\n          :rules=\"{ required: !intf.v4PPPoEUsePeerDNS, ip: !intf.v4PPPoEUsePeerDNS }\"\n        >\n          <u-text-field\n            v-model=\"intf.v4PPPoEOverrideDNS1\"\n            :label=\"$t('primary_dns')\"\n            :disabled=\"intf.v4PPPoEUsePeerDNS\"\n            :error-messages=\"errors\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n      <v-col>\n        <!-- v4PPPoEOverrideDNS2 -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"ip\">\n          <u-text-field\n            v-model=\"intf.v4PPPoEOverrideDNS2\"\n            :label=\"$t('secondary_dns')\"\n            :disabled=\"intf.v4PPPoEUsePeerDNS\"\n            :error-messages=\"errors\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n<script>\n  const passwordFill = '******'\n\n  export default {\n    inject: ['$intf'],\n\n    computed: {\n      intf: ({ $intf }) => $intf(),\n      pppoePassword: {\n        /**\n         * If we do have the `v4PPPoEPasswordEncrypted` means a password was already set (edit mode)\n         * and if password field is not being touched it will be just filled with 6 dots\n         */\n        get: ({ intf }) =>\n          intf.v4PPPoEPasswordEncrypted && !('v4PPPoEPassword' in intf) ? passwordFill : intf.v4PPPoEPassword,\n        set(value) {\n          // on password field input, just set/update the `v4PPPoEPassword` plain password prop on interface settings\n          this.$set(this.intf, 'v4PPPoEPassword', value)\n        },\n      },\n    },\n\n    methods: {\n      /**\n       * Empty the field when settings a new password\n       */\n      onFocus() {\n        if (this.pppoePassword === passwordFill) this.pppoePassword = ''\n      },\n\n      /**\n       * Fill in the dummy password fill if password field is empty\n       * and remove it from interface settings\n       */\n      onBlur() {\n        if (this.pppoePassword === '') {\n          this.pppoePassword = passwordFill\n          this.$delete(this.intf, 'v4PPPoEPassword')\n        }\n      },\n    },\n  }\n</script>\n"],"mappings":"AA+DA,IAAAA,YAAA;AAEA;EACAC,MAAA;EAEAC,QAAA;IACAC,IAAA,WAAAA,KAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MAAA,OAAAA,KAAA;IAAA;IACAC,aAAA;MACA;AACA;AACA;AACA;MACAC,GAAA,WAAAA,IAAAC,KAAA;QAAA,IAAAL,IAAA,GAAAK,KAAA,CAAAL,IAAA;QAAA,OACAA,IAAA,CAAAM,wBAAA,2BAAAN,IAAA,IAAAH,YAAA,GAAAG,IAAA,CAAAO,eAAA;MAAA;MACAC,GAAA,WAAAA,IAAAC,KAAA;QACA;QACA,KAAAC,IAAA,MAAAV,IAAA,qBAAAS,KAAA;MACA;IACA;EACA;EAEAE,OAAA;IACA;AACA;AACA;IACAC,OAAA,WAAAA,QAAA;MACA,SAAAT,aAAA,KAAAN,YAAA,OAAAM,aAAA;IACA;IAEA;AACA;AACA;AACA;IACAU,MAAA,WAAAA,OAAA;MACA,SAAAV,aAAA;QACA,KAAAA,aAAA,GAAAN,YAAA;QACA,KAAAiB,OAAA,MAAAd,IAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}