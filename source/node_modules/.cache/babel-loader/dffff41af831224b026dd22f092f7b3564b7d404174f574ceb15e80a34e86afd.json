{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { VContainer, VSpacer, VDivider, VCheckbox, VRow, VCol, VRadioGroup, VRadio, VSlider, VBtn, VIcon } from 'vuetify/lib';\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\nimport settingsMixin from '../settingsMixin';\nimport { policyTypes, policyBestOfMetrics, policyBalanceAlgorithms } from './data/options';\nimport WanCriteria from './WanCriteria.vue';\nexport default {\n  components: {\n    VContainer: VContainer,\n    VSpacer: VSpacer,\n    VDivider: VDivider,\n    VCheckbox: VCheckbox,\n    VRow: VRow,\n    VCol: VCol,\n    VRadioGroup: VRadioGroup,\n    VRadio: VRadio,\n    VSlider: VSlider,\n    VBtn: VBtn,\n    VIcon: VIcon,\n    ValidationObserver: ValidationObserver,\n    ValidationProvider: ValidationProvider,\n    WanCriteria: WanCriteria\n  },\n  mixins: [settingsMixin],\n  props: {\n    // all the wans that can be part of a policy also passed from host app\n    wans: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      wanSelection: undefined,\n      // ALL or SPECIFIC\n      selectedWansTracker: [],\n      // keeps track of specific wans selection and if it's the case their weights\n      mixins: [settingsMixin],\n      policyTypes: policyTypes,\n      policyBestOfMetrics: policyBestOfMetrics,\n      policyBalanceAlgorithms: policyBalanceAlgorithms\n    };\n  },\n  computed: {\n    /**\n     * for cloud is needed to omit specific wan policies\n     * if no wans are passed to the component than it omits any configs implying specific wans\n     */\n    omitSpecificWans: function omitSpecificWans(_ref) {\n      var wans = _ref.wans;\n      return !(wans !== null && wans !== void 0 && wans.length);\n    },\n    /**\n     * removes the SPECIFIC_WAN option if specific wans omitted\n     */\n    policyTypeOptions: function policyTypeOptions(_ref2) {\n      var omitSpecificWans = _ref2.omitSpecificWans,\n        policyTypes = _ref2.policyTypes;\n      if (omitSpecificWans) {\n        delete policyTypes.SPECIFIC_WAN;\n      }\n      return policyTypes;\n    },\n    // returns the first wan used for specific type, applies for mfw only\n    firstWan: function firstWan(_ref3) {\n      var wans = _ref3.wans;\n      return wans[0] || undefined;\n    },\n    typeSelection: {\n      get: function get(_ref4) {\n        var settingsCopy = _ref4.settingsCopy;\n        return settingsCopy.type;\n      },\n      set: function set(type) {\n        this.settingsCopy.type = type;\n        if (!this.settingsCopy.best_of_metric) {\n          // sets default metric for BEST_OF\n          this.$set(this.settingsCopy, 'best_of_metric', 'LOWEST_LATENCY');\n        }\n        if (!this.settingsCopy.balance_algorithm) {\n          // selects default algorithm for BALANCE\n          this.$set(this.settingsCopy, 'balance_algorithm', 'WEIGHTED');\n        }\n      }\n    },\n    /**\n     * computed for SPECIFIC_WAN selection type\n     */\n    specificWanInterface: {\n      get: function get(_ref5) {\n        var settingsCopy = _ref5.settingsCopy;\n        return settingsCopy.interfaces[0].interfaceId;\n      },\n      set: function set(value) {\n        this.settingsCopy.interfaces = [{\n          interfaceId: value\n        }];\n      }\n    }\n  },\n  /**\n   * all those watchers are needed to keep track of the selected wans and their weight\n   */\n  watch: {\n    'wanSelection': function wanSelection() {\n      this.updateWansTracker();\n    },\n    'settingsCopy.type': function settingsCopyType() {\n      this.updateWansTracker();\n    },\n    'settingsCopy.balance_algorithm': function settingsCopyBalance_algorithm() {\n      this.updateWansTracker();\n    },\n    'settingsCopy.best_of_metric': function settingsCopyBest_of_metric() {\n      this.updateWansTracker();\n    },\n    selectedWansTracker: {\n      handler: function handler() {\n        this.updateWansTracker();\n      },\n      deep: true\n    }\n  },\n  created: function created() {\n    if (!this.settingsCopy) {\n      var _this$firstWan;\n      this.settingsCopy = {\n        criteria: [],\n        interfaces: [{\n          interfaceId: ((_this$firstWan = this.firstWan) === null || _this$firstWan === void 0 ? void 0 : _this$firstWan.interfaceId) || 0\n        }],\n        type: this.omitSpecificWans ? 'BEST_OF' : 'SPECIFIC_WAN'\n      };\n    }\n    if (!this.omitSpecificWans) {\n      this.initializeWansSelectionTracker();\n    } else {\n      this.wanSelection = 'ALL';\n    }\n  },\n  methods: {\n    /**\n     * based on initial policy settings passed to the component\n     * it sets up the selected wans tracker\n     */\n    initializeWansSelectionTracker: function initializeWansSelectionTracker() {\n      var _this = this;\n      this.wanSelection = this.settingsCopy.interfaces.length === 1 && this.settingsCopy.interfaces[0].interfaceId === 0 ? 'ALL' : 'SPECIFIC';\n      var selection = [];\n      this.wans.forEach(function (wan) {\n        var intf = _this.settingsCopy.interfaces.find(function (intf) {\n          return intf.interfaceId === wan.interfaceId;\n        });\n        selection.push({\n          id: wan.interfaceId,\n          name: wan.name,\n          selected: _this.wanSelection === 'ALL' ? true : !!intf,\n          weight: (intf === null || intf === void 0 ? void 0 : intf.weight) || 50\n        });\n      });\n      this.selectedWansTracker = selection;\n    },\n    /**\n     * updates the policy interfaces based on UI selections\n     */\n    updateWansTracker: function updateWansTracker() {\n      var _this2 = this;\n      // reset interfaces & remove keys based on `type`\n      switch (this.settingsCopy.type) {\n        case 'SPECIFIC_WAN':\n          delete this.settingsCopy.balance_algorithm;\n          delete this.settingsCopy.best_of_metric;\n          break;\n        case 'BEST_OF':\n          delete this.settingsCopy.balance_algorithm;\n          break;\n        case 'BALANCE':\n          delete this.settingsCopy.best_of_metric;\n      }\n      // reset interfaces & remove keys when SPECIFIC_WAN\n      if (this.settingsCopy.type === 'SPECIFIC_WAN') {\n        // preselect specific interface instead of ALL (id: 0) when SPECIFIC_WAN\n        this.settingsCopy.interfaces = [{\n          interfaceId: this.settingsCopy.interfaces[0].interfaceId\n        }];\n      } else {\n        if (this.wanSelection === 'ALL') {\n          this.settingsCopy.interfaces = [{\n            interfaceId: 0\n          }];\n          return;\n        }\n        var interfaces = [];\n        this.selectedWansTracker.forEach(function (wan) {\n          if (wan.selected) {\n            var intf = {\n              interfaceId: wan.id\n            };\n            if (_this2.settingsCopy.type === 'BALANCE' && _this2.settingsCopy.balance_algorithm === 'WEIGHTED') {\n              intf.weight = wan.weight || 50;\n            }\n            interfaces.push(intf);\n          }\n        });\n        this.settingsCopy.interfaces = interfaces;\n      }\n    },\n    /**\n     * used for showing a percentage corresponding to each wan weight\n     */\n    computePercent: function computePercent(wanId) {\n      var wan = this.selectedWansTracker.find(function (wan) {\n        return wan.id === wanId;\n      });\n      if (wan && !wan.selected) return 0;\n      var totalWeight = 0;\n      this.selectedWansTracker.forEach(function (wan) {\n        if (wan.selected) totalWeight += wan.weight;\n      });\n      return (wan.weight / totalWeight * 100).toFixed(2);\n    },\n    // just ads a new empty criteria entry\n    onAddCriteria: function onAddCriteria() {\n      /**\n       * MFW-2673 - auto generated wan policies when creating an IPsec/wireguard interface\n       * do not have `criteria` field set\n       */\n      if (!this.settingsCopy.criteria) {\n        this.$set(this.settingsCopy, 'criteria', []);\n      }\n      this.settingsCopy.criteria.push({});\n    },\n    onRemoveCriteria: function onRemoveCriteria(index) {\n      this.$delete(this.settingsCopy.criteria, index);\n    },\n    /**\n     * validation called from the host app\n     */\n    validate: function validate() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var isValid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this3.$refs.obs.validate();\n            case 2:\n              isValid = _context.sent;\n              return _context.abrupt(\"return\", isValid);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["VContainer","VSpacer","VDivider","VCheckbox","VRow","VCol","VRadioGroup","VRadio","VSlider","VBtn","VIcon","ValidationObserver","ValidationProvider","settingsMixin","policyTypes","policyBestOfMetrics","policyBalanceAlgorithms","WanCriteria","components","mixins","props","wans","type","Array","default","data","wanSelection","undefined","selectedWansTracker","computed","omitSpecificWans","_ref","length","policyTypeOptions","_ref2","SPECIFIC_WAN","firstWan","_ref3","typeSelection","get","_ref4","settingsCopy","set","best_of_metric","$set","balance_algorithm","specificWanInterface","_ref5","interfaces","interfaceId","value","watch","updateWansTracker","settingsCopyType","settingsCopyBalance_algorithm","settingsCopyBest_of_metric","handler","deep","created","_this$firstWan","criteria","initializeWansSelectionTracker","methods","_this","selection","forEach","wan","intf","find","push","id","name","selected","weight","_this2","computePercent","wanId","totalWeight","toFixed","onAddCriteria","onRemoveCriteria","index","$delete","validate","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isValid","wrap","_callee$","_context","prev","next","$refs","obs","sent","abrupt","stop"],"sources":["node_modules/vuntangle/src/shared/WanPolicies/WanPolicy.vue"],"sourcesContent":["<template>\n  <v-container fluid class=\"pa-4\">\n    <div class=\"d-flex align-center\">\n      <h1\n        :class=\"`headline ${!classicView ? 'font-weight-light' : ''}`\"\n        v-text=\"`${!settingsCopy.policyId ? $vuntangle.$t('add_wan_policy') : $vuntangle.$t('edit_wan_policy')}`\"\n      />\n      <v-spacer />\n      <slot name=\"actions\" :new-settings=\"settingsCopy\" :is-dirty=\"isDirty\"></slot>\n    </div>\n    <v-divider class=\"my-2\" />\n    <ValidationObserver ref=\"obs\">\n      <component :is=\"!classicView ? 'div' : 'u-section'\">\n        <slot v-if=\"!!$slots['extra-fields']\" name=\"extra-fields\" />\n        <ValidationProvider v-if=\"showDescription\" v-slot=\"{ errors }\" rules=\"required\">\n          <u-text-field\n            v-model=\"settingsCopy.description\"\n            :label=\"$vuntangle.$t('description')\"\n            :error-messages=\"errors\"\n            class=\"flex-grow-1\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </component>\n\n      <component :is=\"!classicView ? 'div' : 'u-section'\">\n        <v-row class=\"my-4\">\n          <!-- the policy type selector: SPECIFIC_WAN, BEST_OF, BALANCE -->\n          <v-col cols=\"2\">\n            <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('policy_wan_selection_type') }}:</div>\n            <v-radio-group v-model=\"typeSelection\" class=\"my-0\">\n              <v-radio\n                v-for=\"(text, type) in policyTypeOptions\"\n                :key=\"`type-${type}`\"\n                :value=\"type\"\n                :label=\"$vuntangle.$t(text)\"\n              />\n            </v-radio-group>\n          </v-col>\n\n          <!-- wan selector for SPECIFIC_WAN type -->\n          <v-col v-if=\"settingsCopy.type === 'SPECIFIC_WAN'\" cols=\"2\">\n            <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('wans') }}:</div>\n            <v-radio-group v-model=\"specificWanInterface\" class=\"my-0\">\n              <v-radio v-for=\"wan in wans\" :key=\"wan.interfaceId\" :value=\"wan.interfaceId\" :label=\"wan.name\" />\n            </v-radio-group>\n          </v-col>\n\n          <!-- metric selector for BEST_OF type -->\n          <v-col v-if=\"settingsCopy.type === 'BEST_OF'\" cols=\"3\">\n            <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('metric') }}:</div>\n            <v-radio-group v-model=\"settingsCopy.best_of_metric\" class=\"my-0\">\n              <v-radio\n                v-for=\"(text, metric) in policyBestOfMetrics\"\n                :key=\"`metric-${metric}`\"\n                :value=\"metric\"\n                :label=\"$vuntangle.$t(text)\"\n              />\n            </v-radio-group>\n          </v-col>\n\n          <!-- algorithm selector for BALANCE type -->\n          <v-col v-if=\"settingsCopy.type === 'BALANCE'\" cols=\"3\">\n            <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('algorithm') }}:</div>\n            <v-radio-group v-model=\"settingsCopy.balance_algorithm\" class=\"my-0\">\n              <v-radio\n                v-for=\"(text, algorithm) in policyBalanceAlgorithms\"\n                :key=\"`balance-${algorithm}`\"\n                :value=\"algorithm\"\n                :label=\"$vuntangle.$t(text)\"\n              />\n            </v-radio-group>\n          </v-col>\n\n          <template v-if=\"(settingsCopy.type === 'BEST_OF' || settingsCopy.type === 'BALANCE') && !omitSpecificWans\">\n            <!-- all or specific selector for BEST_OF and BALANCE types -->\n            <v-col cols=\"2\">\n              <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('select') }}:</div>\n              <v-radio-group v-model=\"wanSelection\" class=\"my-0\">\n                <v-radio value=\"ALL\" :label=\"$vuntangle.$t('all_wans')\"></v-radio>\n                <v-radio value=\"SPECIFIC\" :label=\"$vuntangle.$t('pick_specific_wans')\"></v-radio>\n              </v-radio-group>\n            </v-col>\n\n            <!-- selector with all available wans that can be selected -->\n            <v-col v-if=\"wanSelection === 'SPECIFIC'\" cols=\"2\">\n              <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('wans') }}:</div>\n              <v-checkbox\n                v-for=\"wan in selectedWansTracker\"\n                :key=\"`wan-${wan.id}`\"\n                v-model=\"wan.selected\"\n                :disabled=\"wan.selected && settingsCopy.interfaces.length <= 1\"\n                :label=\"wan.name\"\n                class=\"mt-0 mb-1\"\n                hide-details\n                style=\"width: 200px\"\n              />\n            </v-col>\n\n            <!-- weight sliders for BALANCE WEIGHTED algorithm -->\n            <v-col\n              v-if=\"\n                settingsCopy.type === 'BALANCE' &&\n                settingsCopy.balance_algorithm === 'WEIGHTED' &&\n                wanSelection === 'SPECIFIC'\n              \"\n              cols=\"3\"\n            >\n              <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('weight') }}:</div>\n              <div v-for=\"wan in selectedWansTracker\" :key=\"`weight-${wan.id}`\" class=\"d-flex\">\n                <v-slider\n                  v-model=\"wan.weight\"\n                  :disabled=\"!wan.selected\"\n                  thumb-label\n                  :ticks=\"false\"\n                  hide-details\n                  class=\"my-0\"\n                >\n                  <template #append>\n                    <div class=\"caption\" style=\"width: 80px\">\n                      <strong>{{ wan.weight }}</strong> ({{ computePercent(wan.id) }}%)\n                    </div>\n                  </template>\n                </v-slider>\n              </div>\n            </v-col>\n          </template>\n        </v-row>\n\n        <!-- CRITERIA section -->\n        <h3 class=\"mb-3\">{{ $vuntangle.$t('wan_criteria') }}</h3>\n\n        <!-- using condition.type as an extra key composer -->\n        <div v-for=\"(criteria, index) in settingsCopy.criteria\" :key=\"index\" class=\"d-flex align-center mb-2\">\n          <wan-criteria :criteria.sync=\"settingsCopy.criteria[index]\" v-on=\"$listeners\" />\n          <v-btn icon class=\"ml-2\" @click=\"onRemoveCriteria(index)\"> <v-icon>mdi-close</v-icon></v-btn>\n        </div>\n        <u-btn @click=\"onAddCriteria\">{{ $vuntangle.$t('add_criteria') }}</u-btn>\n      </component>\n    </ValidationObserver>\n  </v-container>\n</template>\n<script>\n  import {\n    VContainer,\n    VSpacer,\n    VDivider,\n    VCheckbox,\n    VRow,\n    VCol,\n    VRadioGroup,\n    VRadio,\n    VSlider,\n    VBtn,\n    VIcon,\n  } from 'vuetify/lib'\n  import { ValidationObserver, ValidationProvider } from 'vee-validate'\n  import settingsMixin from '../settingsMixin'\n  import { policyTypes, policyBestOfMetrics, policyBalanceAlgorithms } from './data/options'\n  import WanCriteria from './WanCriteria.vue'\n\n  export default {\n    components: {\n      VContainer,\n      VSpacer,\n      VDivider,\n      VCheckbox,\n      VRow,\n      VCol,\n      VRadioGroup,\n      VRadio,\n      VSlider,\n      VBtn,\n      VIcon,\n      ValidationObserver,\n      ValidationProvider,\n\n      WanCriteria,\n    },\n    mixins: [settingsMixin],\n    props: {\n      // all the wans that can be part of a policy also passed from host app\n      wans: { type: Array, default: () => [] },\n    },\n    data: () => ({\n      wanSelection: undefined, // ALL or SPECIFIC\n      selectedWansTracker: [], // keeps track of specific wans selection and if it's the case their weights\n      mixins: [settingsMixin],\n\n      policyTypes,\n      policyBestOfMetrics,\n      policyBalanceAlgorithms,\n    }),\n    computed: {\n      /**\n       * for cloud is needed to omit specific wan policies\n       * if no wans are passed to the component than it omits any configs implying specific wans\n       */\n      omitSpecificWans: ({ wans }) => !wans?.length,\n\n      /**\n       * removes the SPECIFIC_WAN option if specific wans omitted\n       */\n      policyTypeOptions: ({ omitSpecificWans, policyTypes }) => {\n        if (omitSpecificWans) {\n          delete policyTypes.SPECIFIC_WAN\n        }\n        return policyTypes\n      },\n\n      // returns the first wan used for specific type, applies for mfw only\n      firstWan: ({ wans }) => wans[0] || undefined,\n\n      typeSelection: {\n        get: ({ settingsCopy }) => {\n          return settingsCopy.type\n        },\n        set(type) {\n          this.settingsCopy.type = type\n          if (!this.settingsCopy.best_of_metric) {\n            // sets default metric for BEST_OF\n            this.$set(this.settingsCopy, 'best_of_metric', 'LOWEST_LATENCY')\n          }\n          if (!this.settingsCopy.balance_algorithm) {\n            // selects default algorithm for BALANCE\n            this.$set(this.settingsCopy, 'balance_algorithm', 'WEIGHTED')\n          }\n        },\n      },\n\n      /**\n       * computed for SPECIFIC_WAN selection type\n       */\n      specificWanInterface: {\n        get: ({ settingsCopy }) => settingsCopy.interfaces[0].interfaceId,\n        set(value) {\n          this.settingsCopy.interfaces = [{ interfaceId: value }]\n        },\n      },\n    },\n\n    /**\n     * all those watchers are needed to keep track of the selected wans and their weight\n     */\n    watch: {\n      'wanSelection'() {\n        this.updateWansTracker()\n      },\n      'settingsCopy.type'() {\n        this.updateWansTracker()\n      },\n      'settingsCopy.balance_algorithm'() {\n        this.updateWansTracker()\n      },\n      'settingsCopy.best_of_metric'() {\n        this.updateWansTracker()\n      },\n      selectedWansTracker: {\n        handler() {\n          this.updateWansTracker()\n        },\n        deep: true,\n      },\n    },\n\n    created() {\n      if (!this.settingsCopy) {\n        this.settingsCopy = {\n          criteria: [],\n          interfaces: [{ interfaceId: this.firstWan?.interfaceId || 0 }],\n          type: this.omitSpecificWans ? 'BEST_OF' : 'SPECIFIC_WAN',\n        }\n      }\n      if (!this.omitSpecificWans) {\n        this.initializeWansSelectionTracker()\n      } else {\n        this.wanSelection = 'ALL'\n      }\n    },\n\n    methods: {\n      /**\n       * based on initial policy settings passed to the component\n       * it sets up the selected wans tracker\n       */\n      initializeWansSelectionTracker() {\n        this.wanSelection =\n          this.settingsCopy.interfaces.length === 1 && this.settingsCopy.interfaces[0].interfaceId === 0\n            ? 'ALL'\n            : 'SPECIFIC'\n\n        const selection = []\n        this.wans.forEach(wan => {\n          const intf = this.settingsCopy.interfaces.find(intf => intf.interfaceId === wan.interfaceId)\n          selection.push({\n            id: wan.interfaceId,\n            name: wan.name,\n            selected: this.wanSelection === 'ALL' ? true : !!intf,\n            weight: intf?.weight || 50,\n          })\n        })\n        this.selectedWansTracker = selection\n      },\n\n      /**\n       * updates the policy interfaces based on UI selections\n       */\n      updateWansTracker() {\n        // reset interfaces & remove keys based on `type`\n        switch (this.settingsCopy.type) {\n          case 'SPECIFIC_WAN':\n            delete this.settingsCopy.balance_algorithm\n            delete this.settingsCopy.best_of_metric\n            break\n          case 'BEST_OF':\n            delete this.settingsCopy.balance_algorithm\n            break\n          case 'BALANCE':\n            delete this.settingsCopy.best_of_metric\n        }\n        // reset interfaces & remove keys when SPECIFIC_WAN\n        if (this.settingsCopy.type === 'SPECIFIC_WAN') {\n          // preselect specific interface instead of ALL (id: 0) when SPECIFIC_WAN\n          this.settingsCopy.interfaces = [{ interfaceId: this.settingsCopy.interfaces[0].interfaceId }]\n        } else {\n          if (this.wanSelection === 'ALL') {\n            this.settingsCopy.interfaces = [{ interfaceId: 0 }]\n            return\n          }\n          const interfaces = []\n          this.selectedWansTracker.forEach(wan => {\n            if (wan.selected) {\n              const intf = { interfaceId: wan.id }\n              if (this.settingsCopy.type === 'BALANCE' && this.settingsCopy.balance_algorithm === 'WEIGHTED') {\n                intf.weight = wan.weight || 50\n              }\n              interfaces.push(intf)\n            }\n          })\n          this.settingsCopy.interfaces = interfaces\n        }\n      },\n\n      /**\n       * used for showing a percentage corresponding to each wan weight\n       */\n      computePercent(wanId) {\n        const wan = this.selectedWansTracker.find(wan => wan.id === wanId)\n        if (wan && !wan.selected) return 0\n\n        let totalWeight = 0\n        this.selectedWansTracker.forEach(wan => {\n          if (wan.selected) totalWeight += wan.weight\n        })\n        return ((wan.weight / totalWeight) * 100).toFixed(2)\n      },\n\n      // just ads a new empty criteria entry\n      onAddCriteria() {\n        /**\n         * MFW-2673 - auto generated wan policies when creating an IPsec/wireguard interface\n         * do not have `criteria` field set\n         */\n        if (!this.settingsCopy.criteria) {\n          this.$set(this.settingsCopy, 'criteria', [])\n        }\n        this.settingsCopy.criteria.push({})\n      },\n\n      onRemoveCriteria(index) {\n        this.$delete(this.settingsCopy.criteria, index)\n      },\n\n      /**\n       * validation called from the host app\n       */\n      async validate() {\n        const isValid = await this.$refs.obs.validate()\n        return isValid\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}