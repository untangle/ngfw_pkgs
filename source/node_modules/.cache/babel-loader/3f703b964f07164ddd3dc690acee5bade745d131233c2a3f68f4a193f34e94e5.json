{"ast":null,"code":"import { VCheckbox, VRadio, VRadioGroup } from 'vuetify/lib';\nimport { CONFIG_TYPE } from '../constants';\nimport Ipv6Dhcp from './Ipv6Dhcp.vue';\nimport Ipv6Static from './Ipv6Static.vue';\nimport Ipv6Assign from './Ipv6Assign.vue';\nimport Ipv6Aliases from './Ipv6Aliases.vue';\nexport default {\n  components: {\n    VCheckbox: VCheckbox,\n    VRadio: VRadio,\n    VRadioGroup: VRadioGroup,\n    Ipv6Dhcp: Ipv6Dhcp,\n    Ipv6Static: Ipv6Static,\n    Ipv6Assign: Ipv6Assign,\n    Ipv6Aliases: Ipv6Aliases\n  },\n  inject: ['$intf'],\n  data: function data() {\n    return {\n      CONFIG_TYPE: CONFIG_TYPE\n    };\n  },\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    }\n  },\n  watch: {\n    /**\n     * when switching wan to true/false set `v6ConfigType` to 'DISABLED'\n     * due to dynamic nature of `v6ConfigType` based on wan\n     */\n    'intf.wan': function intfWan() {\n      this.intf.v6ConfigType = CONFIG_TYPE.DISABLED;\n    }\n  }\n};","map":{"version":3,"names":["VCheckbox","VRadio","VRadioGroup","CONFIG_TYPE","Ipv6Dhcp","Ipv6Static","Ipv6Assign","Ipv6Aliases","components","inject","data","computed","intf","_ref","$intf","watch","intfWan","v6ConfigType","DISABLED"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/ipv6/Ipv6.vue"],"sourcesContent":["<template>\n  <div>\n    <v-radio-group v-model=\"intf.v6ConfigType\" row class=\"ma-0\">\n      <v-radio :value=\"CONFIG_TYPE.STATIC\" :label=\"$t('static')\" />\n      <v-radio v-if=\"intf.wan\" :value=\"CONFIG_TYPE.DHCP\" :label=\"$t('dhcp')\" />\n      <v-radio v-if=\"!intf.wan\" :value=\"CONFIG_TYPE.ASSIGN\" :label=\"$t('assign')\" />\n      <v-radio v-if=\"intf.wan\" :value=\"CONFIG_TYPE.SLAAC\" :label=\"$t('slaac')\" />\n      <v-radio :value=\"CONFIG_TYPE.DISABLED\" :label=\"$t('disabled')\" />\n    </v-radio-group>\n\n    <ipv6-dhcp v-if=\"intf.v6ConfigType === CONFIG_TYPE.DHCP\" />\n    <ipv6-static v-if=\"intf.v6ConfigType === CONFIG_TYPE.STATIC\" />\n    <ipv6-assign v-if=\"intf.v6ConfigType === CONFIG_TYPE.ASSIGN\" />\n\n    <div class=\"d-flex\" style=\"gap: 24px\">\n      <v-checkbox\n        v-if=\"intf.v6ConfigType !== CONFIG_TYPE.DISABLED\"\n        v-model=\"intf.routerAdvertisements\"\n        :label=\"$t('send_router_advertisements')\"\n        hide-details\n      />\n      <v-checkbox\n        v-if=\"intf.wan && intf.v6ConfigType !== CONFIG_TYPE.DISABLED\"\n        v-model=\"intf.v6RelayEnabled\"\n        :label=\"$t('dhcp_v6_relay')\"\n        hide-details\n      />\n    </div>\n    <ipv-6-aliases v-if=\"intf.v6ConfigType !== 'DISABLED'\" />\n  </div>\n</template>\n<script>\n  import { VCheckbox, VRadio, VRadioGroup } from 'vuetify/lib'\n  import { CONFIG_TYPE } from '../constants'\n  import Ipv6Dhcp from './Ipv6Dhcp.vue'\n  import Ipv6Static from './Ipv6Static.vue'\n  import Ipv6Assign from './Ipv6Assign.vue'\n  import Ipv6Aliases from './Ipv6Aliases.vue'\n\n  export default {\n    components: {\n      VCheckbox,\n      VRadio,\n      VRadioGroup,\n      Ipv6Dhcp,\n      Ipv6Static,\n      Ipv6Assign,\n      Ipv6Aliases,\n    },\n\n    inject: ['$intf'],\n\n    data() {\n      return {\n        CONFIG_TYPE,\n      }\n    },\n\n    computed: {\n      intf: ({ $intf }) => $intf(),\n    },\n\n    watch: {\n      /**\n       * when switching wan to true/false set `v6ConfigType` to 'DISABLED'\n       * due to dynamic nature of `v6ConfigType` based on wan\n       */\n      'intf.wan'() {\n        this.intf.v6ConfigType = CONFIG_TYPE.DISABLED\n      },\n    },\n  }\n</script>\n"],"mappings":"AAgCA,SAAAA,SAAA,EAAAC,MAAA,EAAAC,WAAA;AACA,SAAAC,WAAA;AACA,OAAAC,QAAA;AACA,OAAAC,UAAA;AACA,OAAAC,UAAA;AACA,OAAAC,WAAA;AAEA;EACAC,UAAA;IACAR,SAAA,EAAAA,SAAA;IACAC,MAAA,EAAAA,MAAA;IACAC,WAAA,EAAAA,WAAA;IACAE,QAAA,EAAAA,QAAA;IACAC,UAAA,EAAAA,UAAA;IACAC,UAAA,EAAAA,UAAA;IACAC,WAAA,EAAAA;EACA;EAEAE,MAAA;EAEAC,IAAA,WAAAA,KAAA;IACA;MACAP,WAAA,EAAAA;IACA;EACA;EAEAQ,QAAA;IACAC,IAAA,WAAAA,KAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MAAA,OAAAA,KAAA;IAAA;EACA;EAEAC,KAAA;IACA;AACA;AACA;AACA;IACA,qBAAAC,QAAA;MACA,KAAAJ,IAAA,CAAAK,YAAA,GAAAd,WAAA,CAAAe,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}