{"ast":null,"code":"import _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport renderer from '../../../plugins/renderer';\nimport columns from '../../../plugins/columns';\nexport default {\n  props: {\n    /**\n     * a data element structure represents the count of a specific field value encounters\n     * { <field_name>: 'some_name', value: <count_value> }\n     */\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    /**\n     * The report configuration\n     */\n    report: {\n      type: Object,\n      \"default\": undefined\n    }\n  },\n  computed: {\n    /**\n     * Returns the columns definition to be shown to the side grid of the pie chart\n     * @param {Object} vm\n     * @param {Object} vm.$i18n - the translation engine\n     * @param {Report} vm.report - the report configuration\n     * @returns {Array<Object>}\n     */\n    columnDefs: function columnDefs(_ref) {\n      var _report$rendering, _report$rendering2;\n      var $i18n = _ref.$i18n,\n        report = _ref.report;\n      /**\n       * report.rendering.column represents the field for which colDef is retrieved via  `buildColumnDefs`\n       * units column def is computed based on the report.rendering.units\n       */\n      var column = (_report$rendering = report.rendering) === null || _report$rendering === void 0 ? void 0 : _report$rendering.column;\n      var units = (_report$rendering2 = report.rendering) === null || _report$rendering2 === void 0 ? void 0 : _report$rendering2.units;\n      return [].concat(_toConsumableArray(columns.buildColumnDefs({\n        all: [column]\n      })), [{\n        headerName: $i18n.t(units),\n        field: 'value',\n        sort: 'desc',\n        cellRenderer: function cellRenderer(_ref2) {\n          var value = _ref2.value;\n          if (units === 'bytes/s') return renderer.bytesSecRenderer(value);\n          if (units === 'bytes') return renderer.bytesRenderer(value);\n          return value;\n        }\n      }]);\n    }\n  },\n  methods: {\n    onRefresh: function onRefresh() {\n      this.$emit('refresh');\n    }\n  }\n};","map":{"version":3,"names":["renderer","columns","props","data","type","Array","default","report","Object","undefined","computed","columnDefs","_ref","_report$rendering","_report$rendering2","$i18n","column","rendering","units","concat","_toConsumableArray","buildColumnDefs","all","headerName","t","field","sort","cellRenderer","_ref2","value","bytesSecRenderer","bytesRenderer","methods","onRefresh","$emit"],"sources":["node_modules/vuntangle/src/shared/Reports/components/ReportChartPieGrid.vue"],"sourcesContent":["<template>\n  <u-grid id=\"pie-grid\" :column-defs=\"columnDefs\" :row-data=\"data\" toolbar=\"hidden\" no-border @refresh=\"onRefresh\" />\n</template>\n<script>\n  import renderer from '../../../plugins/renderer'\n  import columns from '../../../plugins/columns'\n\n  export default {\n    props: {\n      /**\n       * a data element structure represents the count of a specific field value encounters\n       * { <field_name>: 'some_name', value: <count_value> }\n       */\n      data: { type: Array, default: () => [] },\n      /**\n       * The report configuration\n       */\n      report: { type: Object, default: undefined },\n    },\n\n    computed: {\n      /**\n       * Returns the columns definition to be shown to the side grid of the pie chart\n       * @param {Object} vm\n       * @param {Object} vm.$i18n - the translation engine\n       * @param {Report} vm.report - the report configuration\n       * @returns {Array<Object>}\n       */\n      columnDefs: ({ $i18n, report }) => {\n        /**\n         * report.rendering.column represents the field for which colDef is retrieved via  `buildColumnDefs`\n         * units column def is computed based on the report.rendering.units\n         */\n        const column = report.rendering?.column\n        const units = report.rendering?.units\n\n        return [\n          ...columns.buildColumnDefs({ all: [column] }),\n          {\n            headerName: $i18n.t(units),\n            field: 'value',\n            sort: 'desc',\n            cellRenderer: ({ value }) => {\n              if (units === 'bytes/s') return renderer.bytesSecRenderer(value)\n              if (units === 'bytes') return renderer.bytesRenderer(value)\n              return value\n            },\n          },\n        ]\n      },\n    },\n    methods: {\n      onRefresh() {\n        this.$emit('refresh')\n      },\n    },\n  }\n</script>\n"],"mappings":";;AAIA,OAAAA,QAAA;AACA,OAAAC,OAAA;AAEA;EACAC,KAAA;IACA;AACA;AACA;AACA;IACAC,IAAA;MAAAC,IAAA,EAAAC,KAAA;MAAA,oBAAAC,SAAA;QAAA;MAAA;IAAA;IACA;AACA;AACA;IACAC,MAAA;MAAAH,IAAA,EAAAI,MAAA;MAAA,WAAAC;IAAA;EACA;EAEAC,QAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC,UAAA,WAAAA,WAAAC,IAAA;MAAA,IAAAC,iBAAA,EAAAC,kBAAA;MAAA,IAAAC,KAAA,GAAAH,IAAA,CAAAG,KAAA;QAAAR,MAAA,GAAAK,IAAA,CAAAL,MAAA;MACA;AACA;AACA;AACA;MACA,IAAAS,MAAA,IAAAH,iBAAA,GAAAN,MAAA,CAAAU,SAAA,cAAAJ,iBAAA,uBAAAA,iBAAA,CAAAG,MAAA;MACA,IAAAE,KAAA,IAAAJ,kBAAA,GAAAP,MAAA,CAAAU,SAAA,cAAAH,kBAAA,uBAAAA,kBAAA,CAAAI,KAAA;MAEA,UAAAC,MAAA,CAAAC,kBAAA,CACAnB,OAAA,CAAAoB,eAAA;QAAAC,GAAA,GAAAN,MAAA;MAAA,MACA;QACAO,UAAA,EAAAR,KAAA,CAAAS,CAAA,CAAAN,KAAA;QACAO,KAAA;QACAC,IAAA;QACAC,YAAA,WAAAA,aAAAC,KAAA;UAAA,IAAAC,KAAA,GAAAD,KAAA,CAAAC,KAAA;UACA,IAAAX,KAAA,uBAAAlB,QAAA,CAAA8B,gBAAA,CAAAD,KAAA;UACA,IAAAX,KAAA,qBAAAlB,QAAA,CAAA+B,aAAA,CAAAF,KAAA;UACA,OAAAA,KAAA;QACA;MACA;IAEA;EACA;EACAG,OAAA;IACAC,SAAA,WAAAA,UAAA;MACA,KAAAC,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}