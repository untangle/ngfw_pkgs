{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport InternetConnection from '@/Setup_wizard/step/InternetConnection.vue';\nexport default {\n  name: 'NetworkCardsPanel',\n  components: {\n    InternetConnection: InternetConnection\n  },\n  props: {\n    setupRpc: {\n      type: Object,\n      required: true\n    },\n    adminRpc: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      gridData: [],\n      // The data to display in the grid\n      deviceStore: [],\n      // List of available devices for dropdown\n      interfacesForceContinue: false,\n      // Checkbox state\n      autoRefreshEnabled: false,\n      // Auto-refresh flag\n      showInternetConnection: false\n    };\n  },\n  mounted: function mounted() {\n    this.fetchInterfaces();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopAutoRefresh();\n  },\n  methods: {\n    // Fetch initial interface and device data\n    fetchInterfaces: function fetchInterfaces() {\n      var _this = this;\n      console.log('Fetching interfaces...');\n      this.adminRpc.networkManager().getNetworkSettings(function (result, ex) {\n        if (ex) {\n          console.error('Unable to load interfaces:', ex);\n          return;\n        }\n        console.log('Interfaces Result:', result);\n        var interfaces = [];\n        var devices = [];\n        result.interfaces.list.forEach(function (intf) {\n          if (!intf.isVlanInterface) {\n            interfaces.push(intf);\n            devices.push({\n              physicalDev: intf.physicalDev\n            });\n          }\n        });\n        console.log('Filtered Interfaces:', interfaces);\n        console.log('Devices:', devices);\n        _this.adminRpc.networkManager().getDeviceStatus(function (result2, ex2) {\n          if (ex2) {\n            console.error('Error fetching device status:', ex2);\n            return;\n          }\n          var deviceStatusMap = result2.list.reduce(function (map, device) {\n            map[device.deviceName] = device;\n            return map;\n          }, {});\n          interfaces.forEach(function (intf) {\n            Object.assign(intf, deviceStatusMap[intf.physicalDev] || {});\n          });\n          _this.gridData = interfaces.map(function (intf) {\n            return {\n              name: intf.name || 'Unknown',\n              deviceName: intf.physicalDev,\n              connected: intf.connected || 'DISCONNECTED',\n              macAddress: intf.macAddress || 'N/A',\n              duplex: intf.duplex || 'UNKNOWN',\n              vendor: intf.vendor || 'Unknown Vendor',\n              mbit: intf.mbit || 0,\n              physicalDev: intf.physicalDev\n            };\n          });\n          _this.deviceStore = devices;\n          console.log('Device Store:', _this.deviceStore);\n          console.log('Grid Data:', _this.gridData);\n        });\n      });\n    },\n    // Map interfaces when a device is selected or rows are reordered\n    setInterfacesMap: function setInterfacesMap(row) {\n      console.log('Selected Interface:', row);\n    },\n    // Handle row drop event for drag-and-drop\n    onRowDrop: function onRowDrop(draggedRow, droppedRow) {\n      console.log('Row dropped:', draggedRow, droppedRow);\n    },\n    // Get the status text based on connection status\n    statusText: function statusText(row) {\n      var connectedText = row.connected === 'CONNECTED' ? 'Connected' : row.connected === 'DISCONNECTED' ? 'Disconnected' : 'Unknown';\n      return \"\".concat(connectedText, \" \").concat(row.duplex === 'FULL_DUPLEX' ? 'Full Duplex' : row.duplex === 'HALF_DUPLEX' ? 'Half Duplex' : 'Unknown Duplex', \" \").concat(row.mbit || '');\n    },\n    // Get the corresponding status icon\n    statusIcon: function statusIcon(status) {\n      return status === 'CONNECTED' ? 'status-connected' : 'status-disconnected';\n    },\n    // Start auto-refresh to periodically update data\n    startAutoRefresh: function startAutoRefresh() {\n      this.autoRefreshEnabled = true;\n      this.refreshInterfaces();\n    },\n    // Stop auto-refresh\n    stopAutoRefresh: function stopAutoRefresh() {\n      this.autoRefreshEnabled = false;\n    },\n    // Refresh the interface data periodically\n    refreshInterfaces: function refreshInterfaces() {\n      if (!this.autoRefreshEnabled) return;\n      this.fetchInterfaces();\n      setTimeout(this.refreshInterfaces, 3000); // Refresh every 3 seconds\n    },\n    onClickInternetConnection: function onClickInternetConnection() {\n      this.showInternetConnection = true;\n    }\n  }\n};","map":{"version":3,"names":["InternetConnection","name","components","props","setupRpc","type","Object","required","adminRpc","data","gridData","deviceStore","interfacesForceContinue","autoRefreshEnabled","showInternetConnection","mounted","fetchInterfaces","beforeDestroy","stopAutoRefresh","methods","_this","console","log","networkManager","getNetworkSettings","result","ex","error","interfaces","devices","list","forEach","intf","isVlanInterface","push","physicalDev","getDeviceStatus","result2","ex2","deviceStatusMap","reduce","map","device","deviceName","assign","connected","macAddress","duplex","vendor","mbit","setInterfacesMap","row","onRowDrop","draggedRow","droppedRow","statusText","connectedText","concat","statusIcon","status","startAutoRefresh","refreshInterfaces","setTimeout","onClickInternetConnection"],"sources":["src/Setup_wizard/step/Interfaces.vue"],"sourcesContent":["<template>\n  <InternetConnection v-if=\"showInternetConnection\" :setup-rpc=\"setupRpc\" :admin-rpc=\"adminRpc\" />\n  <div v-else class=\"network-cards-panel\">\n    <h1>Network Cards</h1>\n    <p>Identify Network Cards</p>\n\n    <!-- Description -->\n    <div class=\"description\">\n      <p>\n        <strong>Step 1:</strong>\n        <span class=\"step-text\">Plug an active cable into one network card to determine which network card it is.</span\n        ><br />\n        <strong>Step 2:</strong>\n        <span class=\"step-text\">Drag and drop the network card to map it to the desired interface.</span><br />\n        <strong>Step 3:</strong>\n        <span class=\"step-text\">Repeat steps 1 and 2 for each network card and then click <i>Next</i>.</span>\n      </p>\n    </div>\n\n    <!-- Network Cards Table -->\n    <table class=\"network-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Device</th>\n          <th>Status</th>\n          <th>MAC Address</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"row in gridData\" :key=\"row.physicalDev\">\n          <td>{{ row.name }}</td>\n          <td>\n            <select v-model=\"row.deviceName\" @change=\"setInterfacesMap(row)\">\n              <option v-for=\"device in deviceStore\" :key=\"device.physicalDev\" :value=\"device.physicalDev\">\n                {{ device.physicalDev }}\n              </option>\n            </select>\n          </td>\n          <td>\n            <span :class=\"statusIcon(row.connected)\" class=\"status-dot\"></span>\n            {{ statusText(row) }}\n          </td>\n          <td>{{ row.macAddress }}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Internet Connection Button -->\n    <div class=\"button-container\">\n      <button class=\"internet-button\" @click=\"onClickInternetConnection\">\n        Internet Connection <span class=\"arrow\">â†’</span>\n      </button>\n    </div>\n\n    <!-- Warning Message -->\n    <div v-if=\"gridData.length < 2\" class=\"inline-warning\">\n      <span class=\"warning-icon\"></span>\n      <div>\n        <p>\n          Untangle must be installed \"in-line\" as a gateway. This usually requires at least 2 network cards (NICs), and\n          fewer than 2 NICs were detected.\n        </p>\n        <label>\n          <input v-model=\"interfacesForceContinue\" type=\"checkbox\" />\n          <strong>Continue anyway</strong>\n        </label>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import InternetConnection from '@/Setup_wizard/step/InternetConnection.vue'\n\n  export default {\n    name: 'NetworkCardsPanel',\n    components: {\n      InternetConnection,\n    },\n    props: {\n      setupRpc: {\n        type: Object,\n        required: true,\n      },\n      adminRpc: {\n        type: Object,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        gridData: [], // The data to display in the grid\n        deviceStore: [], // List of available devices for dropdown\n        interfacesForceContinue: false, // Checkbox state\n        autoRefreshEnabled: false, // Auto-refresh flag\n        showInternetConnection: false,\n      }\n    },\n    mounted() {\n      this.fetchInterfaces()\n    },\n    beforeDestroy() {\n      this.stopAutoRefresh()\n    },\n    methods: {\n      // Fetch initial interface and device data\n      fetchInterfaces() {\n        console.log('Fetching interfaces...')\n\n        this.adminRpc.networkManager().getNetworkSettings((result, ex) => {\n          if (ex) {\n            console.error('Unable to load interfaces:', ex)\n            return\n          }\n\n          console.log('Interfaces Result:', result)\n\n          const interfaces = []\n          const devices = []\n\n          result.interfaces.list.forEach(intf => {\n            if (!intf.isVlanInterface) {\n              interfaces.push(intf)\n              devices.push({ physicalDev: intf.physicalDev })\n            }\n          })\n\n          console.log('Filtered Interfaces:', interfaces)\n          console.log('Devices:', devices)\n\n          this.adminRpc.networkManager().getDeviceStatus((result2, ex2) => {\n            if (ex2) {\n              console.error('Error fetching device status:', ex2)\n              return\n            }\n\n            const deviceStatusMap = result2.list.reduce((map, device) => {\n              map[device.deviceName] = device\n              return map\n            }, {})\n\n            interfaces.forEach(intf => {\n              Object.assign(intf, deviceStatusMap[intf.physicalDev] || {})\n            })\n\n            this.gridData = interfaces.map(intf => ({\n              name: intf.name || 'Unknown',\n              deviceName: intf.physicalDev,\n              connected: intf.connected || 'DISCONNECTED',\n              macAddress: intf.macAddress || 'N/A',\n              duplex: intf.duplex || 'UNKNOWN',\n              vendor: intf.vendor || 'Unknown Vendor',\n              mbit: intf.mbit || 0,\n              physicalDev: intf.physicalDev,\n            }))\n\n            this.deviceStore = devices\n            console.log('Device Store:', this.deviceStore)\n            console.log('Grid Data:', this.gridData)\n          })\n        })\n      },\n\n      // Map interfaces when a device is selected or rows are reordered\n      setInterfacesMap(row) {\n        console.log('Selected Interface:', row)\n      },\n\n      // Handle row drop event for drag-and-drop\n      onRowDrop(draggedRow, droppedRow) {\n        console.log('Row dropped:', draggedRow, droppedRow)\n      },\n\n      // Get the status text based on connection status\n      statusText(row) {\n        const connectedText =\n          row.connected === 'CONNECTED' ? 'Connected' : row.connected === 'DISCONNECTED' ? 'Disconnected' : 'Unknown'\n        return `${connectedText} ${\n          row.duplex === 'FULL_DUPLEX' ? 'Full Duplex' : row.duplex === 'HALF_DUPLEX' ? 'Half Duplex' : 'Unknown Duplex'\n        } ${row.mbit || ''}`\n      },\n\n      // Get the corresponding status icon\n      statusIcon(status) {\n        return status === 'CONNECTED' ? 'status-connected' : 'status-disconnected'\n      },\n\n      // Start auto-refresh to periodically update data\n      startAutoRefresh() {\n        this.autoRefreshEnabled = true\n        this.refreshInterfaces()\n      },\n\n      // Stop auto-refresh\n      stopAutoRefresh() {\n        this.autoRefreshEnabled = false\n      },\n\n      // Refresh the interface data periodically\n      refreshInterfaces() {\n        if (!this.autoRefreshEnabled) return\n        this.fetchInterfaces()\n        setTimeout(this.refreshInterfaces, 3000) // Refresh every 3 seconds\n      },\n\n      onClickInternetConnection() {\n        this.showInternetConnection = true\n      },\n    },\n  }\n</script>\n\n<style scoped>\n  .network-cards-panel {\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n  }\n  .description {\n    margin-bottom: 20px;\n    text-align: left;\n  }\n  .step-text {\n    margin-left: 20px;\n    display: inline-block;\n  }\n  .button-container {\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 20px;\n    margin-bottom: 20px;\n  }\n  .internet-button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 10px 15px;\n    font-size: 16px;\n    cursor: pointer;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n  }\n  .internet-button .arrow {\n    margin-left: 8px;\n    font-size: 18px;\n  }\n  .internet-button:hover {\n    background-color: #0056b3;\n  }\n  .network-table {\n    border-collapse: collapse;\n    width: 100%;\n    margin-top: 20px;\n  }\n  .network-table th,\n  .network-table td {\n    border: 1px solid #ddd;\n    text-align: left;\n    padding: 8px;\n  }\n  .network-table th {\n    background-color: #f4f4f4;\n  }\n  .network-table tr:nth-child(even) {\n    background-color: #f9f9f9;\n  }\n  .inline-warning {\n    display: flex;\n    align-items: flex-start;\n    margin-top: 10px;\n  }\n  .status-dot {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    margin-right: 8px;\n  }\n  .status-connected {\n    background-color: green;\n  }\n  .status-disconnected {\n    background-color: gray;\n  }\n  .warning-icon {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    background-color: orange;\n    border-radius: 50%;\n    margin-right: 8px;\n  }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}