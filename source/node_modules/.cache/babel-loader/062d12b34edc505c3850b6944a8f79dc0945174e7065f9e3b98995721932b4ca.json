{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport AutoUpgrades from '@/Setup_wizard/step/AutoUpgrades.vue';\nimport Util from '@/util/setupUtils'; // Adjust the import path based on your project structure\n\nexport default {\n  name: 'InternalNetwork',\n  components: {\n    AutoUpgrades: AutoUpgrades\n  },\n  props: {\n    adminRpc: {\n      type: Object,\n      required: true\n    },\n    setupRpc: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      title: 'Internal Network',\n      description: 'Configure the Internal Network Interface',\n      internal: null,\n      showAutoUpgrades: false,\n      v4NetmaskList: Util.v4NetmaskList,\n      // Use the imported netmask list\n      initialConfig: {}\n    };\n  },\n  mounted: function mounted() {\n    this.getInterface();\n  },\n  methods: {\n    getInterface: function getInterface() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _result$interfaces, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _this.adminRpc.networkManager().getNetworkSettings();\n            case 3:\n              result = _context.sent;\n              console.log('Network Settings Response:', result);\n              if (!(!(result !== null && result !== void 0 && (_result$interfaces = result.interfaces) !== null && _result$interfaces !== void 0 && _result$interfaces.list) || result.interfaces.list.length === 0)) {\n                _context.next = 9;\n                break;\n              }\n              alert('No network interfaces found. Please check your network configuration.');\n              _this.internal = null;\n              return _context.abrupt(\"return\");\n            case 9:\n              _this.internal = result.interfaces.list.find(function (intf) {\n                return !intf.isWan;\n              });\n              if (!_this.internal) {\n                if (confirm('No internal interfaces found. Do you want to continue the setup?')) {\n                  _this.$emit('nextStep');\n                }\n              } else {\n                _this.internal.configType = 'ROUTER'; // Default to Router\n                _this.initialConfig = _objectSpread({}, _this.internal);\n              }\n              console.log('Internal Interface:', _this.internal);\n              _context.next = 18;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching network settings:', _context.t0);\n              alert('Failed to fetch network settings. Please try again later.');\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 14]]);\n      }))();\n    },\n    setConfigType: function setConfigType(type) {\n      if (type === 'BRIDGED') {\n        this.internal.configType = 'BRIDGED';\n      } else {\n        this.internal.configType = 'ROUTER';\n        this.internal.v4configType = 'STATIC';\n      }\n    },\n    onSave: function onSave() {\n      if (!this.internal || !this.internal.configType) {\n        alert('Invalid configuration. Please check your inputs.');\n        return;\n      }\n      console.log('this.adminRpc.networkManager()', this.adminRpc.networkManager());\n      this.showAutoUpgrades = true;\n      // try {\n      //   await this.adminRpc.networkManager().setNetworkSettings(this.internal)\n      //   alert('Settings saved successfully.')\n      //   this.$emit('nextStep')\n      // } catch (error) {\n      //   console.error('Error saving settings:', error)\n      //   alert('Failed to save settings. Please try again later.')\n      // }\n    }\n  }\n};","map":{"version":3,"names":["AutoUpgrades","Util","name","components","props","adminRpc","type","Object","required","setupRpc","data","title","description","internal","showAutoUpgrades","v4NetmaskList","initialConfig","mounted","getInterface","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_result$interfaces","result","wrap","_callee$","_context","prev","next","networkManager","getNetworkSettings","sent","console","log","interfaces","list","length","alert","abrupt","find","intf","isWan","confirm","$emit","configType","_objectSpread","t0","error","stop","setConfigType","v4configType","onSave"],"sources":["src/Setup_wizard/step/ConfigureInternalNetwork.vue"],"sourcesContent":["<template>\n  <AutoUpgrades v-if=\"showAutoUpgrades\" :setup-rpc=\"setupRpc\" :admin-rpc=\"adminRpc\" />\n  <div v-else class=\"internal-network\">\n    <h1>{{ title }}</h1>\n    <p>{{ description }}</p>\n\n    <div v-if=\"internal\" class=\"form-container\">\n      <!-- Router Section -->\n      <div class=\"router-section\">\n        <div class=\"radio-group\">\n          <input\n            id=\"router\"\n            v-model=\"internal.configType\"\n            type=\"radio\"\n            name=\"configType\"\n            value=\"ROUTER\"\n            checked\n            @change=\"setConfigType('ROUTER')\"\n          />\n          <label for=\"router\"\n            ><strong>{{ $t('Router') }}</strong></label\n          >\n        </div>\n        <p class=\"info-text\">\n          {{\n            $t(\n              'This is recommended if the external port is plugged into the internet connection. This enables NAT and DHCP.',\n            )\n          }}\n        </p>\n        <img src=\"/skins/simple-gray/images/admin/wizard/router.png\" alt=\"Router\" class=\"config-image\" />\n\n        <div class=\"form-field\">\n          <label>{{ $t('Internal Address') }}</label>\n          <input v-model=\"internal.v4StaticAddress\" type=\"text\" :disabled=\"internal.configType !== 'ROUTER'\" />\n        </div>\n\n        <div class=\"form-field\">\n          <label>{{ $t('Internal Netmask') }}</label>\n          <select v-model=\"internal.v4StaticPrefix\" :disabled=\"internal.configType !== 'ROUTER'\">\n            <option v-for=\"[prefix, label] in v4NetmaskList\" :key=\"prefix\" :value=\"prefix\">\n              {{ label }}\n            </option>\n          </select>\n        </div>\n\n        <div class=\"form-field\">\n          <label>{{ $t('DHCP Server') }}</label>\n          <div class=\"radio-group\">\n            <label>\n              {{ $t('Enabled') }}\n              <input\n                v-model=\"internal.dhcpType\"\n                type=\"radio\"\n                name=\"dhcpType\"\n                value=\"SERVER\"\n                :disabled=\"internal.configType !== 'ROUTER'\"\n              />\n            </label>\n            <label>\n              {{ $t('Disabled') }}\n              <input\n                v-model=\"internal.dhcpType\"\n                type=\"radio\"\n                name=\"dhcpType\"\n                value=\"DISABLED\"\n                :disabled=\"internal.configType !== 'ROUTER'\"\n              />\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <!-- Transparent Bridge Section -->\n      <div class=\"bridge-section\">\n        <div class=\"radio-group\">\n          <input\n            id=\"bridge\"\n            v-model=\"internal.configType\"\n            type=\"radio\"\n            name=\"configType\"\n            value=\"BRIDGED\"\n            @change=\"setConfigType('BRIDGED')\"\n          />\n          <label for=\"bridge\"\n            ><strong>{{ $t('Transparent Bridge') }}</strong></label\n          >\n        </div>\n        <p class=\"info-text\">\n          {{\n            $t(\n              'This is recommended if the external port is plugged into a firewall/router. This bridges Internal and External and disables DHCP.',\n            )\n          }}\n        </p>\n        <img src=\"/skins/simple-gray/images/admin/wizard/bridge.png\" alt=\"Bridge\" class=\"config-image\" />\n      </div>\n\n      <!-- Save Button -->\n      <button class=\"save-button\" @click=\"onSave\">{{ $t('Save') }}</button>\n    </div>\n  </div>\n</template>\n\n<script>\n  import AutoUpgrades from '@/Setup_wizard/step/AutoUpgrades.vue'\n  import Util from '@/util/setupUtils' // Adjust the import path based on your project structure\n\n  export default {\n    name: 'InternalNetwork',\n    components: {\n      AutoUpgrades,\n    },\n    props: {\n      adminRpc: {\n        type: Object,\n        required: true,\n      },\n      setupRpc: {\n        type: Object,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        title: 'Internal Network',\n        description: 'Configure the Internal Network Interface',\n        internal: null,\n        showAutoUpgrades: false,\n        v4NetmaskList: Util.v4NetmaskList, // Use the imported netmask list\n        initialConfig: {},\n      }\n    },\n    mounted() {\n      this.getInterface()\n    },\n    methods: {\n      async getInterface() {\n        try {\n          const result = await this.adminRpc.networkManager().getNetworkSettings()\n          console.log('Network Settings Response:', result)\n\n          if (!result?.interfaces?.list || result.interfaces.list.length === 0) {\n            alert('No network interfaces found. Please check your network configuration.')\n            this.internal = null\n            return\n          }\n\n          this.internal = result.interfaces.list.find(intf => !intf.isWan)\n\n          if (!this.internal) {\n            if (confirm('No internal interfaces found. Do you want to continue the setup?')) {\n              this.$emit('nextStep')\n            }\n          } else {\n            this.internal.configType = 'ROUTER' // Default to Router\n            this.initialConfig = { ...this.internal }\n          }\n\n          console.log('Internal Interface:', this.internal)\n        } catch (error) {\n          console.error('Error fetching network settings:', error)\n          alert('Failed to fetch network settings. Please try again later.')\n        }\n      },\n\n      setConfigType(type) {\n        if (type === 'BRIDGED') {\n          this.internal.configType = 'BRIDGED'\n        } else {\n          this.internal.configType = 'ROUTER'\n          this.internal.v4configType = 'STATIC'\n        }\n      },\n      onSave() {\n        if (!this.internal || !this.internal.configType) {\n          alert('Invalid configuration. Please check your inputs.')\n          return\n        }\n        console.log('this.adminRpc.networkManager()', this.adminRpc.networkManager())\n        this.showAutoUpgrades = true\n        // try {\n        //   await this.adminRpc.networkManager().setNetworkSettings(this.internal)\n        //   alert('Settings saved successfully.')\n        //   this.$emit('nextStep')\n        // } catch (error) {\n        //   console.error('Error saving settings:', error)\n        //   alert('Failed to save settings. Please try again later.')\n        // }\n      },\n    },\n  }\n</script>\n\n<style scoped>\n  .internal-network {\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n    font-family: Arial, sans-serif;\n  }\n  .router-section,\n  .bridge-section {\n    margin-bottom: 20px;\n    text-align: left;\n  }\n  .radio-group {\n    margin-bottom: 10px;\n  }\n  .info-text {\n    margin: 10px 0;\n    font-size: 14px;\n    color: #555;\n  }\n  .form-field {\n    margin: 10px 0;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n  .form-field label {\n    font-weight: bold;\n    flex: 0 0 150px;\n  }\n  .form-field input,\n  .form-field select {\n    flex: 1;\n    padding: 5px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n  }\n  .config-image {\n    margin-top: 10px;\n    max-width: 200px;\n    height: auto;\n  }\n  .save-button {\n    display: block;\n    margin: 20px auto;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 16px;\n  }\n  .save-button:hover {\n    background-color: #0056b3;\n  }\n</style>\n"],"mappings":";;;;;;;AAyGA,OAAAA,YAAA;AACA,OAAAC,IAAA;;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,YAAA,EAAAA;EACA;EACAI,KAAA;IACAC,QAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAE,IAAA,WAAAA,KAAA;IACA;MACAC,KAAA;MACAC,WAAA;MACAC,QAAA;MACAC,gBAAA;MACAC,aAAA,EAAAd,IAAA,CAAAc,aAAA;MAAA;MACAC,aAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,YAAA;EACA;EACAC,OAAA;IACAD,YAAA,WAAAA,aAAA;MAAA,IAAAE,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,kBAAA,EAAAC,MAAA;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEAX,KAAA,CAAAf,QAAA,CAAA2B,cAAA,GAAAC,kBAAA;YAAA;cAAAP,MAAA,GAAAG,QAAA,CAAAK,IAAA;cACAC,OAAA,CAAAC,GAAA,+BAAAV,MAAA;cAAA,MAEA,EAAAA,MAAA,aAAAA,MAAA,gBAAAD,kBAAA,GAAAC,MAAA,CAAAW,UAAA,cAAAZ,kBAAA,eAAAA,kBAAA,CAAAa,IAAA,KAAAZ,MAAA,CAAAW,UAAA,CAAAC,IAAA,CAAAC,MAAA;gBAAAV,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACAS,KAAA;cACApB,KAAA,CAAAP,QAAA;cAAA,OAAAgB,QAAA,CAAAY,MAAA;YAAA;cAIArB,KAAA,CAAAP,QAAA,GAAAa,MAAA,CAAAW,UAAA,CAAAC,IAAA,CAAAI,IAAA,WAAAC,IAAA;gBAAA,QAAAA,IAAA,CAAAC,KAAA;cAAA;cAEA,KAAAxB,KAAA,CAAAP,QAAA;gBACA,IAAAgC,OAAA;kBACAzB,KAAA,CAAA0B,KAAA;gBACA;cACA;gBACA1B,KAAA,CAAAP,QAAA,CAAAkC,UAAA;gBACA3B,KAAA,CAAAJ,aAAA,GAAAgC,aAAA,KAAA5B,KAAA,CAAAP,QAAA;cACA;cAEAsB,OAAA,CAAAC,GAAA,wBAAAhB,KAAA,CAAAP,QAAA;cAAAgB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAoB,EAAA,GAAApB,QAAA;cAEAM,OAAA,CAAAe,KAAA,qCAAArB,QAAA,CAAAoB,EAAA;cACAT,KAAA;YAAA;YAAA;cAAA,OAAAX,QAAA,CAAAsB,IAAA;UAAA;QAAA,GAAA3B,OAAA;MAAA;IAEA;IAEA4B,aAAA,WAAAA,cAAA9C,IAAA;MACA,IAAAA,IAAA;QACA,KAAAO,QAAA,CAAAkC,UAAA;MACA;QACA,KAAAlC,QAAA,CAAAkC,UAAA;QACA,KAAAlC,QAAA,CAAAwC,YAAA;MACA;IACA;IACAC,MAAA,WAAAA,OAAA;MACA,UAAAzC,QAAA,UAAAA,QAAA,CAAAkC,UAAA;QACAP,KAAA;QACA;MACA;MACAL,OAAA,CAAAC,GAAA,wCAAA/B,QAAA,CAAA2B,cAAA;MACA,KAAAlB,gBAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}