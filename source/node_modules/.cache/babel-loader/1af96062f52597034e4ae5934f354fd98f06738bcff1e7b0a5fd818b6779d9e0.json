{"ast":null,"code":"import _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport renderer from '../../../plugins/renderer';\nimport reports from '../../../plugins/reports';\nimport { Report } from '../configs/constants';\nimport UChartMap from '../../../components/UChartMap';\nimport viewsMixin from './viewsMixin';\nexport default {\n  components: {\n    UChartMap: UChartMap\n  },\n  mixins: [viewsMixin],\n  inject: ['$timeRange'],\n  data: function data() {\n    return {\n      fetching: false,\n      outboundBlockedCountries: [],\n      inboundBlockedCountries: []\n    };\n  },\n  computed: {\n    /**\n     * Returns the timerange from injected $timeRange\n     * @param {Object} vm\n     * @param {Object} vm.$timeRange - the timerange period\n     * @returns {Object}\n     */\n    timeRange: function timeRange(_ref) {\n      var $timeRange = _ref.$timeRange;\n      return $timeRange();\n    },\n    /**\n     * Returns the column defs for the Outbound Blocked Sessions grid\n     * @returns {Array}\n     */\n    outboundColumnDefs: function outboundColumnDefs() {\n      return [{\n        headerName: this.$vuntangle.$t('country'),\n        field: 'server_country',\n        flex: 1,\n        valueGetter: function valueGetter(_ref2) {\n          var data = _ref2.data;\n          return renderer.country(data.server_country);\n        }\n      }, {\n        headerName: this.$vuntangle.$t('count'),\n        field: 'value',\n        sort: 'desc'\n      }];\n    },\n    /**\n     * Returns the column defs for the Inbound Blocked Sessions grid\n     * @returns {Array}\n     */\n    inboundColumnDefs: function inboundColumnDefs() {\n      return [{\n        headerName: this.$vuntangle.$t('country'),\n        field: 'client_country',\n        flex: 1,\n        valueGetter: function valueGetter(_ref3) {\n          var data = _ref3.data;\n          return renderer.country(data.client_country);\n        }\n      }, {\n        headerName: this.$vuntangle.$t('count'),\n        field: 'value',\n        sort: 'desc'\n      }];\n    },\n    /**\n     * We have to process the data before passing it to the mapOptions\n     * @param outboundBlockedCountries - input data e.g. [{ \"server_country\": \"RO\", \"value\": 84 }]\n     * @returns {Array} - output data e.g. [[ \"ro\", 84 ]]\n     */\n    outboundData: function outboundData(_ref4) {\n      var outboundBlockedCountries = _ref4.outboundBlockedCountries;\n      return outboundBlockedCountries === null || outboundBlockedCountries === void 0 ? void 0 : outboundBlockedCountries.map(function (country) {\n        var _country$server_count;\n        return [country === null || country === void 0 || (_country$server_count = country.server_country) === null || _country$server_count === void 0 ? void 0 : _country$server_count.toLowerCase(), country === null || country === void 0 ? void 0 : country.value];\n      });\n    },\n    inboundData: function inboundData(_ref5) {\n      var inboundBlockedCountries = _ref5.inboundBlockedCountries;\n      return inboundBlockedCountries === null || inboundBlockedCountries === void 0 ? void 0 : inboundBlockedCountries.map(function (country) {\n        var _country$client_count;\n        return [country === null || country === void 0 || (_country$client_count = country.client_country) === null || _country$client_count === void 0 ? void 0 : _country$client_count.toLowerCase(), country === null || country === void 0 ? void 0 : country.value];\n      });\n    },\n    /**\n     * Returns the series used in UChartMap for plotting the map chart\n     * @returns {Array}\n     */\n    series: function series() {\n      return [{\n        name: '',\n        allAreas: true,\n        color: this.$vuntangle.theme === 'dark' ? '#1E1E1E' : '#FFFFFF'\n      }, {\n        name: this.$vuntangle.$t('blocked_countries_outbound'),\n        color: '#434348',\n        states: {\n          hover: {\n            color: '#146095'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        allAreas: false,\n        data: this.outboundData\n      }, {\n        name: this.$vuntangle.$t('blocked_countries_inbound'),\n        color: '#7cb5ec',\n        states: {\n          hover: {\n            color: '#146095'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        allAreas: false,\n        data: this.inboundData\n      }];\n    }\n  },\n  mounted: function mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n      var now = Date.now();\n\n      // compute start/end timestamps based on timezone offset\n      var start = now + this.timeRange.period[0] * 60 * 60 * 1000;\n      var end = now + this.timeRange.period[1] * 60 * 60 * 1000;\n      var conditions = [{\n        column: 'time_stamp',\n        operator: 'GT',\n        value: start\n      }, {\n        column: 'time_stamp',\n        operator: 'LT',\n        value: end\n      }];\n\n      // attach also any custom conditions if passed\n      if (this.customConditions) conditions = [].concat(_toConsumableArray(conditions), _toConsumableArray(this.customConditions));\n      this.fetching = true;\n      var outboundRep = reports[Report.GeoipOutboundCountriesByBlockCount];\n      var inboundRep = reports[Report.GeoipInboundCountriesByBlockCount];\n      this.$emit('fetch-data', {\n        query: _objectSpread(_objectSpread({}, outboundRep.query), {}, {\n          userConditions: conditions\n        }),\n        resolve: function resolve(data) {\n          _this.fetching = false;\n          _this.outboundBlockedCountries = data;\n        }\n      });\n      this.$emit('fetch-data', {\n        query: _objectSpread(_objectSpread({}, inboundRep.query), {}, {\n          userConditions: conditions\n        }),\n        resolve: function resolve(data) {\n          _this.fetching = false;\n          _this.inboundBlockedCountries = data;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["renderer","reports","Report","UChartMap","viewsMixin","components","mixins","inject","data","fetching","outboundBlockedCountries","inboundBlockedCountries","computed","timeRange","_ref","$timeRange","outboundColumnDefs","headerName","$vuntangle","$t","field","flex","valueGetter","_ref2","country","server_country","sort","inboundColumnDefs","_ref3","client_country","outboundData","_ref4","map","_country$server_count","toLowerCase","value","inboundData","_ref5","_country$client_count","series","name","allAreas","color","theme","states","hover","dataLabels","enabled","mounted","fetchData","methods","_this","now","Date","start","period","end","conditions","column","operator","customConditions","concat","_toConsumableArray","outboundRep","GeoipOutboundCountriesByBlockCount","inboundRep","GeoipInboundCountriesByBlockCount","$emit","query","_objectSpread","userConditions","resolve"],"sources":["node_modules/vuntangle/src/shared/Reports/views/GeoipDistributionMap.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex flex-column flex-grow-1\" style=\"gap: 12px\">\n    <v-card outlined class=\"d-flex flex-column flex-grow-1\">\n      <v-card-title :class=\"`px-2 py-0 subtitle-1 ${$vuntangle.theme === 'dark' ? '' : 'primary--text'}`\">\n        <span class=\"py-2 font-weight-medium\">{{ $vuntangle.$t('distribution_map') }}</span>\n        <v-spacer />\n        <v-btn icon @click=\"fetchData\"><v-icon>mdi-refresh</v-icon></v-btn>\n      </v-card-title>\n      <v-divider horizontal />\n      <u-chart-map class=\"map\" :series=\"series\" :fetching=\"fetching\" />\n    </v-card>\n    <div class=\"d-flex flex-row flex-grow-1\" style=\"gap: 12px\">\n      <v-card outlined class=\"d-flex flex-column flex-grow-1\">\n        <v-card-title :class=\"`px-2 py-0 subtitle-1 ${$vuntangle.theme === 'dark' ? '' : 'primary--text'}`\">\n          <span class=\"py-2 px-0 font-weight-medium\">{{ $vuntangle.$t('blocked_sessions_outbound') }}</span>\n        </v-card-title>\n        <v-divider horizontal />\n        <u-grid\n          id=\"reports-grid\"\n          :column-defs=\"outboundColumnDefs\"\n          :row-data=\"outboundBlockedCountries\"\n          :fetching=\"fetching\"\n          :enable-refresh=\"false\"\n          no-border\n          v-on=\"$listeners\"\n        />\n      </v-card>\n      <v-card outlined class=\"d-flex flex-column flex-grow-1\">\n        <v-card-title :class=\"`px-2 py-0 subtitle-1 ${$vuntangle.theme === 'dark' ? '' : 'primary--text'}`\">\n          <span class=\"py-2 font-weight-medium\">{{ $vuntangle.$t('blocked_sessions_inbound') }}</span>\n        </v-card-title>\n        <v-divider horizontal />\n        <u-grid\n          id=\"reports-grid\"\n          :column-defs=\"inboundColumnDefs\"\n          :row-data=\"inboundBlockedCountries\"\n          :fetching=\"fetching\"\n          :enable-refresh=\"false\"\n          no-border\n          v-on=\"$listeners\"\n        />\n      </v-card>\n    </div>\n  </div>\n</template>\n<script>\n  import renderer from '../../../plugins/renderer'\n  import reports from '../../../plugins/reports'\n  import { Report } from '../configs/constants'\n  import UChartMap from '../../../components/UChartMap'\n  import viewsMixin from './viewsMixin'\n\n  export default {\n    components: { UChartMap },\n    mixins: [viewsMixin],\n    inject: ['$timeRange'],\n\n    data() {\n      return {\n        fetching: false,\n        outboundBlockedCountries: [],\n        inboundBlockedCountries: [],\n      }\n    },\n\n    computed: {\n      /**\n       * Returns the timerange from injected $timeRange\n       * @param {Object} vm\n       * @param {Object} vm.$timeRange - the timerange period\n       * @returns {Object}\n       */\n      timeRange: ({ $timeRange }) => $timeRange(),\n\n      /**\n       * Returns the column defs for the Outbound Blocked Sessions grid\n       * @returns {Array}\n       */\n      outboundColumnDefs() {\n        return [\n          {\n            headerName: this.$vuntangle.$t('country'),\n            field: 'server_country',\n            flex: 1,\n            valueGetter: ({ data }) => renderer.country(data.server_country),\n          },\n          {\n            headerName: this.$vuntangle.$t('count'),\n            field: 'value',\n            sort: 'desc',\n          },\n        ]\n      },\n\n      /**\n       * Returns the column defs for the Inbound Blocked Sessions grid\n       * @returns {Array}\n       */\n      inboundColumnDefs() {\n        return [\n          {\n            headerName: this.$vuntangle.$t('country'),\n            field: 'client_country',\n            flex: 1,\n            valueGetter: ({ data }) => renderer.country(data.client_country),\n          },\n          {\n            headerName: this.$vuntangle.$t('count'),\n            field: 'value',\n            sort: 'desc',\n          },\n        ]\n      },\n\n      /**\n       * We have to process the data before passing it to the mapOptions\n       * @param outboundBlockedCountries - input data e.g. [{ \"server_country\": \"RO\", \"value\": 84 }]\n       * @returns {Array} - output data e.g. [[ \"ro\", 84 ]]\n       */\n      outboundData: ({ outboundBlockedCountries }) =>\n        outboundBlockedCountries?.map(country => [country?.server_country?.toLowerCase(), country?.value]),\n      inboundData: ({ inboundBlockedCountries }) =>\n        inboundBlockedCountries?.map(country => [country?.client_country?.toLowerCase(), country?.value]),\n\n      /**\n       * Returns the series used in UChartMap for plotting the map chart\n       * @returns {Array}\n       */\n      series() {\n        return [\n          {\n            name: '',\n            allAreas: true,\n            color: this.$vuntangle.theme === 'dark' ? '#1E1E1E' : '#FFFFFF',\n          },\n          {\n            name: this.$vuntangle.$t('blocked_countries_outbound'),\n            color: '#434348',\n            states: {\n              hover: {\n                color: '#146095',\n              },\n            },\n            dataLabels: {\n              enabled: false,\n            },\n            allAreas: false,\n            data: this.outboundData,\n          },\n          {\n            name: this.$vuntangle.$t('blocked_countries_inbound'),\n            color: '#7cb5ec',\n            states: {\n              hover: {\n                color: '#146095',\n              },\n            },\n            dataLabels: {\n              enabled: false,\n            },\n            allAreas: false,\n            data: this.inboundData,\n          },\n        ]\n      },\n    },\n\n    mounted() {\n      this.fetchData()\n    },\n\n    methods: {\n      fetchData() {\n        const now = Date.now()\n\n        // compute start/end timestamps based on timezone offset\n        const start = now + this.timeRange.period[0] * 60 * 60 * 1000\n\n        const end = now + this.timeRange.period[1] * 60 * 60 * 1000\n\n        let conditions = [\n          {\n            column: 'time_stamp',\n            operator: 'GT',\n            value: start,\n          },\n          {\n            column: 'time_stamp',\n            operator: 'LT',\n            value: end,\n          },\n        ]\n\n        // attach also any custom conditions if passed\n        if (this.customConditions) conditions = [...conditions, ...this.customConditions]\n\n        this.fetching = true\n        const outboundRep = reports[Report.GeoipOutboundCountriesByBlockCount]\n        const inboundRep = reports[Report.GeoipInboundCountriesByBlockCount]\n\n        this.$emit('fetch-data', {\n          query: { ...outboundRep.query, userConditions: conditions },\n          resolve: data => {\n            this.fetching = false\n            this.outboundBlockedCountries = data\n          },\n        })\n        this.$emit('fetch-data', {\n          query: { ...inboundRep.query, userConditions: conditions },\n          resolve: data => {\n            this.fetching = false\n            this.inboundBlockedCountries = data\n          },\n        })\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}