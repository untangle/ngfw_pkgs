{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { VContainer, VRow, VCol } from 'vuetify/lib';\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\nimport cloneDeep from 'lodash/cloneDeep';\nimport Ipv4PrefixAutocomplete from '../../../components/Ipv4PrefixAutocomplete';\nexport default {\n  components: {\n    VContainer: VContainer,\n    VRow: VRow,\n    VCol: VCol,\n    ValidationObserver: ValidationObserver,\n    ValidationProvider: ValidationProvider,\n    Ipv4PrefixAutocomplete: Ipv4PrefixAutocomplete\n  },\n  props: {\n    settings: {\n      type: Object,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: false,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      ipAddress: '',\n      netmask: 32,\n      description: ''\n    };\n  },\n  computed: {\n    passList: function passList() {\n      return this.settings.passList;\n    },\n    existingHost: function existingHost() {\n      if (this.index !== null && this.passList[this.index]) {\n        return this.passList[this.index];\n      }\n      return null;\n    }\n  },\n  created: function created() {\n    // set host if editing\n    if (this.existingHost) {\n      // split host into ip/netmask\n      var _this$existingHost$ho = this.existingHost.host.split('/'),\n        _this$existingHost$ho2 = _slicedToArray(_this$existingHost$ho, 2),\n        ipAddress = _this$existingHost$ho2[0],\n        netmask = _this$existingHost$ho2[1];\n      this.ipAddress = ipAddress;\n      this.netmask = parseInt(netmask);\n      this.description = this.existingHost.description;\n    }\n  },\n  methods: {\n    action: function action() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var isValid, settings, host;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.$refs.obs.validate();\n            case 2:\n              isValid = _context.sent;\n              if (isValid) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              // copy threat prevention (all data must be sent) from store and add/update the host\n              settings = cloneDeep(_this.settings);\n              host = {\n                description: _this.description,\n                host: \"\".concat(_this.ipAddress.trim(), \"/\").concat(_this.netmask)\n              };\n              if (_this.existingHost) {\n                settings.passList[_this.index] = host;\n              } else {\n                settings.passList.push(host);\n              }\n              _this.$set(_this.settings, 'passList', settings.passList);\n              _this.$emit('close');\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["VContainer","VRow","VCol","ValidationObserver","ValidationProvider","cloneDeep","Ipv4PrefixAutocomplete","components","props","settings","type","Object","required","index","Number","data","ipAddress","netmask","description","computed","passList","existingHost","created","_this$existingHost$ho","host","split","_this$existingHost$ho2","_slicedToArray","parseInt","methods","action","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isValid","wrap","_callee$","_context","prev","next","$refs","obs","validate","sent","abrupt","concat","trim","push","$set","$emit","stop"],"sources":["node_modules/vuntangle/src/shared/SettingsThreatPrevention/components/HostDialog.vue"],"sourcesContent":["<template>\n  <v-container class=\"px-0\">\n    <ValidationObserver ref=\"obs\">\n      <v-row>\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|ip\">\n            <u-text-field v-model=\"ipAddress\" :label=\"$t('ip_address')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <ipv-4-prefix-autocomplete v-model=\"netmask\" :errors=\"errors\" />\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-text-field v-model=\"description\" :label=\"$t('description')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </ValidationObserver>\n  </v-container>\n</template>\n<script>\n  import { VContainer, VRow, VCol } from 'vuetify/lib'\n  import { ValidationObserver, ValidationProvider } from 'vee-validate'\n  import cloneDeep from 'lodash/cloneDeep'\n  import Ipv4PrefixAutocomplete from '../../../components/Ipv4PrefixAutocomplete'\n\n  export default {\n    components: { VContainer, VRow, VCol, ValidationObserver, ValidationProvider, Ipv4PrefixAutocomplete },\n    props: {\n      settings: { type: Object, required: true },\n      index: { type: Number, required: false, default: null },\n    },\n    data: () => ({\n      ipAddress: '',\n      netmask: 32,\n      description: '',\n    }),\n    computed: {\n      passList() {\n        return this.settings.passList\n      },\n      existingHost() {\n        if (this.index !== null && this.passList[this.index]) {\n          return this.passList[this.index]\n        }\n\n        return null\n      },\n    },\n    created() {\n      // set host if editing\n      if (this.existingHost) {\n        // split host into ip/netmask\n        const [ipAddress, netmask] = this.existingHost.host.split('/')\n\n        this.ipAddress = ipAddress\n        this.netmask = parseInt(netmask)\n        this.description = this.existingHost.description\n      }\n    },\n    methods: {\n      async action() {\n        const isValid = await this.$refs.obs.validate()\n        if (!isValid) {\n          return\n        }\n\n        // copy threat prevention (all data must be sent) from store and add/update the host\n        const settings = cloneDeep(this.settings)\n        const host = { description: this.description, host: `${this.ipAddress.trim()}/${this.netmask}` }\n        if (this.existingHost) {\n          settings.passList[this.index] = host\n        } else {\n          settings.passList.push(host)\n        }\n        this.$set(this.settings, 'passList', settings.passList)\n        this.$emit('close')\n      },\n    },\n  }\n</script>\n"],"mappings":";;;;;;;;;;AA8BA,SAAAA,UAAA,EAAAC,IAAA,EAAAC,IAAA;AACA,SAAAC,kBAAA,EAAAC,kBAAA;AACA,OAAAC,SAAA;AACA,OAAAC,sBAAA;AAEA;EACAC,UAAA;IAAAP,UAAA,EAAAA,UAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,kBAAA,EAAAA,kBAAA;IAAAC,kBAAA,EAAAA,kBAAA;IAAAE,sBAAA,EAAAA;EAAA;EACAE,KAAA;IACAC,QAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;IACAC,KAAA;MAAAH,IAAA,EAAAI,MAAA;MAAAF,QAAA;MAAA;IAAA;EACA;EACAG,IAAA,WAAAA,KAAA;IAAA;MACAC,SAAA;MACAC,OAAA;MACAC,WAAA;IACA;EAAA;EACAC,QAAA;IACAC,QAAA,WAAAA,SAAA;MACA,YAAAX,QAAA,CAAAW,QAAA;IACA;IACAC,YAAA,WAAAA,aAAA;MACA,SAAAR,KAAA,kBAAAO,QAAA,MAAAP,KAAA;QACA,YAAAO,QAAA,MAAAP,KAAA;MACA;MAEA;IACA;EACA;EACAS,OAAA,WAAAA,QAAA;IACA;IACA,SAAAD,YAAA;MACA;MACA,IAAAE,qBAAA,QAAAF,YAAA,CAAAG,IAAA,CAAAC,KAAA;QAAAC,sBAAA,GAAAC,cAAA,CAAAJ,qBAAA;QAAAP,SAAA,GAAAU,sBAAA;QAAAT,OAAA,GAAAS,sBAAA;MAEA,KAAAV,SAAA,GAAAA,SAAA;MACA,KAAAC,OAAA,GAAAW,QAAA,CAAAX,OAAA;MACA,KAAAC,WAAA,QAAAG,YAAA,CAAAH,WAAA;IACA;EACA;EACAW,OAAA;IACAC,MAAA,WAAAA,OAAA;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,OAAA,EAAA3B,QAAA,EAAAe,IAAA;QAAA,OAAAS,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACAV,KAAA,CAAAW,KAAA,CAAAC,GAAA,CAAAC,QAAA;YAAA;cAAAR,OAAA,GAAAG,QAAA,CAAAM,IAAA;cAAA,IACAT,OAAA;gBAAAG,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAO,MAAA;YAAA;cAIA;cACArC,QAAA,GAAAJ,SAAA,CAAA0B,KAAA,CAAAtB,QAAA;cACAe,IAAA;gBAAAN,WAAA,EAAAa,KAAA,CAAAb,WAAA;gBAAAM,IAAA,KAAAuB,MAAA,CAAAhB,KAAA,CAAAf,SAAA,CAAAgC,IAAA,SAAAD,MAAA,CAAAhB,KAAA,CAAAd,OAAA;cAAA;cACA,IAAAc,KAAA,CAAAV,YAAA;gBACAZ,QAAA,CAAAW,QAAA,CAAAW,KAAA,CAAAlB,KAAA,IAAAW,IAAA;cACA;gBACAf,QAAA,CAAAW,QAAA,CAAA6B,IAAA,CAAAzB,IAAA;cACA;cACAO,KAAA,CAAAmB,IAAA,CAAAnB,KAAA,CAAAtB,QAAA,cAAAA,QAAA,CAAAW,QAAA;cACAW,KAAA,CAAAoB,KAAA;YAAA;YAAA;cAAA,OAAAZ,QAAA,CAAAa,IAAA;UAAA;QAAA,GAAAjB,OAAA;MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}