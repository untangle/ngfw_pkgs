{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nexport default {\n  props: {\n    settings: {\n      type: [Object, Array],\n      \"default\": null\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    features: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    // matches styles to ETM, uses h1 for page titles and makes the component expand the whole width\n    classicView: {\n      type: Boolean,\n      required: false,\n      \"default\": false\n    },\n    // used to show / hide the description field; shown for mfw-ui but hidden in ETM\n    showDescription: {\n      type: Boolean,\n      \"default\": false\n    },\n    // keeping isChanged separate from isDirty until we make CD-5042 change for all appliance components\n    isChanged: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      settingsCopy: undefined,\n      invalidSettingsErrors: undefined\n    };\n  },\n  computed: {\n    isDirty: function isDirty(_ref) {\n      var settings = _ref.settings,\n        settingsCopy = _ref.settingsCopy,\n        $options = _ref.$options;\n      return !isEqual(settings || $options.defaults, settingsCopy);\n    }\n  },\n  watch: {\n    /**\n     * settings watcher firing only once and only when incoming settings are undefined\n     * in such case it will fallback to dedicated defaults defined for each service (if any)\n     */\n    settings: {\n      immediate: true,\n      handler: function handler(settings) {\n        // must clone settings and default settings or default will be changed when going to other services\n        this.settingsCopy = settings ? cloneDeep(settings) : this.$options.defaults ? cloneDeep(this.$options.defaults) : null;\n      }\n    },\n    isDirty: {\n      immediate: true,\n      handler: function handler(value) {\n        this.$emit('update:isChanged', value);\n      }\n    }\n  },\n  methods: {\n    // reverts all changes in the list to the original ones\n    onUndo: function onUndo() {\n      this.settingsCopy = cloneDeep(this.settings);\n    }\n  }\n};","map":{"version":3,"names":["cloneDeep","isEqual","props","settings","type","Object","Array","disabled","Boolean","features","default","classicView","required","showDescription","isChanged","data","settingsCopy","undefined","invalidSettingsErrors","computed","isDirty","_ref","$options","defaults","watch","immediate","handler","value","$emit","methods","onUndo"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/shared/settingsMixin.js"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep'\nimport isEqual from 'lodash/isEqual'\n\nexport default {\n  props: {\n    settings: { type: [Object, Array], default: null },\n    disabled: { type: Boolean, default: false },\n    features: { type: Object, default: () => ({}) },\n    // matches styles to ETM, uses h1 for page titles and makes the component expand the whole width\n    classicView: { type: Boolean, required: false, default: false },\n    // used to show / hide the description field; shown for mfw-ui but hidden in ETM\n    showDescription: { type: Boolean, default: false },\n    // keeping isChanged separate from isDirty until we make CD-5042 change for all appliance components\n    isChanged: { type: Boolean, default: false },\n  },\n\n  data() {\n    return {\n      settingsCopy: undefined,\n      invalidSettingsErrors: undefined,\n    }\n  },\n\n  computed: {\n    isDirty: ({ settings, settingsCopy, $options }) => !isEqual(settings || $options.defaults, settingsCopy),\n  },\n  watch: {\n    /**\n     * settings watcher firing only once and only when incoming settings are undefined\n     * in such case it will fallback to dedicated defaults defined for each service (if any)\n     */\n    settings: {\n      immediate: true,\n      handler(settings) {\n        // must clone settings and default settings or default will be changed when going to other services\n        this.settingsCopy = settings\n          ? cloneDeep(settings)\n          : this.$options.defaults\n          ? cloneDeep(this.$options.defaults)\n          : null\n      },\n    },\n    isDirty: {\n      immediate: true,\n      handler(value) {\n        this.$emit('update:isChanged', value)\n      },\n    },\n  },\n\n  methods: {\n    // reverts all changes in the list to the original ones\n    onUndo() {\n      this.settingsCopy = cloneDeep(this.settings)\n    },\n  },\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,kBAAkB;AACxC,OAAOC,OAAO,MAAM,gBAAgB;AAEpC,eAAe;EACbC,KAAK,EAAE;IACLC,QAAQ,EAAE;MAAEC,IAAI,EAAE,CAACC,MAAM,EAAEC,KAAK,CAAC;MAAE,WAAS;IAAK,CAAC;IAClDC,QAAQ,EAAE;MAAEH,IAAI,EAAEI,OAAO;MAAE,WAAS;IAAM,CAAC;IAC3CC,QAAQ,EAAE;MAAEL,IAAI,EAAEC,MAAM;MAAE,WAAS,SAATK,QAAOA,CAAA;QAAA,OAAS,CAAC,CAAC;MAAA;IAAE,CAAC;IAC/C;IACAC,WAAW,EAAE;MAAEP,IAAI,EAAEI,OAAO;MAAEI,QAAQ,EAAE,KAAK;MAAE,WAAS;IAAM,CAAC;IAC/D;IACAC,eAAe,EAAE;MAAET,IAAI,EAAEI,OAAO;MAAE,WAAS;IAAM,CAAC;IAClD;IACAM,SAAS,EAAE;MAAEV,IAAI,EAAEI,OAAO;MAAE,WAAS;IAAM;EAC7C,CAAC;EAEDO,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAEC,SAAS;MACvBC,qBAAqB,EAAED;IACzB,CAAC;EACH,CAAC;EAEDE,QAAQ,EAAE;IACRC,OAAO,EAAE,SAATA,OAAOA,CAAAC,IAAA;MAAA,IAAKlB,QAAQ,GAAAkB,IAAA,CAARlB,QAAQ;QAAEa,YAAY,GAAAK,IAAA,CAAZL,YAAY;QAAEM,QAAQ,GAAAD,IAAA,CAARC,QAAQ;MAAA,OAAO,CAACrB,OAAO,CAACE,QAAQ,IAAImB,QAAQ,CAACC,QAAQ,EAAEP,YAAY,CAAC;IAAA;EAC1G,CAAC;EACDQ,KAAK,EAAE;IACL;AACJ;AACA;AACA;IACIrB,QAAQ,EAAE;MACRsB,SAAS,EAAE,IAAI;MACfC,OAAO,WAAPA,OAAOA,CAACvB,QAAQ,EAAE;QAChB;QACA,IAAI,CAACa,YAAY,GAAGb,QAAQ,GACxBH,SAAS,CAACG,QAAQ,CAAC,GACnB,IAAI,CAACmB,QAAQ,CAACC,QAAQ,GACtBvB,SAAS,CAAC,IAAI,CAACsB,QAAQ,CAACC,QAAQ,CAAC,GACjC,IAAI;MACV;IACF,CAAC;IACDH,OAAO,EAAE;MACPK,SAAS,EAAE,IAAI;MACfC,OAAO,WAAPA,OAAOA,CAACC,KAAK,EAAE;QACb,IAAI,CAACC,KAAK,CAAC,kBAAkB,EAAED,KAAK,CAAC;MACvC;IACF;EACF,CAAC;EAEDE,OAAO,EAAE;IACP;IACAC,MAAM,WAANA,MAAMA,CAAA,EAAG;MACP,IAAI,CAACd,YAAY,GAAGhB,SAAS,CAAC,IAAI,CAACG,QAAQ,CAAC;IAC9C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}