{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { VProgressLinear } from 'vuetify/lib';\nvar bpsConvertFactor = 1000;\nexport default {\n  components: {\n    VProgressLinear: VProgressLinear\n  },\n  inject: ['$intf', '$status', '$onGetStatusHardware', '$onGetStatusWanTest'],\n  data: function data() {\n    return {\n      statusHardware: null,\n      statusWanTest: null,\n      test: {\n        show: false,\n        progress: false,\n        counter: 0,\n        interval: null\n      }\n    };\n  },\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    status: function status(_ref2) {\n      var $status = _ref2.$status;\n      return $status();\n    },\n    /** converts settings download Kbps to Mbps and back */\n    downloadMbps: {\n      get: function get(_ref3) {\n        var intf = _ref3.intf;\n        return intf.downloadKbps / bpsConvertFactor;\n      },\n      set: function set(value) {\n        this.intf.downloadKbps = value * bpsConvertFactor;\n      }\n    },\n    /** converts settings upload Kbps to Mbps and back */\n    uploadMbps: {\n      get: function get(_ref4) {\n        var intf = _ref4.intf;\n        return intf.uploadKbps / bpsConvertFactor;\n      },\n      set: function set(value) {\n        this.intf.uploadKbps = value * bpsConvertFactor;\n      }\n    },\n    /** enables performance test if interface has a status and is not an E3 device */\n    performanceTestEnabled: function performanceTestEnabled(_ref5) {\n      var status = _ref5.status,\n        statusHardware = _ref5.statusHardware;\n      if (!status || !statusHardware) return false;\n      if (statusHardware.boardName && statusHardware.boardName.match(/e3/i)) {\n        return false;\n      }\n      return true;\n    }\n  },\n  watch: {\n    'intf.qosEnabled': {\n      handler: function handler(value) {\n        if (value && !this.intf.downloadKbps && !this.intf.uploadKbps) {\n          this.$set(this.intf, 'downloadKbps', 1000);\n          this.$set(this.intf, 'uploadKbps', 1000);\n        }\n      },\n      immediate: true\n    }\n  },\n  created: function created() {\n    var _this = this;\n    /** emits event to get hardware status needed for performance test */\n    this.$onGetStatusHardware(function (resp) {\n      return _this.statusHardware = resp;\n    });\n  },\n  methods: {\n    /** shows progress dialog and emits event to start the wan performance test */startPerformanceTest: function startPerformanceTest() {\n      var _this2 = this;\n      this.test.show = true;\n      this.test.interval = setInterval(function () {\n        // when counter hits 100% stop the progress and clear interval\n        if (_this2.test.counter >= 100) {\n          _this2.test.counter = 100;\n          clearInterval(_this2.test.interval);\n          _this2.test.interval = null;\n        } else {\n          // counter value (progress bar update) each 100ms = 0.33% => 30 seconds = 99%\n          _this2.test.counter += 0.33;\n        }\n      }, 100);\n      this.test.progress = true;\n      this.$onGetStatusWanTest(this.status.l3device, function (resp) {\n        _this2.statusWanTest = resp;\n        _this2.test.progress = false;\n      });\n    },\n    /** populates the download, upload values with test results and closes the dialog */onCloseTestDialog: function onCloseTestDialog() {\n      var _this$statusWanTest, _this$statusWanTest2;\n      if (((_this$statusWanTest = this.statusWanTest) === null || _this$statusWanTest === void 0 ? void 0 : _this$statusWanTest.download) >= 0) this.intf.downloadKbps = this.statusWanTest.download;\n      if (((_this$statusWanTest2 = this.statusWanTest) === null || _this$statusWanTest2 === void 0 ? void 0 : _this$statusWanTest2.upload) >= 0) this.intf.uploadKbps = this.statusWanTest.upload;\n      this.statusWanTest = null;\n      this.test = {\n        show: false,\n        progress: false,\n        counter: 0,\n        interval: null\n      };\n    }\n  }\n};","map":{"version":3,"names":["VProgressLinear","bpsConvertFactor","components","inject","data","statusHardware","statusWanTest","test","show","progress","counter","interval","computed","intf","_ref","$intf","status","_ref2","$status","downloadMbps","get","_ref3","downloadKbps","set","value","uploadMbps","_ref4","uploadKbps","performanceTestEnabled","_ref5","boardName","match","watch","handler","$set","immediate","created","_this","$onGetStatusHardware","resp","methods","startPerformanceTest","_this2","setInterval","clearInterval","$onGetStatusWanTest","l3device","onCloseTestDialog","_this$statusWanTest","_this$statusWanTest2","download","upload"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/qos/Qos.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- qosEnabled -->\n    <v-switch v-model=\"intf.qosEnabled\" :label=\"$t('qos_enabled')\" class=\"ma-0\" />\n    <v-row>\n      <v-col cols=\"4\">\n        <!-- downloadKbps -->\n        <ValidationProvider v-slot=\"{ errors }\" :rules=\"intf.qosEnabled ? `required|min_value:1` : ''\">\n          <u-text-field\n            v-model=\"downloadMbps\"\n            :label=\"$vuntangle.$t('download')\"\n            type=\"number\"\n            :disabled=\"!intf.qosEnabled\"\n            :error-messages=\"errors\"\n            suffix=\"Mbps\"\n          >\n            <template v-if=\"errors.length\" #append>\n              <u-errors-tooltip :errors=\"errors\" />\n            </template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n\n      <v-col cols=\"4\">\n        <!-- uploadKbps -->\n        <ValidationProvider v-slot=\"{ errors }\" :rules=\"intf.qosEnabled ? `required|min_value:1` : ''\">\n          <u-text-field\n            v-model=\"uploadMbps\"\n            :label=\"$t('upload')\"\n            type=\"number\"\n            :disabled=\"!intf.qosEnabled\"\n            :error-messages=\"errors\"\n            suffix=\"Mbps\"\n          >\n            <template v-if=\"errors.length\" #append>\n              <u-errors-tooltip :errors=\"errors\" />\n            </template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n\n      <v-col cols=\"4\" class=\"d-flex\">\n        <v-spacer />\n        <u-btn v-if=\"performanceTestEnabled\" :small=\"false\" :disabled=\"!intf.qosEnabled\" @click=\"startPerformanceTest\">\n          {{ $t('test_performance') }}\n        </u-btn>\n      </v-col>\n    </v-row>\n\n    <v-dialog v-model=\"test.show\" width=\"400\" persistent>\n      <v-card>\n        <v-card-title class=\"text-h5 font-weight-light\">\n          {{ $t('testing_wan_performance') }}\n        </v-card-title>\n        <v-card-text>\n          <v-progress-linear v-if=\"test.progress\" v-model=\"test.counter\" height=\"10\" striped class />\n          <div v-else-if=\"statusWanTest && statusWanTest.download && statusWanTest.upload\">\n            <span>\n              {{ $vuntangle.$t('download') }}: <strong>{{ statusWanTest.download / 1000 }} {{ $t('mbps') }}</strong>\n              <br />\n              {{ $t('upload') }}: <strong> {{ statusWanTest.upload / 1000 }} {{ $t('mbps') }} </strong>\n            </span>\n          </div>\n          <div v-else>\n            {{ $t('wan_test_failed', []) }}\n          </div>\n        </v-card-text>\n        <v-card-actions v-if=\"!test.progress\">\n          <v-spacer />\n          <u-btn :min-width=\"null\" class=\"my-2\" @click=\"onCloseTestDialog\">\n            {{ $t('ok') }}\n          </u-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n<script>\n  import { VProgressLinear } from 'vuetify/lib'\n  const bpsConvertFactor = 1000\n\n  export default {\n    components: {\n      VProgressLinear,\n    },\n    inject: ['$intf', '$status', '$onGetStatusHardware', '$onGetStatusWanTest'],\n    data() {\n      return {\n        statusHardware: null,\n        statusWanTest: null,\n        test: {\n          show: false,\n          progress: false,\n          counter: 0,\n          interval: null,\n        },\n      }\n    },\n    computed: {\n      intf: ({ $intf }) => $intf(),\n      status: ({ $status }) => $status(),\n\n      /** converts settings download Kbps to Mbps and back */\n      downloadMbps: {\n        get: ({ intf }) => intf.downloadKbps / bpsConvertFactor,\n        set(value) {\n          this.intf.downloadKbps = value * bpsConvertFactor\n        },\n      },\n\n      /** converts settings upload Kbps to Mbps and back */\n      uploadMbps: {\n        get: ({ intf }) => intf.uploadKbps / bpsConvertFactor,\n        set(value) {\n          this.intf.uploadKbps = value * bpsConvertFactor\n        },\n      },\n\n      /** enables performance test if interface has a status and is not an E3 device */\n      performanceTestEnabled: ({ status, statusHardware }) => {\n        if (!status || !statusHardware) return false\n        if (statusHardware.boardName && statusHardware.boardName.match(/e3/i)) {\n          return false\n        }\n        return true\n      },\n    },\n\n    watch: {\n      'intf.qosEnabled': {\n        handler(value) {\n          if (value && !this.intf.downloadKbps && !this.intf.uploadKbps) {\n            this.$set(this.intf, 'downloadKbps', 1000)\n            this.$set(this.intf, 'uploadKbps', 1000)\n          }\n        },\n        immediate: true,\n      },\n    },\n\n    created() {\n      /** emits event to get hardware status needed for performance test */\n      this.$onGetStatusHardware(resp => (this.statusHardware = resp))\n    },\n\n    methods: {\n      /** shows progress dialog and emits event to start the wan performance test */\n      startPerformanceTest() {\n        this.test.show = true\n        this.test.interval = setInterval(() => {\n          // when counter hits 100% stop the progress and clear interval\n          if (this.test.counter >= 100) {\n            this.test.counter = 100\n            clearInterval(this.test.interval)\n            this.test.interval = null\n          } else {\n            // counter value (progress bar update) each 100ms = 0.33% => 30 seconds = 99%\n            this.test.counter += 0.33\n          }\n        }, 100)\n\n        this.test.progress = true\n        this.$onGetStatusWanTest(this.status.l3device, resp => {\n          this.statusWanTest = resp\n          this.test.progress = false\n        })\n      },\n\n      /** populates the download, upload values with test results and closes the dialog */\n      onCloseTestDialog() {\n        if (this.statusWanTest?.download >= 0) this.intf.downloadKbps = this.statusWanTest.download\n        if (this.statusWanTest?.upload >= 0) this.intf.uploadKbps = this.statusWanTest.upload\n        this.statusWanTest = null\n        this.test = {\n          show: false,\n          progress: false,\n          counter: 0,\n          interval: null,\n        }\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}