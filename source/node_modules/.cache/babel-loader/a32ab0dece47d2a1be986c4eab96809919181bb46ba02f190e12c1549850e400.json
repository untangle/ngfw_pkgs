{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { VRadioGroup, VRadio } from 'vuetify/lib';\nimport ReportGrid from '../components/ReportGrid.vue';\nimport viewsMixin from './viewsMixin';\nexport default {\n  components: {\n    VRadioGroup: VRadioGroup,\n    VRadio: VRadio,\n    ReportGrid: ReportGrid\n  },\n  mixins: [viewsMixin],\n  data: function data() {\n    return {\n      filter: '',\n      // used to update report query conditions\n      filterItems: [{\n        text: 'all',\n        value: ''\n      }, {\n        text: 'rejected',\n        value: 'application_control_rejected'\n      }, {\n        text: 'blocked',\n        value: 'application_control_blocked'\n      }, {\n        text: 'flagged',\n        value: 'application_control_flagged'\n      }, {\n        text: 'bypassed',\n        value: 'application_control_bypassed'\n      }]\n    };\n  },\n  computed: {\n    /**\n     * Returns custom conditions based on filtering options\n     * @param {Object} vm\n     * @param {String} vm.filter - the filter field\n     * @returns {Array<QueryCondition>}\n     */\n    customConditions: function customConditions(_ref) {\n      var filter = _ref.filter;\n      if (!filter) return [];\n      if (filter === 'application_control_bypassed') {\n        // application_control_bypassed would contain a non-empty string in reports.db\n        return [{\n          column: filter,\n          operator: 'NE',\n          value: ''\n        }];\n      }\n      return [{\n        column: filter,\n        operator: 'EQ',\n        value: true\n      }];\n    }\n  }\n};","map":{"version":3,"names":["VRadioGroup","VRadio","ReportGrid","viewsMixin","components","mixins","data","filter","filterItems","text","value","computed","customConditions","_ref","column","operator"],"sources":["node_modules/vuntangle/src/shared/Reports/views/ApplicationControlApplications.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex flex-column flex-grow-1\">\n    <div class=\"d-flex align-center mb-4\">\n      <v-radio-group v-model=\"filter\" row class=\"ma-0\" hide-details>\n        <v-radio\n          v-for=\"item in filterItems\"\n          :key=\"item.text\"\n          :label=\"$vuntangle.$t(item.text)\"\n          :value=\"item.value\"\n          hide-details\n          :ripple=\"false\"\n        />\n      </v-radio-group>\n    </div>\n\n    <report-grid :report=\"reports[0]\" :custom-conditions=\"customConditions\" v-on=\"$listeners\" />\n  </div>\n</template>\n<script>\n  import { VRadioGroup, VRadio } from 'vuetify/lib'\n  import ReportGrid from '../components/ReportGrid.vue'\n  import viewsMixin from './viewsMixin'\n\n  export default {\n    components: { VRadioGroup, VRadio, ReportGrid },\n    mixins: [viewsMixin],\n\n    data() {\n      return {\n        filter: '',\n        // used to update report query conditions\n        filterItems: [\n          { text: 'all', value: '' },\n          { text: 'rejected', value: 'application_control_rejected' },\n          { text: 'blocked', value: 'application_control_blocked' },\n          { text: 'flagged', value: 'application_control_flagged' },\n          { text: 'bypassed', value: 'application_control_bypassed' },\n        ],\n      }\n    },\n\n    computed: {\n      /**\n       * Returns custom conditions based on filtering options\n       * @param {Object} vm\n       * @param {String} vm.filter - the filter field\n       * @returns {Array<QueryCondition>}\n       */\n      customConditions: ({ filter }) => {\n        if (!filter) return []\n\n        if (filter === 'application_control_bypassed') {\n          // application_control_bypassed would contain a non-empty string in reports.db\n          return [\n            {\n              column: filter,\n              operator: 'NE',\n              value: '',\n            },\n          ]\n        }\n        return [\n          {\n            column: filter,\n            operator: 'EQ',\n            value: true,\n          },\n        ]\n      },\n    },\n  }\n</script>\n"],"mappings":";;;;AAmBA,SAAAA,WAAA,EAAAC,MAAA;AACA,OAAAC,UAAA;AACA,OAAAC,UAAA;AAEA;EACAC,UAAA;IAAAJ,WAAA,EAAAA,WAAA;IAAAC,MAAA,EAAAA,MAAA;IAAAC,UAAA,EAAAA;EAAA;EACAG,MAAA,GAAAF,UAAA;EAEAG,IAAA,WAAAA,KAAA;IACA;MACAC,MAAA;MACA;MACAC,WAAA,GACA;QAAAC,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EAEAC,QAAA;IACA;AACA;AACA;AACA;AACA;AACA;IACAC,gBAAA,WAAAA,iBAAAC,IAAA;MAAA,IAAAN,MAAA,GAAAM,IAAA,CAAAN,MAAA;MACA,KAAAA,MAAA;MAEA,IAAAA,MAAA;QACA;QACA,QACA;UACAO,MAAA,EAAAP,MAAA;UACAQ,QAAA;UACAL,KAAA;QACA,EACA;MACA;MACA,QACA;QACAI,MAAA,EAAAP,MAAA;QACAQ,QAAA;QACAL,KAAA;MACA,EACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}