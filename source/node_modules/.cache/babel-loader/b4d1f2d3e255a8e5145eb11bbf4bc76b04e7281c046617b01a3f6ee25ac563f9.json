{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\n/**\n * Utility methods used to convert and display box timestamps to box timezone date strings\n *\n * There are corner cases when the box timezone db is outdated for some of the timezones,\n * meaning that the box system date is not reflecting what it should be in reality (usually being off by 30m or 1h).\n * `getTimezoneOffset` is not using the box system date, but only it's timezone to compute offsets\n * and implicitly the datetimes that are displayed; so the UI will show the correct real date and time\n */\n\nexport default {\n  /**\n   * The default format in which the date is displayed in UI (reports/charts)\n   * It should be used in conjunction with `locale` like`date.toLocaleString('ja', tz.defaultFormat)`\n   * resulting e.g. `Nov 22, 10:08 PM`, `22. Nov., 22:08`, `11月22日 22:08`\n   */\n  defaultFormat: {\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric'\n  },\n  /**\n   * Returns the timezone offset string based on timezone name: e.g. 'UTC+05:00', 'UTC-02:30'\n   * Note: GMT is replaced with UTC for display\n   * @param {String} timeZone - the timezone string (e.g. from the box settings), as in IANA tz database\n   * @returns {String}\n   */\n  getTimezoneOffset: function getTimezoneOffset(timeZone) {\n    try {\n      var parts = Intl.DateTimeFormat([], {\n        timeZone: timeZone,\n        timeZoneName: 'longOffset'\n      }).formatToParts();\n      var part = parts.find(function (p) {\n        return p.type === 'timeZoneName';\n      });\n      return part.value === 'GMT' ? 'UTC+00:00' : part.value.replace(/GMT/i, 'UTC');\n    } catch (ex) {\n      // fallback to UTC in case timezone name is wrong (not found)\n      return 'UTC+00:00';\n    }\n  },\n  /**\n   * Returns the timezone offset in milliseconds relative to UTC\n   * @param {String} timeZone - the timezone string\n   * @returns {Number} milliseconds\n   */\n  getTimezoneOffsetMillis: function getTimezoneOffsetMillis(timeZone) {\n    var tzOffset = this.getTimezoneOffset(timeZone);\n    var parts = tzOffset.replace(/UTC/, '').split(':');\n    // compute offset hours from string (e.g. from \"UTC+07:00\" => +420 minutes)\n    var hours = parts[0] ? parseInt(parts[0]) * 60 : 0;\n    // compute minutes, take in count \"-\" and \"+\" (e.g. from \"UTC-02:30\" => -30 minutes)\n    var minutes = parts[1] ? parseInt(hours >= 0 ? parts[1] : -parts[1]) : 0;\n\n    // return milliseconds\n    return (hours + minutes) * 60 * 1000;\n  },\n  /**\n   * Returns a date having date & time equivalent for the specified timezone\n   * @param {Date} date - the Date object\n   * @param {String} timeZone - the timezone name\n   * @returns {Date}\n   */\n  getTimezoneDate: function getTimezoneDate(date, timeZone) {\n    // convert input date to a timestamp\n    var remoteTimestamp = date.getTime();\n    // compute timezone offset in millis based on 'remote/box' timezone\n    var remoteOffset = this.getTimezoneOffsetMillis(timeZone);\n    // get local timezone offset in millis too\n    var localOffset = new Date().getTimezoneOffset() * 60 * 1000;\n\n    // return computed date as expected in specified timezone\n    // should be further used with `toLocaleString` method for UI display\n    return new Date(remoteTimestamp + remoteOffset + localOffset);\n  }\n};","map":{"version":3,"names":["defaultFormat","month","day","hour","minute","getTimezoneOffset","timeZone","parts","Intl","DateTimeFormat","timeZoneName","formatToParts","part","find","p","type","value","replace","ex","getTimezoneOffsetMillis","tzOffset","split","hours","parseInt","minutes","getTimezoneDate","date","remoteTimestamp","getTime","remoteOffset","localOffset","Date"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/plugins/tz.js"],"sourcesContent":["/**\n * Utility methods used to convert and display box timestamps to box timezone date strings\n *\n * There are corner cases when the box timezone db is outdated for some of the timezones,\n * meaning that the box system date is not reflecting what it should be in reality (usually being off by 30m or 1h).\n * `getTimezoneOffset` is not using the box system date, but only it's timezone to compute offsets\n * and implicitly the datetimes that are displayed; so the UI will show the correct real date and time\n */\n\nexport default {\n  /**\n   * The default format in which the date is displayed in UI (reports/charts)\n   * It should be used in conjunction with `locale` like`date.toLocaleString('ja', tz.defaultFormat)`\n   * resulting e.g. `Nov 22, 10:08 PM`, `22. Nov., 22:08`, `11月22日 22:08`\n   */\n  defaultFormat: { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' },\n\n  /**\n   * Returns the timezone offset string based on timezone name: e.g. 'UTC+05:00', 'UTC-02:30'\n   * Note: GMT is replaced with UTC for display\n   * @param {String} timeZone - the timezone string (e.g. from the box settings), as in IANA tz database\n   * @returns {String}\n   */\n  getTimezoneOffset(timeZone) {\n    try {\n      const parts = Intl.DateTimeFormat([], { timeZone, timeZoneName: 'longOffset' }).formatToParts()\n      const part = parts.find(p => p.type === 'timeZoneName')\n      return part.value === 'GMT' ? 'UTC+00:00' : part.value.replace(/GMT/i, 'UTC')\n    } catch (ex) {\n      // fallback to UTC in case timezone name is wrong (not found)\n      return 'UTC+00:00'\n    }\n  },\n\n  /**\n   * Returns the timezone offset in milliseconds relative to UTC\n   * @param {String} timeZone - the timezone string\n   * @returns {Number} milliseconds\n   */\n  getTimezoneOffsetMillis(timeZone) {\n    const tzOffset = this.getTimezoneOffset(timeZone)\n    const parts = tzOffset.replace(/UTC/, '').split(':')\n    // compute offset hours from string (e.g. from \"UTC+07:00\" => +420 minutes)\n    const hours = parts[0] ? parseInt(parts[0]) * 60 : 0\n    // compute minutes, take in count \"-\" and \"+\" (e.g. from \"UTC-02:30\" => -30 minutes)\n    const minutes = parts[1] ? parseInt(hours >= 0 ? parts[1] : -parts[1]) : 0\n\n    // return milliseconds\n    return (hours + minutes) * 60 * 1000\n  },\n\n  /**\n   * Returns a date having date & time equivalent for the specified timezone\n   * @param {Date} date - the Date object\n   * @param {String} timeZone - the timezone name\n   * @returns {Date}\n   */\n  getTimezoneDate(date, timeZone) {\n    // convert input date to a timestamp\n    const remoteTimestamp = date.getTime()\n    // compute timezone offset in millis based on 'remote/box' timezone\n    const remoteOffset = this.getTimezoneOffsetMillis(timeZone)\n    // get local timezone offset in millis too\n    const localOffset = new Date().getTimezoneOffset() * 60 * 1000\n\n    // return computed date as expected in specified timezone\n    // should be further used with `toLocaleString` method for UI display\n    return new Date(remoteTimestamp + remoteOffset + localOffset)\n  },\n}\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;EACb;AACF;AACA;AACA;AACA;EACEA,aAAa,EAAE;IAAEC,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE,SAAS;IAAEC,IAAI,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAU,CAAC;EAErF;AACF;AACA;AACA;AACA;AACA;EACEC,iBAAiB,WAAjBA,iBAAiBA,CAACC,QAAQ,EAAE;IAC1B,IAAI;MACF,IAAMC,KAAK,GAAGC,IAAI,CAACC,cAAc,CAAC,EAAE,EAAE;QAAEH,QAAQ,EAARA,QAAQ;QAAEI,YAAY,EAAE;MAAa,CAAC,CAAC,CAACC,aAAa,CAAC,CAAC;MAC/F,IAAMC,IAAI,GAAGL,KAAK,CAACM,IAAI,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,IAAI,KAAK,cAAc;MAAA,EAAC;MACvD,OAAOH,IAAI,CAACI,KAAK,KAAK,KAAK,GAAG,WAAW,GAAGJ,IAAI,CAACI,KAAK,CAACC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;IAC/E,CAAC,CAAC,OAAOC,EAAE,EAAE;MACX;MACA,OAAO,WAAW;IACpB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,uBAAuB,WAAvBA,uBAAuBA,CAACb,QAAQ,EAAE;IAChC,IAAMc,QAAQ,GAAG,IAAI,CAACf,iBAAiB,CAACC,QAAQ,CAAC;IACjD,IAAMC,KAAK,GAAGa,QAAQ,CAACH,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IACpD;IACA,IAAMC,KAAK,GAAGf,KAAK,CAAC,CAAC,CAAC,GAAGgB,QAAQ,CAAChB,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;IACpD;IACA,IAAMiB,OAAO,GAAGjB,KAAK,CAAC,CAAC,CAAC,GAAGgB,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGf,KAAK,CAAC,CAAC,CAAC,GAAG,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;;IAE1E;IACA,OAAO,CAACe,KAAK,GAAGE,OAAO,IAAI,EAAE,GAAG,IAAI;EACtC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,eAAe,WAAfA,eAAeA,CAACC,IAAI,EAAEpB,QAAQ,EAAE;IAC9B;IACA,IAAMqB,eAAe,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC;IACtC;IACA,IAAMC,YAAY,GAAG,IAAI,CAACV,uBAAuB,CAACb,QAAQ,CAAC;IAC3D;IACA,IAAMwB,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC1B,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI;;IAE9D;IACA;IACA,OAAO,IAAI0B,IAAI,CAACJ,eAAe,GAAGE,YAAY,GAAGC,WAAW,CAAC;EAC/D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}