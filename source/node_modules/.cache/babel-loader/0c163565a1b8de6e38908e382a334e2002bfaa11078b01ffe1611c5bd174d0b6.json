{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport default {\n  inject: ['$intf', '$status'],\n  props: {\n    /**\n     * flag telling if the component is used in setup wizard\n     */\n    isSetup: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      channelItems: [],\n      // async loaded\n      throughputItems: [] // async loaded\n    };\n  },\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    status: function status(_ref2) {\n      var $status = _ref2.$status;\n      return $status();\n    },\n    encryptionItems: function encryptionItems() {\n      return [{\n        text: this.$t('none'),\n        value: 'NONE'\n      }, {\n        text: this.$t('wpa1'),\n        value: 'WPA1'\n      }, {\n        text: this.$t('wpa12'),\n        value: 'WPA12'\n      }, {\n        text: this.$t('wpa2'),\n        value: 'WPA2'\n      }];\n    },\n    modeItems: function modeItems() {\n      return [{\n        text: this.$t('access_point'),\n        value: 'AP'\n      }, {\n        text: this.$t('client'),\n        value: 'CLIENT'\n      }];\n    },\n    visibilityItems: function visibilityItems() {\n      return [{\n        text: this.$t('advertise_ssid_publicly'),\n        value: false\n      }, {\n        text: this.$t('hide_ssid'),\n        value: true\n      }];\n    }\n  },\n  created: function created() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _this.$emit('get-wifi-channels', _this.intf.device, function (response) {\n              // returns an array of objects like { 'frequency': '2.412 GHz', 'channel': 1 }\n              _this.channelItems = response || [];\n            });\n          case 2:\n            _context.next = 4;\n            return _this.$emit('get-wifi-mode-list', _this.intf.device, function (response) {\n              // returns an array of objects like { 'name': 'HT40', 'mode': 'HT40' }\n              _this.throughputItems = response || [];\n            });\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n};","map":{"version":3,"names":["inject","props","isSetup","type","Boolean","data","channelItems","throughputItems","computed","intf","_ref","$intf","status","_ref2","$status","encryptionItems","text","$t","value","modeItems","visibilityItems","created","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","$emit","device","response","stop"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/wifi/Wifi.vue"],"sourcesContent":["<template>\n  <div>\n    <u-alert class=\"mt-4\">{{ $t('wifi_info') }}</u-alert>\n\n    <!-- show enabled/disabled option if component used in setup wizard -->\n    <div class=\"d-flex\">\n      <v-switch v-if=\"isSetup\" v-model=\"intf.enabled\" :label=\"$t('interface_enabled')\" class=\"mt-0\" />\n    </div>\n\n    <v-row>\n      <v-col>\n        <!-- wirelessSsid -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-text-field v-model=\"intf.wirelessSsid\" :label=\"$t('ssid')\" :error-messages=\"errors\">\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n      <v-col>\n        <!-- wirelessVisibility -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-select v-model=\"intf.hidden\" :label=\"$t('visibility')\" :items=\"visibilityItems\" :error-messages=\"errors\">\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-select>\n        </ValidationProvider>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col>\n        <!-- wirelessEncryption -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-select\n            v-model=\"intf.wirelessEncryption\"\n            :label=\"$t('encryption')\"\n            :items=\"encryptionItems\"\n            :error-messages=\"errors\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-select>\n        </ValidationProvider>\n      </v-col>\n      <v-col v-if=\"intf.wirelessEncryption !== 'NONE'\">\n        <!-- wirelessPassword -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required|min:8\">\n          <u-password v-model=\"intf.wirelessPassword\" :label=\"$t('password')\" :errors=\"errors\" />\n        </ValidationProvider>\n      </v-col>\n      <v-col v-else><!-- just placeholder --></v-col>\n    </v-row>\n    <v-row>\n      <v-col>\n        <!-- wirelessMode -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-select v-model=\"intf.wirelessMode\" :label=\"$t('mode')\" :items=\"modeItems\" :error-messages=\"errors\">\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-select>\n        </ValidationProvider>\n      </v-col>\n      <v-col>\n        <!-- wirelessChannel -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-select\n            v-model=\"intf.wirelessChannel\"\n            :label=\"$t('channel')\"\n            :items=\"channelItems\"\n            item-text=\"frequency\"\n            item-value=\"channel\"\n            :error-messages=\"errors\"\n          >\n            <template #selection=\"data\">\n              {{ data.item.channel }} <span class=\"grey--text ml-1\">[ {{ data.item.frequency }} ]</span>\n            </template>\n            <template #item=\"data\">\n              <v-list-item-content>\n                <v-list-item-title>\n                  {{ data.item.channel }} <span class=\"grey--text ml-1\">[ {{ data.item.frequency }} ]</span>\n                </v-list-item-title>\n              </v-list-item-content>\n            </template>\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-select>\n        </ValidationProvider>\n      </v-col>\n      <v-col>\n        <!-- wirelessThroughput -->\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-select\n            v-model=\"intf.wirelessThroughput\"\n            :label=\"$t('ht_mode')\"\n            :items=\"throughputItems\"\n            item-text=\"name\"\n            item-value=\"mode\"\n            :error-messages=\"errors\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-select>\n        </ValidationProvider>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n<script>\n  export default {\n    inject: ['$intf', '$status'],\n    props: {\n      /**\n       * flag telling if the component is used in setup wizard\n       */\n      isSetup: { type: Boolean, default: false },\n    },\n    data() {\n      return {\n        channelItems: [], // async loaded\n        throughputItems: [], // async loaded\n      }\n    },\n    computed: {\n      intf: ({ $intf }) => $intf(),\n      status: ({ $status }) => $status(),\n\n      encryptionItems() {\n        return [\n          { text: this.$t('none'), value: 'NONE' },\n          { text: this.$t('wpa1'), value: 'WPA1' },\n          { text: this.$t('wpa12'), value: 'WPA12' },\n          { text: this.$t('wpa2'), value: 'WPA2' },\n        ]\n      },\n      modeItems() {\n        return [\n          { text: this.$t('access_point'), value: 'AP' },\n          { text: this.$t('client'), value: 'CLIENT' },\n        ]\n      },\n      visibilityItems() {\n        return [\n          { text: this.$t('advertise_ssid_publicly'), value: false },\n          { text: this.$t('hide_ssid'), value: true },\n        ]\n      },\n    },\n    async created() {\n      await this.$emit('get-wifi-channels', this.intf.device, response => {\n        // returns an array of objects like { 'frequency': '2.412 GHz', 'channel': 1 }\n        this.channelItems = response || []\n      })\n\n      await this.$emit('get-wifi-mode-list', this.intf.device, response => {\n        // returns an array of objects like { 'name': 'HT40', 'mode': 'HT40' }\n        this.throughputItems = response || []\n      })\n    },\n  }\n</script>\n"],"mappings":";;AAsGA;EACAA,MAAA;EACAC,KAAA;IACA;AACA;AACA;IACAC,OAAA;MAAAC,IAAA,EAAAC,OAAA;MAAA;IAAA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,YAAA;MAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACAC,IAAA,WAAAA,KAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MAAA,OAAAA,KAAA;IAAA;IACAC,MAAA,WAAAA,OAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAD,KAAA,CAAAC,OAAA;MAAA,OAAAA,OAAA;IAAA;IAEAC,eAAA,WAAAA,gBAAA;MACA,QACA;QAAAC,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,EACA;IACA;IACAC,SAAA,WAAAA,UAAA;MACA,QACA;QAAAH,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,EACA;IACA;IACAE,eAAA,WAAAA,gBAAA;MACA,QACA;QAAAJ,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,EACA;IACA;EACA;EACAG,OAAA,WAAAA,QAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;MAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACAT,KAAA,CAAAU,KAAA,sBAAAV,KAAA,CAAAb,IAAA,CAAAwB,MAAA,YAAAC,QAAA;cACA;cACAZ,KAAA,CAAAhB,YAAA,GAAA4B,QAAA;YACA;UAAA;YAAAL,QAAA,CAAAE,IAAA;YAAA,OAEAT,KAAA,CAAAU,KAAA,uBAAAV,KAAA,CAAAb,IAAA,CAAAwB,MAAA,YAAAC,QAAA;cACA;cACAZ,KAAA,CAAAf,eAAA,GAAA2B,QAAA;YACA;UAAA;UAAA;YAAA,OAAAL,QAAA,CAAAM,IAAA;QAAA;MAAA,GAAAT,OAAA;IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}