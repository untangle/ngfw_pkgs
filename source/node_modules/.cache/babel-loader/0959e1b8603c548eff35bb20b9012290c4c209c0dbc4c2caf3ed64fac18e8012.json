{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport { VSnackbar, VBtn } from 'vuetify/lib';\nexport default {\n  components: {\n    VSnackbar: VSnackbar,\n    VBtn: VBtn\n  },\n  props: {\n    // the id of the toast message, used for removing the toast from the store\n    id: {\n      type: Number,\n      required: true\n    },\n    // the backgroud color for the toast background. Can have any color or some presets like: success, info, error, etc.\n    color: {\n      type: String,\n      required: false,\n      \"default\": 'info'\n    },\n    // used to display the text multi-line (useful for mobile )\n    mode: {\n      type: String,\n      required: false,\n      \"default\": ''\n    },\n    // flag to show/hide the toast\n    showDialog: {\n      type: Boolean,\n      required: true\n    },\n    // the text to display in the toast\n    text: {\n      type: String,\n      required: true\n    },\n    // sets how much the toast is visible\n    timeout: {\n      type: Number,\n      required: false,\n      \"default\": 5000\n    },\n    // used for the toast position, on the X axis. Possible values: left, right\n    x: {\n      type: String,\n      required: false,\n      \"default\": null\n    },\n    // used for the toast position, on the Y axis. Possible values: top, bottom\n    y: {\n      type: String,\n      required: false,\n      \"default\": 'top'\n    }\n  },\n  data: function data() {\n    return {\n      visible: true\n    };\n  },\n  watch: {\n    // watcher for visible attribute - when toast expires, it sets visible to false - need to pass that to the parent as well\n    visible: function visible() {\n      if (!this.visible) {\n        this.closeDialog();\n      }\n    },\n    showDialog: function showDialog() {\n      this.visible = this.showDialog;\n    }\n  },\n  methods: {\n    closeDialog: function closeDialog() {\n      this.$emit('close-dialog', this.id);\n    }\n  }\n};","map":{"version":3,"names":["VSnackbar","VBtn","components","props","id","type","Number","required","color","String","mode","showDialog","Boolean","text","timeout","x","y","data","visible","watch","closeDialog","methods","$emit"],"sources":["node_modules/vuntangle/src/framework/UToast/UToastMessage.vue"],"sourcesContent":["<template>\n  <v-snackbar\n    :value=\"visible\"\n    :bottom=\"y === 'bottom'\"\n    :color=\"color\"\n    :left=\"x === 'left'\"\n    :multi-line=\"mode === 'multi-line'\"\n    :right=\"x === 'right'\"\n    :timeout=\"timeout\"\n    :top=\"y === 'top'\"\n    :vertical=\"mode === 'vertical'\"\n    absolute\n    @input=\"closeDialog\"\n  >\n    <div class=\"toast-message\" v-html=\"text\" />\n    <template #action=\"{ attrs }\">\n      <v-btn dark text v-bind=\"attrs\" @click=\"closeDialog\">{{ $vuntangle.$t('close') }}</v-btn>\n    </template>\n  </v-snackbar>\n</template>\n<script>\n  import { VSnackbar, VBtn } from 'vuetify/lib'\n\n  export default {\n    components: { VSnackbar, VBtn },\n    props: {\n      // the id of the toast message, used for removing the toast from the store\n      id: { type: Number, required: true },\n      // the backgroud color for the toast background. Can have any color or some presets like: success, info, error, etc.\n      color: { type: String, required: false, default: 'info' },\n      // used to display the text multi-line (useful for mobile )\n      mode: { type: String, required: false, default: '' },\n      // flag to show/hide the toast\n      showDialog: { type: Boolean, required: true },\n      // the text to display in the toast\n      text: { type: String, required: true },\n      // sets how much the toast is visible\n      timeout: { type: Number, required: false, default: 5000 },\n      // used for the toast position, on the X axis. Possible values: left, right\n      x: { type: String, required: false, default: null },\n      // used for the toast position, on the Y axis. Possible values: top, bottom\n      y: { type: String, required: false, default: 'top' },\n    },\n    data() {\n      return {\n        visible: true,\n      }\n    },\n    watch: {\n      // watcher for visible attribute - when toast expires, it sets visible to false - need to pass that to the parent as well\n      visible() {\n        if (!this.visible) {\n          this.closeDialog()\n        }\n      },\n      showDialog() {\n        this.visible = this.showDialog\n      },\n    },\n    methods: {\n      closeDialog() {\n        this.$emit('close-dialog', this.id)\n      },\n    },\n  }\n</script>\n<style lang=\"scss\">\n  .toast-message {\n    min-width: 300px;\n    white-space: pre-line;\n  }\n</style>\n"],"mappings":";AAqBA,SAAAA,SAAA,EAAAC,IAAA;AAEA;EACAC,UAAA;IAAAF,SAAA,EAAAA,SAAA;IAAAC,IAAA,EAAAA;EAAA;EACAE,KAAA;IACA;IACAC,EAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;IACA;IACAC,KAAA;MAAAH,IAAA,EAAAI,MAAA;MAAAF,QAAA;MAAA;IAAA;IACA;IACAG,IAAA;MAAAL,IAAA,EAAAI,MAAA;MAAAF,QAAA;MAAA;IAAA;IACA;IACAI,UAAA;MAAAN,IAAA,EAAAO,OAAA;MAAAL,QAAA;IAAA;IACA;IACAM,IAAA;MAAAR,IAAA,EAAAI,MAAA;MAAAF,QAAA;IAAA;IACA;IACAO,OAAA;MAAAT,IAAA,EAAAC,MAAA;MAAAC,QAAA;MAAA;IAAA;IACA;IACAQ,CAAA;MAAAV,IAAA,EAAAI,MAAA;MAAAF,QAAA;MAAA;IAAA;IACA;IACAS,CAAA;MAAAX,IAAA,EAAAI,MAAA;MAAAF,QAAA;MAAA;IAAA;EACA;EACAU,IAAA,WAAAA,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,KAAA;IACA;IACAD,OAAA,WAAAA,QAAA;MACA,UAAAA,OAAA;QACA,KAAAE,WAAA;MACA;IACA;IACAT,UAAA,WAAAA,WAAA;MACA,KAAAO,OAAA,QAAAP,UAAA;IACA;EACA;EACAU,OAAA;IACAD,WAAA,WAAAA,YAAA;MACA,KAAAE,KAAA,sBAAAlB,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}