{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { VRow, VCol, VCheckbox } from 'vuetify/lib';\nimport StatusAnalyzerInfo from '../ipsec/StatusAnalyzerInfo.vue';\nimport { MTU_VALUES } from '../constants';\nimport mixin from '../mixin';\nexport default {\n  components: {\n    VCheckbox: VCheckbox,\n    VRow: VRow,\n    VCol: VCol,\n    StatusAnalyzerInfo: StatusAnalyzerInfo\n  },\n  mixins: [mixin],\n  inject: ['$intf', '$status', '$interfaces'],\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    interfaces: function interfaces(_ref2) {\n      var $interfaces = _ref2.$interfaces;\n      return $interfaces();\n    },\n    status: function status(_ref3) {\n      var $status = _ref3.$status;\n      return $status();\n    },\n    isMtuDisabled: function isMtuDisabled(_ref4) {\n      var intf = _ref4.intf;\n      return intf.type === 'VLAN';\n    },\n    parentInterface: function parentInterface(_ref5) {\n      var intf = _ref5.intf,\n        interfaces = _ref5.interfaces;\n      return interfaces.find(function (iface) {\n        return iface.interfaceId === intf.boundInterfaceId;\n      });\n    },\n    /** computes duplex options (`full`, `half`) based on interface status supported link */\n    duplexOptions: function duplexOptions(_ref6) {\n      var status = _ref6.status;\n      if (!status || !status.ethLinkSupported) return [];\n      var options = [];\n      var initials = [];\n      status.ethLinkSupported.forEach(function (link) {\n        var i = link.slice(-1); // `F` or `H`\n        if (!initials.includes(i)) {\n          initials.push(i);\n        }\n      });\n      initials.forEach(function (i) {\n        if (i === 'H') options.push({\n          value: 'half',\n          text: 'half'\n        });\n        if (i === 'F') options.push({\n          value: 'full',\n          text: 'full'\n        });\n      });\n      return options;\n    },\n    /** computes speed options (10, 100, 1000 ...) based on interface status supported link */\n    speedOptions: function speedOptions(_ref7) {\n      var status = _ref7.status;\n      if (!status || !status.ethLinkSupported) return [];\n      var options = [];\n      var speeds = [];\n      status.ethLinkSupported.forEach(function (link) {\n        var s = parseInt(link, 10);\n        if (!speeds.includes(s)) {\n          speeds.push(s);\n        }\n      });\n      speeds.forEach(function (s) {\n        options.push({\n          value: s,\n          text: s\n        });\n      });\n      return options;\n    },\n    mtu: {\n      get: function get(_ref8) {\n        var intf = _ref8.intf,\n          parentInterface = _ref8.parentInterface;\n        return intf.type === 'VLAN' ? (parentInterface === null || parentInterface === void 0 ? void 0 : parentInterface.mtu) || MTU_VALUES.DEFAULT : intf.mtu || MTU_VALUES.DEFAULT;\n      },\n      set: function set(value) {\n        this.$set(this.intf, 'mtu', parseInt(value));\n      }\n    },\n    routeMtu: {\n      get: function get(_ref9) {\n        var intf = _ref9.intf,\n          parentInterface = _ref9.parentInterface;\n        return intf.type === 'VLAN' ? !!(parentInterface !== null && parentInterface !== void 0 && parentInterface.routeMtu) : !!intf.routeMtu;\n      },\n      set: function set(value) {\n        if (value && (this.mtu < MTU_VALUES.MIN || this.mtu > MTU_VALUES.MAX)) {\n          this.mtu = MTU_VALUES.DEFAULT;\n        }\n        this.$set(this.intf, 'routeMtu', value);\n      }\n    },\n    mtuRules: function mtuRules(_ref10) {\n      var routeMtu = _ref10.routeMtu;\n      return !routeMtu ? {\n        required: true,\n        min_value: MTU_VALUES.MIN,\n        max_value: MTU_VALUES.MAX\n      } : null;\n    }\n  },\n  methods: {\n    preventEKey: function preventEKey(event) {\n      // Define the allowed keys\n      var allowedKeys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'Backspace', 'Shift', 'ArrowLeft', 'ArrowRight'];\n\n      // Check if the pressed key is in the list of allowed keys\n      if (!allowedKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","VCheckbox","StatusAnalyzerInfo","MTU_VALUES","mixin","components","mixins","inject","computed","intf","_ref","$intf","interfaces","_ref2","$interfaces","status","_ref3","$status","isMtuDisabled","_ref4","type","parentInterface","_ref5","find","iface","interfaceId","boundInterfaceId","duplexOptions","_ref6","ethLinkSupported","options","initials","forEach","link","i","slice","includes","push","value","text","speedOptions","_ref7","speeds","s","parseInt","mtu","get","_ref8","DEFAULT","set","$set","routeMtu","_ref9","MIN","MAX","mtuRules","_ref10","required","min_value","max_value","methods","preventEKey","event","allowedKeys","key","preventDefault"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/advanced/Advanced.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-if=\"showNICOptions\" class=\"mt-4\">\n      <h4 class=\"mb-4\">{{ $vuntangle.$t('nic_options') }}</h4>\n      <p v-if=\"status\" v-html=\"$vuntangle.$t('interface_advanced_status', [status.ethSpeed, status.ethDuplex])\" />\n\n      <v-checkbox v-model=\"intf.ethAutoneg\" :label=\"$vuntangle.$t('auto_negotiation')\" />\n\n      <v-row v-if=\"status\">\n        <v-col>\n          <u-select\n            v-model=\"intf.ethSpeed\"\n            :items=\"speedOptions\"\n            :label=\"$vuntangle.$t('link_speed')\"\n            suffix=\"Mbps\"\n            :disabled=\"intf.ethAutoneg\"\n          />\n        </v-col>\n        <v-col>\n          <u-select\n            v-model=\"intf.ethDuplex\"\n            :items=\"duplexOptions\"\n            :label=\"$vuntangle.$t('duplex_mode')\"\n            :disabled=\"intf.ethAutoneg\"\n          />\n        </v-col>\n      </v-row>\n    </div>\n    <div class=\"mt-4\">\n      <p class=\"font-weight-bold mb-4\">{{ $vuntangle.$t('maximum_transmission_unit') }}</p>\n      <div>\n        <u-alert v-if=\"isMtuDisabled\" info class=\"mt-4 mb-4\">\n          <span v-html=\"$vuntangle.$t('mtu_settings_edit')\"></span>\n        </u-alert>\n      </div>\n\n      <v-row class=\"align-center\">\n        <v-col cols=\"2\">\n          <u-checkbox\n            v-model=\"routeMtu\"\n            :disabled=\"isMtuDisabled\"\n            :label=\"$vuntangle.$t('use_route_mtu')\"\n            hide-details\n            class=\"ma-0 mr-2\"\n          />\n        </v-col>\n        <v-col cols=\"3\">\n          <ValidationProvider v-slot=\"{ errors }\" :rules=\"mtuRules\">\n            <u-text-field\n              v-model=\"mtu\"\n              :label=\"$vuntangle.$t('mtu')\"\n              :disabled=\"isMtuDisabled || routeMtu\"\n              type=\"number\"\n              :suffix=\"$vuntangle.$t('bytes')\"\n              :error-messages=\"errors\"\n              @keydown=\"preventEKey\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </div>\n    <status-analyzer-info v-if=\"intf.interfaceId && intf.wan\" :interface-id=\"intf.interfaceId\" class=\"mt-4\" />\n  </div>\n</template>\n<script>\n  import { VRow, VCol, VCheckbox } from 'vuetify/lib'\n  import StatusAnalyzerInfo from '../ipsec/StatusAnalyzerInfo.vue'\n  import { MTU_VALUES } from '../constants'\n  import mixin from '../mixin'\n\n  export default {\n    components: { VCheckbox, VRow, VCol, StatusAnalyzerInfo },\n    mixins: [mixin],\n    inject: ['$intf', '$status', '$interfaces'],\n\n    computed: {\n      intf: ({ $intf }) => $intf(),\n      interfaces: ({ $interfaces }) => $interfaces(),\n      status: ({ $status }) => $status(),\n\n      isMtuDisabled: ({ intf }) => intf.type === 'VLAN',\n      parentInterface: ({ intf, interfaces }) => interfaces.find(iface => iface.interfaceId === intf.boundInterfaceId),\n\n      /** computes duplex options (`full`, `half`) based on interface status supported link */\n      duplexOptions: ({ status }) => {\n        if (!status || !status.ethLinkSupported) return []\n\n        const options = []\n        const initials = []\n\n        status.ethLinkSupported.forEach(link => {\n          const i = link.slice(-1) // `F` or `H`\n          if (!initials.includes(i)) {\n            initials.push(i)\n          }\n        })\n\n        initials.forEach(i => {\n          if (i === 'H') options.push({ value: 'half', text: 'half' })\n          if (i === 'F') options.push({ value: 'full', text: 'full' })\n        })\n        return options\n      },\n\n      /** computes speed options (10, 100, 1000 ...) based on interface status supported link */\n      speedOptions: ({ status }) => {\n        if (!status || !status.ethLinkSupported) return []\n\n        const options = []\n        const speeds = []\n\n        status.ethLinkSupported.forEach(link => {\n          const s = parseInt(link, 10)\n          if (!speeds.includes(s)) {\n            speeds.push(s)\n          }\n        })\n        speeds.forEach(s => {\n          options.push({ value: s, text: s })\n        })\n        return options\n      },\n      mtu: {\n        get: ({ intf, parentInterface }) =>\n          intf.type === 'VLAN' ? parentInterface?.mtu || MTU_VALUES.DEFAULT : intf.mtu || MTU_VALUES.DEFAULT,\n        set(value) {\n          this.$set(this.intf, 'mtu', parseInt(value))\n        },\n      },\n      routeMtu: {\n        get: ({ intf, parentInterface }) => (intf.type === 'VLAN' ? !!parentInterface?.routeMtu : !!intf.routeMtu),\n        set(value) {\n          if (value && (this.mtu < MTU_VALUES.MIN || this.mtu > MTU_VALUES.MAX)) {\n            this.mtu = MTU_VALUES.DEFAULT\n          }\n          this.$set(this.intf, 'routeMtu', value)\n        },\n      },\n      mtuRules: ({ routeMtu }) =>\n        !routeMtu ? { required: true, min_value: MTU_VALUES.MIN, max_value: MTU_VALUES.MAX } : null,\n    },\n\n    methods: {\n      preventEKey(event) {\n        // Define the allowed keys\n        const allowedKeys = [\n          '0',\n          '1',\n          '2',\n          '3',\n          '4',\n          '5',\n          '6',\n          '7',\n          '8',\n          '9',\n          'Backspace',\n          'Shift',\n          'ArrowLeft',\n          'ArrowRight',\n        ]\n\n        // Check if the pressed key is in the list of allowed keys\n        if (!allowedKeys.includes(event.key)) {\n          event.preventDefault()\n        }\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}