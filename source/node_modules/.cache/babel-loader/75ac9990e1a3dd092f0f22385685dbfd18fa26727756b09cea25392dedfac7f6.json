{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { VDataTable, VSimpleCheckbox, VBtn, VIcon, VRow, VCol, VCombobox } from 'vuetify/lib';\nimport cloneDeep from 'lodash/cloneDeep';\nimport defaults from '../../defaults';\nexport default {\n  components: {\n    VDataTable: VDataTable,\n    VSimpleCheckbox: VSimpleCheckbox,\n    VBtn: VBtn,\n    VIcon: VIcon,\n    VRow: VRow,\n    VCol: VCol,\n    VCombobox: VCombobox\n  },\n  props: {\n    options: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    var _this$options;\n    return {\n      adding: false,\n      // boolean telling to show the add fields\n      dhcpOptions: defaults.dhcp_options,\n      dhcpOption: null,\n      dhcpValue: null,\n      list: (_this$options = this.options) !== null && _this$options !== void 0 && _this$options.length ? cloneDeep(this.options) : []\n    };\n  },\n  computed: {\n    // use prefix number if it exists, otherwise use empty string\n    valuePrefix: function valuePrefix() {\n      return this.dhcpOption ? this.dhcpOption.value ? this.dhcpOption.value + ',' : '' : null;\n    },\n    headers: function headers() {\n      return [{\n        text: this.$t('description'),\n        value: 'description',\n        sortable: false\n      }, {\n        text: this.$t('value'),\n        value: 'value',\n        sortable: false\n      }, {\n        text: this.$t('enabled'),\n        align: 'center',\n        value: 'enabled',\n        sortable: false,\n        width: 60\n      }, {\n        text: this.$t('remove'),\n        align: 'center',\n        value: 'delete',\n        sortable: false,\n        width: 60\n      }];\n    }\n  },\n  watch: {\n    adding: function adding(value) {\n      if (!value) {\n        // reset\n        this.dhcpOption = null;\n        this.dhcpValue = null;\n      }\n    },\n    list: {\n      deep: true,\n      handler: function handler(newList) {\n        this.$emit('update:options', newList);\n      }\n    }\n  },\n  methods: {\n    onAddOption: function onAddOption() {\n      var value;\n      var description;\n      // if dhcpOption is a string, use user provided input,\n      // otherwise use template values\n      if (typeof this.dhcpOption === 'string') {\n        description = this.dhcpOption;\n        value = this.dhcpValue;\n      } else {\n        description = this.dhcpOption.text;\n        value = \"\".concat(this.dhcpOption.value, \",\").concat(this.dhcpValue);\n      }\n      this.list.push({\n        description: description,\n        value: value,\n        enabled: true\n      });\n      this.adding = false;\n    }\n  }\n};","map":{"version":3,"names":["VDataTable","VSimpleCheckbox","VBtn","VIcon","VRow","VCol","VCombobox","cloneDeep","defaults","components","props","options","type","Array","default","data","_this$options","adding","dhcpOptions","dhcp_options","dhcpOption","dhcpValue","list","length","computed","valuePrefix","value","headers","text","$t","sortable","align","width","watch","deep","handler","newList","$emit","methods","onAddOption","description","concat","push","enabled"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/dhcp/DhcpOptions.vue"],"sourcesContent":["<template>\n  <div>\n    <p class=\"font-weight-bold mt-6 mb-2\">{{ $t('dhcp_options') }}</p>\n\n    <em v-if=\"!list || !list.length\" class=\"mr-2\">{{ $t('no_options') }}</em>\n    <v-data-table\n      v-if=\"list && list.length\"\n      dense\n      :headers=\"headers\"\n      :items=\"list\"\n      hide-default-footer\n      calculate-widths\n      class=\"mb-2\"\n    >\n      <template #[`item.enabled`]=\"{ item }\">\n        <v-simple-checkbox v-model=\"item.enabled\" color=\"primary\" hide-details class=\"ma-0\" :ripple=\"false\" />\n      </template>\n      <template #[`item.delete`]=\"{ index }\">\n        <v-btn icon small color=\"red darken-2\" @click=\"list.splice(index, 1)\"><v-icon>mdi-delete</v-icon></v-btn>\n      </template>\n    </v-data-table>\n\n    <u-btn v-if=\"!adding\" x-small :small=\"false\" :min-width=\"null\" rounded @click=\"adding = true\">\n      {{ $t('add_option') }}\n    </u-btn>\n\n    <ValidationObserver v-slot=\"{ passes }\" tag=\"div\">\n      <v-row v-if=\"adding\" no-gutters align=\"center\" class=\"mt-2\">\n        <!-- <v-col class=\"shrink\">\n          <v-checkbox v-model=\"option.enabled\" class=\"ml-2\" />\n        </v-col> -->\n        <v-col class=\"grow\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <v-combobox\n              v-model=\"dhcpOption\"\n              :items=\"dhcpOptions\"\n              dense\n              outlined\n              hide-details\n              return-object\n              :label=\"$t('select_option')\"\n              class=\"mr-2\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </v-combobox>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"4\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-text-field\n              v-model=\"dhcpValue\"\n              :label=\"$t('value')\"\n              :error-messages=\"errors\"\n              :prefix=\"valuePrefix\"\n              :disabled=\"valuePrefix == null\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col class=\"shrink\">\n          <u-btn icon :small=\"false\" :min-width=\"null\" class=\"mx-2\" @click=\"passes(onAddOption)\">\n            <v-icon>mdi-check</v-icon>\n          </u-btn>\n        </v-col>\n        <v-col class=\"shrink\">\n          <u-btn icon :small=\"false\" :min-width=\"null\" @click=\"adding = false\"><v-icon>mdi-close</v-icon></u-btn>\n        </v-col>\n      </v-row>\n    </ValidationObserver>\n  </div>\n</template>\n<script>\n  import { VDataTable, VSimpleCheckbox, VBtn, VIcon, VRow, VCol, VCombobox } from 'vuetify/lib'\n  import cloneDeep from 'lodash/cloneDeep'\n  import defaults from '../../defaults'\n\n  export default {\n    components: { VDataTable, VSimpleCheckbox, VBtn, VIcon, VRow, VCol, VCombobox },\n    props: {\n      options: { type: Array, default: () => [] },\n    },\n    data() {\n      return {\n        adding: false, // boolean telling to show the add fields\n        dhcpOptions: defaults.dhcp_options,\n\n        dhcpOption: null,\n        dhcpValue: null,\n        list: this.options?.length ? cloneDeep(this.options) : [],\n      }\n    },\n    computed: {\n      // use prefix number if it exists, otherwise use empty string\n      valuePrefix() {\n        return this.dhcpOption ? (this.dhcpOption.value ? this.dhcpOption.value + ',' : '') : null\n      },\n      headers() {\n        return [\n          { text: this.$t('description'), value: 'description', sortable: false },\n          { text: this.$t('value'), value: 'value', sortable: false },\n          { text: this.$t('enabled'), align: 'center', value: 'enabled', sortable: false, width: 60 },\n          { text: this.$t('remove'), align: 'center', value: 'delete', sortable: false, width: 60 },\n        ]\n      },\n    },\n    watch: {\n      adding(value) {\n        if (!value) {\n          // reset\n          this.dhcpOption = null\n          this.dhcpValue = null\n        }\n      },\n      list: {\n        deep: true,\n        handler(newList) {\n          this.$emit('update:options', newList)\n        },\n      },\n    },\n    methods: {\n      onAddOption() {\n        let value\n        let description\n        // if dhcpOption is a string, use user provided input,\n        // otherwise use template values\n        if (typeof this.dhcpOption === 'string') {\n          description = this.dhcpOption\n          value = this.dhcpValue\n        } else {\n          description = this.dhcpOption.text\n          value = `${this.dhcpOption.value},${this.dhcpValue}`\n        }\n        this.list.push({\n          description,\n          value,\n          enabled: true,\n        })\n        this.adding = false\n      },\n    },\n  }\n</script>\n"],"mappings":";;AA0EA,SAAAA,UAAA,EAAAC,eAAA,EAAAC,IAAA,EAAAC,KAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,SAAA;AACA,OAAAC,SAAA;AACA,OAAAC,QAAA;AAEA;EACAC,UAAA;IAAAT,UAAA,EAAAA,UAAA;IAAAC,eAAA,EAAAA,eAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,KAAA,EAAAA,KAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,SAAA,EAAAA;EAAA;EACAI,KAAA;IACAC,OAAA;MAAAC,IAAA,EAAAC,KAAA;MAAA,oBAAAC,SAAA;QAAA;MAAA;IAAA;EACA;EACAC,IAAA,WAAAA,KAAA;IAAA,IAAAC,aAAA;IACA;MACAC,MAAA;MAAA;MACAC,WAAA,EAAAV,QAAA,CAAAW,YAAA;MAEAC,UAAA;MACAC,SAAA;MACAC,IAAA,GAAAN,aAAA,QAAAL,OAAA,cAAAK,aAAA,eAAAA,aAAA,CAAAO,MAAA,GAAAhB,SAAA,MAAAI,OAAA;IACA;EACA;EACAa,QAAA;IACA;IACAC,WAAA,WAAAA,YAAA;MACA,YAAAL,UAAA,QAAAA,UAAA,CAAAM,KAAA,QAAAN,UAAA,CAAAM,KAAA;IACA;IACAC,OAAA,WAAAA,QAAA;MACA,QACA;QAAAC,IAAA,OAAAC,EAAA;QAAAH,KAAA;QAAAI,QAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAH,KAAA;QAAAI,QAAA;MAAA,GACA;QAAAF,IAAA,OAAAC,EAAA;QAAAE,KAAA;QAAAL,KAAA;QAAAI,QAAA;QAAAE,KAAA;MAAA,GACA;QAAAJ,IAAA,OAAAC,EAAA;QAAAE,KAAA;QAAAL,KAAA;QAAAI,QAAA;QAAAE,KAAA;MAAA,EACA;IACA;EACA;EACAC,KAAA;IACAhB,MAAA,WAAAA,OAAAS,KAAA;MACA,KAAAA,KAAA;QACA;QACA,KAAAN,UAAA;QACA,KAAAC,SAAA;MACA;IACA;IACAC,IAAA;MACAY,IAAA;MACAC,OAAA,WAAAA,QAAAC,OAAA;QACA,KAAAC,KAAA,mBAAAD,OAAA;MACA;IACA;EACA;EACAE,OAAA;IACAC,WAAA,WAAAA,YAAA;MACA,IAAAb,KAAA;MACA,IAAAc,WAAA;MACA;MACA;MACA,gBAAApB,UAAA;QACAoB,WAAA,QAAApB,UAAA;QACAM,KAAA,QAAAL,SAAA;MACA;QACAmB,WAAA,QAAApB,UAAA,CAAAQ,IAAA;QACAF,KAAA,MAAAe,MAAA,MAAArB,UAAA,CAAAM,KAAA,OAAAe,MAAA,MAAApB,SAAA;MACA;MACA,KAAAC,IAAA,CAAAoB,IAAA;QACAF,WAAA,EAAAA,WAAA;QACAd,KAAA,EAAAA,KAAA;QACAiB,OAAA;MACA;MACA,KAAA1B,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}