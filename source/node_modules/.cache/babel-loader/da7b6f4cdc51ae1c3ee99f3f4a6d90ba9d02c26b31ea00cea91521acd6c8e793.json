{"ast":null,"code":"import _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { VSpacer } from 'vuetify/lib';\nimport cloneDeep from 'lodash/cloneDeep';\nimport UGrid from '../../../components/UGrid/UGrid.vue';\nimport NetworkDialog from './NetworkDialog.vue';\nvar actionButtonColumn = {\n  width: 30,\n  flex: 0,\n  resizable: false,\n  sortable: false,\n  suppressMenu: true,\n  cellRenderer: 'ActionButton'\n};\nexport default {\n  components: {\n    VSpacer: VSpacer,\n    UGrid: UGrid\n  },\n  props: {\n    settings: {\n      type: Object,\n      \"default\": function _default() {}\n    }\n  },\n  computed: {\n    columnDefs: function columnDefs() {\n      var _this = this;\n      return [{\n        headerName: this.$t('network'),\n        field: 'address'\n      }, {\n        headerName: this.$t('description'),\n        field: 'description'\n      }, _objectSpread(_objectSpread({}, actionButtonColumn), {}, {\n        cellRendererParams: {\n          icon: 'mdi-pencil',\n          small: true,\n          click: function click(_ref) {\n            var node = _ref.node;\n            return _this.onEditNetwork(node.id);\n          }\n        }\n      }), _objectSpread(_objectSpread({}, actionButtonColumn), {}, {\n        cellRendererParams: {\n          icon: 'mdi-delete',\n          small: true,\n          click: function click(_ref2) {\n            var node = _ref2.node;\n            return _this.onRemoveNetwork(node.id);\n          }\n        }\n      })];\n    }\n  },\n  methods: {\n    onEditNetwork: function onEditNetwork() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.$vuntangle.dialog.show({\n        title: index === null ? this.$t('add_network') : this.$t('edit_network'),\n        component: NetworkDialog,\n        actionLabel: index === null ? this.$t('add') : this.$t('update'),\n        width: 600,\n        componentProps: {\n          settings: this.settings,\n          index: index\n        }\n      });\n    },\n    onRemoveNetwork: function onRemoveNetwork(index) {\n      var networksCopy = cloneDeep(this.settings.passedNetworks);\n      networksCopy.splice(index, 1);\n      this.$set(this.settings, 'passedNetworks', networksCopy);\n    }\n  }\n};","map":{"version":3,"names":["VSpacer","cloneDeep","UGrid","NetworkDialog","actionButtonColumn","width","flex","resizable","sortable","suppressMenu","cellRenderer","components","props","settings","type","Object","default","computed","columnDefs","_this","headerName","$t","field","_objectSpread","cellRendererParams","icon","small","click","_ref","node","onEditNetwork","id","_ref2","onRemoveNetwork","methods","index","arguments","length","undefined","$vuntangle","dialog","show","title","component","actionLabel","componentProps","networksCopy","passedNetworks","splice","$set"],"sources":["node_modules/vuntangle/src/shared/SettingsGeoipFilter/components/PassNetworks.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex flex-column flex-grow-1\">\n    <h3 class=\"d-flex\">\n      <span>{{ $t('pass_networks') }}</span>\n      <v-spacer />\n      <u-btn :min-width=\"null\" @click=\"onEditNetwork(null)\">{{ $t('add_network') }}</u-btn>\n    </h3>\n\n    <p>{{ $t('pass_networks_description') }}</p>\n\n    <u-grid\n      v-if=\"settings.passedNetworks.length\"\n      id=\"pass-networks\"\n      :enable-export-csv=\"false\"\n      :enable-quick-filter=\"false\"\n      :enable-refresh=\"false\"\n      :row-data=\"settings.passedNetworks\"\n      :column-defs=\"columnDefs\"\n      toolbar=\"none\"\n    />\n\n    <div v-else class=\"text-center\">\n      <p class=\"body-1 mt-12\"><v-icon dense class=\"mr-2\">mdi-information</v-icon>{{ $t('no_networks') }}</p>\n    </div>\n  </div>\n</template>\n<script>\n  import { VSpacer } from 'vuetify/lib'\n  import cloneDeep from 'lodash/cloneDeep'\n  import UGrid from '../../../components/UGrid/UGrid.vue'\n  import NetworkDialog from './NetworkDialog.vue'\n\n  const actionButtonColumn = {\n    width: 30,\n    flex: 0,\n    resizable: false,\n    sortable: false,\n    suppressMenu: true,\n    cellRenderer: 'ActionButton',\n  }\n\n  export default {\n    components: {\n      VSpacer,\n      UGrid,\n    },\n    props: {\n      settings: { type: Object, default: () => {} },\n    },\n    computed: {\n      columnDefs() {\n        return [\n          { headerName: this.$t('network'), field: 'address' },\n          { headerName: this.$t('description'), field: 'description' },\n          {\n            ...actionButtonColumn,\n            cellRendererParams: {\n              icon: 'mdi-pencil',\n              small: true,\n              click: ({ node }) => this.onEditNetwork(node.id),\n            },\n          },\n          {\n            ...actionButtonColumn,\n            cellRendererParams: {\n              icon: 'mdi-delete',\n              small: true,\n              click: ({ node }) => this.onRemoveNetwork(node.id),\n            },\n          },\n        ]\n      },\n    },\n    methods: {\n      onEditNetwork(index = null) {\n        this.$vuntangle.dialog.show({\n          title: index === null ? this.$t('add_network') : this.$t('edit_network'),\n          component: NetworkDialog,\n          actionLabel: index === null ? this.$t('add') : this.$t('update'),\n          width: 600,\n          componentProps: {\n            settings: this.settings,\n            index,\n          },\n        })\n      },\n      onRemoveNetwork(index) {\n        const networksCopy = cloneDeep(this.settings.passedNetworks)\n        networksCopy.splice(index, 1)\n\n        this.$set(this.settings, 'passedNetworks', networksCopy)\n      },\n    },\n  }\n</script>\n"],"mappings":";;AA2BA,SAAAA,OAAA;AACA,OAAAC,SAAA;AACA,OAAAC,KAAA;AACA,OAAAC,aAAA;AAEA,IAAAC,kBAAA;EACAC,KAAA;EACAC,IAAA;EACAC,SAAA;EACAC,QAAA;EACAC,YAAA;EACAC,YAAA;AACA;AAEA;EACAC,UAAA;IACAX,OAAA,EAAAA,OAAA;IACAE,KAAA,EAAAA;EACA;EACAU,KAAA;IACAC,QAAA;MAAAC,IAAA,EAAAC,MAAA;MAAA,oBAAAC,SAAA;IAAA;EACA;EACAC,QAAA;IACAC,UAAA,WAAAA,WAAA;MAAA,IAAAC,KAAA;MACA,QACA;QAAAC,UAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,UAAA,OAAAC,EAAA;QAAAC,KAAA;MAAA,GAAAC,aAAA,CAAAA,aAAA,KAEAnB,kBAAA;QACAoB,kBAAA;UACAC,IAAA;UACAC,KAAA;UACAC,KAAA,WAAAA,MAAAC,IAAA;YAAA,IAAAC,IAAA,GAAAD,IAAA,CAAAC,IAAA;YAAA,OAAAV,KAAA,CAAAW,aAAA,CAAAD,IAAA,CAAAE,EAAA;UAAA;QACA;MAAA,IAAAR,aAAA,CAAAA,aAAA,KAGAnB,kBAAA;QACAoB,kBAAA;UACAC,IAAA;UACAC,KAAA;UACAC,KAAA,WAAAA,MAAAK,KAAA;YAAA,IAAAH,IAAA,GAAAG,KAAA,CAAAH,IAAA;YAAA,OAAAV,KAAA,CAAAc,eAAA,CAAAJ,IAAA,CAAAE,EAAA;UAAA;QACA;MAAA,GAEA;IACA;EACA;EACAG,OAAA;IACAJ,aAAA,WAAAA,cAAA;MAAA,IAAAK,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;MACA,KAAAG,UAAA,CAAAC,MAAA,CAAAC,IAAA;QACAC,KAAA,EAAAP,KAAA,iBAAAd,EAAA,uBAAAA,EAAA;QACAsB,SAAA,EAAAxC,aAAA;QACAyC,WAAA,EAAAT,KAAA,iBAAAd,EAAA,eAAAA,EAAA;QACAhB,KAAA;QACAwC,cAAA;UACAhC,QAAA,OAAAA,QAAA;UACAsB,KAAA,EAAAA;QACA;MACA;IACA;IACAF,eAAA,WAAAA,gBAAAE,KAAA;MACA,IAAAW,YAAA,GAAA7C,SAAA,MAAAY,QAAA,CAAAkC,cAAA;MACAD,YAAA,CAAAE,MAAA,CAAAb,KAAA;MAEA,KAAAc,IAAA,MAAApC,QAAA,oBAAAiC,YAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}