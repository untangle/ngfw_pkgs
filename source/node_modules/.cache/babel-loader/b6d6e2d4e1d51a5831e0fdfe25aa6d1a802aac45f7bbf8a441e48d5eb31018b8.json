{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n// import vuetify components\nimport { VContainer, VSpacer, VDivider } from 'vuetify/lib';\nimport isEqual from 'lodash/isEqual';\nimport CheckboxRenderer from '../../components/UGrid/renderers/CheckboxRenderer.vue';\nimport settingsMixin from '../settingsMixin';\nimport StaticRouteEdit from './StaticRouteEdit.vue';\nimport RoutingTable from './RoutingTable.vue';\nimport { settingsDefaults as defaults } from './defaults';\nexport default {\n  components: {\n    VContainer: VContainer,\n    VSpacer: VSpacer,\n    VDivider: VDivider\n  },\n  mixins: [settingsMixin],\n  defaults: defaults,\n  props: {\n    interfaces: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      settingsCopy: [],\n      selection: [],\n      frameworkComponents: {\n        CheckboxRenderer: CheckboxRenderer\n      }\n    };\n  },\n  computed: {\n    columnDefs: function columnDefs(_ref) {\n      var $i18n = _ref.$i18n,\n        interfaceName = _ref.interfaceName;\n      return [{\n        headerName: $i18n.t('description'),\n        field: 'description'\n      }, {\n        headerName: $i18n.t('network'),\n        field: 'network'\n      }, {\n        headerName: $i18n.t('next_hop'),\n        field: 'nextHop'\n      }, {\n        headerName: $i18n.t('interface'),\n        field: 'interfaceId',\n        valueFormatter: function valueFormatter(_ref2) {\n          var data = _ref2.data;\n          return interfaceName(data.interfaceId);\n        }\n      }, {\n        headerName: $i18n.t('metric'),\n        field: 'metric'\n      }, {\n        headerName: $i18n.t('enabled'),\n        field: 'enabled',\n        minWidth: 50,\n        width: 80,\n        flex: 0,\n        sortable: true,\n        cellRenderer: 'CheckboxRenderer'\n      }];\n    },\n    /** computes grid no data message based on records number & visibility/filter */\n    noDataMessage: function noDataMessage(_ref3) {\n      var settingsCopy = _ref3.settingsCopy,\n        $i18n = _ref3.$i18n;\n      return settingsCopy.length > 0 ? $i18n.t('no_route_meets_filter') : $i18n.t('no_routes_defined');\n    }\n  },\n  methods: {\n    // render interface name based on route interface id\n    interfaceName: function interfaceName(id) {\n      var intf = this.interfaces.find(function (intf) {\n        return intf.interfaceId === id;\n      });\n      return intf ? intf.name : '';\n    },\n    // deselect all and show edit dialog\n    onEditRoute: function onEditRoute(_ref4) {\n      var data = _ref4.data;\n      var realIndex = this.settingsCopy.findIndex(function (route) {\n        return isEqual(route, data);\n      });\n      this.onEdit(realIndex);\n    },\n    // removes one or multiple routes from the list\n    onDelete: function onDelete() {\n      var _this = this;\n      this.selection.forEach(function (sel) {\n        var index = _this.settingsCopy.findIndex(function (route) {\n          return isEqual(route, sel);\n        });\n        if (index >= 0) {\n          _this.settingsCopy.splice(index, 1);\n        }\n      });\n      this.selection = [];\n    },\n    /**\n     * Shows route edit dialog, it adds a new route if index undefined\n     * @param index - number\n     */\n    onEdit: function onEdit() {\n      var _this2 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      this.$vuntangle.dialog.show({\n        title: index === undefined ? this.$vuntangle.$t('add_static_route') : this.$vuntangle.$t('edit_static_route'),\n        component: StaticRouteEdit,\n        width: 600,\n        height: 'auto',\n        actionLabel: index === undefined ? this.$vuntangle.$t('add') : this.$vuntangle.$t('update'),\n        componentProps: _objectSpread({\n          index: index,\n          interfaces: this.interfaces,\n          features: this.features,\n          routes: this.settings\n        }, index === undefined ? {} : {\n          settings: this.settingsCopy[index]\n        }),\n        componentEvents: {\n          update: function update(entry, index) {\n            // add or update the entry from the dialog\n            if (index === undefined) {\n              _this2.settingsCopy.push(entry);\n            } else {\n              _this2.settingsCopy.splice(index, 1, entry);\n            }\n            _this2.selection = [];\n          }\n        }\n      });\n    },\n    /**\n     * Shows full routing table\n     * @param index - number\n     */\n    onViewRoutingTable: function onViewRoutingTable() {\n      var that = this;\n      this.$vuntangle.dialog.show({\n        title: this.$vuntangle.$t('routing_table'),\n        component: RoutingTable,\n        width: 1000,\n        buttons: [{\n          name: this.$t('close'),\n          handler: function handler() {\n            this.onClose();\n          }\n        }],\n        componentEvents: {\n          fetchRoutingTable: function fetchRoutingTable(resolve) {\n            return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return that.$emit('fetch-routing-table', function (result) {\n                      return resolve(result);\n                    });\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }))();\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["VContainer","VSpacer","VDivider","isEqual","CheckboxRenderer","settingsMixin","StaticRouteEdit","RoutingTable","settingsDefaults","defaults","components","mixins","props","interfaces","type","Array","default","data","settingsCopy","selection","frameworkComponents","computed","columnDefs","_ref","$i18n","interfaceName","headerName","t","field","valueFormatter","_ref2","interfaceId","minWidth","width","flex","sortable","cellRenderer","noDataMessage","_ref3","length","methods","id","intf","find","name","onEditRoute","_ref4","realIndex","findIndex","route","onEdit","onDelete","_this","forEach","sel","index","splice","_this2","arguments","undefined","$vuntangle","dialog","show","title","$t","component","height","actionLabel","componentProps","_objectSpread","features","routes","settings","componentEvents","update","entry","push","onViewRoutingTable","that","buttons","handler","onClose","fetchRoutingTable","resolve","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","$emit","result","stop"],"sources":["node_modules/vuntangle/src/shared/StaticRoutes/StaticRoutes.vue"],"sourcesContent":["<template>\n  <v-container class=\"d-flex flex-column flex-grow-1\" fluid>\n    <div class=\"d-flex align-center\">\n      <h2 class=\"font-weight-light\">{{ $vuntangle.$t('static_routes') }}</h2>\n      <v-spacer />\n      <slot name=\"actions\" :new-settings=\"settingsCopy\" :is-dirty=\"isDirty\"></slot>\n    </div>\n    <v-divider class=\"my-2\" />\n    <p class=\"body-2\">\n      {{ $vuntangle.$t('static_routes_description') }}\n    </p>\n    <div v-if=\"!!$slots['extra-fields']\">\n      <slot name=\"extra-fields\" />\n    </div>\n\n    <div class=\"d-flex my-2 justify-end\">\n      <u-btn\n        v-if=\"!features.isTemplateView\"\n        text\n        color=\"primary\"\n        :min-width=\"null\"\n        class=\"mr-2\"\n        :disabled=\"disabled\"\n        @click=\"onViewRoutingTable()\"\n      >\n        <v-icon left>mdi-table-eye</v-icon> {{ $vuntangle.$t('routing_table') }}\n      </u-btn>\n\n      <u-btn text color=\"error\" :min-width=\"null\" class=\"mr-2\" :disabled=\"!selection.length\" @click=\"onDelete()\">\n        <v-icon left>mdi-delete</v-icon> {{ $vuntangle.$t('delete') }}\n      </u-btn>\n\n      <u-btn text color=\"primary\" :min-width=\"null\" class=\"mr-2\" :disabled=\"!isDirty\" @click=\"onUndo()\">\n        <v-icon left>mdi-undo</v-icon> {{ $vuntangle.$t('undo') }}\n      </u-btn>\n\n      <u-btn color=\"primary\" :min-width=\"null\" @click=\"onEdit()\">\n        <v-icon left>mdi-plus</v-icon> {{ $vuntangle.$t('add_static_route') }}\n      </u-btn>\n    </div>\n\n    <u-grid\n      id=\"static-routes\"\n      :no-data-message=\"noDataMessage\"\n      :column-defs=\"columnDefs\"\n      :row-data=\"settingsCopy\"\n      :framework-components=\"frameworkComponents\"\n      selection-type=\"multiAction\"\n      :selection.sync=\"selection\"\n      :enable-refresh=\"!features.isTemplateView\"\n      :custom-grid-options=\"{ suppressRowClickSelection: true }\"\n      @row-clicked=\"onEditRoute\"\n      v-on=\"$listeners\"\n    />\n  </v-container>\n</template>\n<script>\n  // import vuetify components\n  import { VContainer, VSpacer, VDivider } from 'vuetify/lib'\n\n  import isEqual from 'lodash/isEqual'\n  import CheckboxRenderer from '../../components/UGrid/renderers/CheckboxRenderer.vue'\n  import settingsMixin from '../settingsMixin'\n  import StaticRouteEdit from './StaticRouteEdit.vue'\n  import RoutingTable from './RoutingTable.vue'\n  import { settingsDefaults as defaults } from './defaults'\n\n  export default {\n    components: { VContainer, VSpacer, VDivider },\n    mixins: [settingsMixin],\n    defaults,\n    props: {\n      interfaces: { type: Array, default: () => [] },\n    },\n    data() {\n      return {\n        settingsCopy: [],\n        selection: [],\n        frameworkComponents: {\n          CheckboxRenderer,\n        },\n      }\n    },\n    computed: {\n      columnDefs: ({ $i18n, interfaceName }) => [\n        {\n          headerName: $i18n.t('description'),\n          field: 'description',\n        },\n        {\n          headerName: $i18n.t('network'),\n          field: 'network',\n        },\n        {\n          headerName: $i18n.t('next_hop'),\n          field: 'nextHop',\n        },\n        {\n          headerName: $i18n.t('interface'),\n          field: 'interfaceId',\n          valueFormatter: ({ data }) => interfaceName(data.interfaceId),\n        },\n        {\n          headerName: $i18n.t('metric'),\n          field: 'metric',\n        },\n        {\n          headerName: $i18n.t('enabled'),\n          field: 'enabled',\n          minWidth: 50,\n          width: 80,\n          flex: 0,\n          sortable: true,\n          cellRenderer: 'CheckboxRenderer',\n        },\n      ],\n\n      /** computes grid no data message based on records number & visibility/filter */\n      noDataMessage: ({ settingsCopy, $i18n }) =>\n        settingsCopy.length > 0 ? $i18n.t('no_route_meets_filter') : $i18n.t('no_routes_defined'),\n    },\n\n    methods: {\n      // render interface name based on route interface id\n      interfaceName(id) {\n        const intf = this.interfaces.find(intf => intf.interfaceId === id)\n        return intf ? intf.name : ''\n      },\n\n      // deselect all and show edit dialog\n      onEditRoute({ data }) {\n        const realIndex = this.settingsCopy.findIndex(route => isEqual(route, data))\n        this.onEdit(realIndex)\n      },\n\n      // removes one or multiple routes from the list\n      onDelete() {\n        this.selection.forEach(sel => {\n          const index = this.settingsCopy.findIndex(route => isEqual(route, sel))\n          if (index >= 0) {\n            this.settingsCopy.splice(index, 1)\n          }\n        })\n        this.selection = []\n      },\n\n      /**\n       * Shows route edit dialog, it adds a new route if index undefined\n       * @param index - number\n       */\n      onEdit(index = undefined) {\n        this.$vuntangle.dialog.show({\n          title: index === undefined ? this.$vuntangle.$t('add_static_route') : this.$vuntangle.$t('edit_static_route'),\n          component: StaticRouteEdit,\n          width: 600,\n          height: 'auto',\n          actionLabel: index === undefined ? this.$vuntangle.$t('add') : this.$vuntangle.$t('update'),\n          componentProps: {\n            index,\n            interfaces: this.interfaces,\n            features: this.features,\n            routes: this.settings,\n            // pass the entry if it exists\n            ...(index === undefined ? {} : { settings: this.settingsCopy[index] }),\n          },\n          componentEvents: {\n            update: (entry, index) => {\n              // add or update the entry from the dialog\n              if (index === undefined) {\n                this.settingsCopy.push(entry)\n              } else {\n                this.settingsCopy.splice(index, 1, entry)\n              }\n              this.selection = []\n            },\n          },\n        })\n      },\n      /**\n       * Shows full routing table\n       * @param index - number\n       */\n      onViewRoutingTable() {\n        const that = this\n        this.$vuntangle.dialog.show({\n          title: this.$vuntangle.$t('routing_table'),\n          component: RoutingTable,\n          width: 1000,\n          buttons: [\n            {\n              name: this.$t('close'),\n              handler() {\n                this.onClose()\n              },\n            },\n          ],\n          componentEvents: {\n            async fetchRoutingTable(resolve) {\n              await that.$emit('fetch-routing-table', result => resolve(result))\n            },\n          },\n        })\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}