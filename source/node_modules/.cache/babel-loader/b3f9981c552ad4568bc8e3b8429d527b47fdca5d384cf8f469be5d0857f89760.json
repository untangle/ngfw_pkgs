{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport { mapState } from 'vuex';\nimport Complete from './Complete.vue';\nexport default {\n  name: 'AutoUpgrades',\n  components: {\n    Complete: Complete\n  },\n  props: {\n    adminRpc: {\n      type: Object,\n      required: true\n    },\n    setupRpc: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      title: this.$t('Auto Upgrades'),\n      description: this.isCCHidden ? this.$t('Automatic Upgrades') : this.$t('Automatic Upgrades and ETM Dashboard Access'),\n      systemSettings: {\n        autoUpgrade: true,\n        cloudEnabled: true\n      },\n      initialValues: {},\n      isCCHidden: false,\n      showComplete: false,\n      rpc: {}\n    };\n  },\n  computed: _objectSpread({}, mapState(['rpc'])),\n  mounted: function mounted() {\n    this.getSettings();\n  },\n  methods: {\n    getSettings: function getSettings() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this.$store.commit('setLoading', true);\n              _context.next = 4;\n              return new window.JSONRpcClient('/admin/JSON-RPC').UvmContext;\n            case 4:\n              _this.rpc = _context.sent;\n              console.log('this.rpc', _this.rpc);\n              _context.next = 8;\n              return _this.rpc.systemManager().getSettings();\n            case 8:\n              result = _context.sent;\n              _this.systemSettings = result;\n              _this.initialValues = {\n                autoUpgrade: result.autoUpgrade,\n                cloudEnabled: result.cloudEnabled\n              };\n              if (_this.rpc.isCCHidden) {\n                _this.isCCHidden = true;\n                _this.systemSettings.cloudEnabled = false;\n                _this.description = _this.$t('Automatic Upgrades');\n              }\n              _context.next = 18;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching settings:', _context.t0);\n              _this.$store.dispatch('handleException', _context.t0);\n            case 18:\n              _context.prev = 18;\n              _this.$store.commit('setLoading', false);\n              return _context.finish(18);\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 14, 18, 21]]);\n      }))();\n    },\n    onSave: function onSave() {\n      // Check for changes\n      this.showComplete = true;\n      // if (\n      //   this.initialValues.autoUpgrade === this.systemSettings.autoUpgrade &&\n      //   this.initialValues.cloudEnabled === this.systemSettings.cloudEnabled\n      // ) {\n      //   this.$emit('nextStep')\n      //   return\n      // }\n\n      // // Enable support if cloudEnabled is true\n      // if (this.systemSettings.cloudEnabled) {\n      //   this.systemSettings.supportEnabled = true\n      // }\n\n      // try {\n      //   this.$store.commit('setLoading', true)\n      //   await this.rpc.systemManager.setSettings(this.systemSettings)\n      //   alert(this.$t('Settings saved successfully.'))\n      //   this.$emit('nextStep')\n      // } catch (error) {\n      //   console.error('Error saving settings:', error)\n      //   this.$store.dispatch('handleException', error)\n      // } finally {\n      //   this.$store.commit('setLoading', false)\n      // }\n    }\n  }\n};","map":{"version":3,"names":["mapState","Complete","name","components","props","adminRpc","type","Object","required","setupRpc","data","title","$t","description","isCCHidden","systemSettings","autoUpgrade","cloudEnabled","initialValues","showComplete","rpc","computed","_objectSpread","mounted","getSettings","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_callee$","_context","prev","next","$store","commit","window","JSONRpcClient","UvmContext","sent","console","log","systemManager","t0","error","dispatch","finish","stop","onSave"],"sources":["src/Setup_wizard/step/AutoUpgrades.vue"],"sourcesContent":["<template>\n  <Complete v-if=\"showComplete\" :setup-rpc=\"setupRpc\" :admin-rpc=\"adminRpc\" />\n\n  <div v-else class=\"auto-upgrades\">\n    <h1>{{ title }}</h1>\n    <p>{{ description }}</p>\n\n    <div class=\"checkbox-container\">\n      <label>\n        <input v-model=\"systemSettings.autoUpgrade\" type=\"checkbox\" checked />\n        <strong>{{ $t('Automatically Install Upgrades') }}</strong>\n      </label>\n      <p class=\"info-text\">\n        {{\n          $t(\n            'Automatically install new versions of the software when available. This is the recommended choice for most sites.',\n          )\n        }}\n      </p>\n    </div>\n\n    <div v-if=\"!isCCHidden\" class=\"checkbox-container\">\n      <label>\n        <input v-model=\"systemSettings.cloudEnabled\" type=\"checkbox\" checked />\n        <strong>{{ $t('Connect to ETM Dashboard') }}</strong>\n      </label>\n      <p class=\"info-text\">\n        {{\n          $t(\n            'Remain securely connected to the ETM Dashboard for cloud management, hot fixes, and support access. This is the recommended choice for most sites.',\n          )\n        }}\n      </p>\n    </div>\n\n    <button @click=\"onSave\">{{ $t('Finish') }}<span class=\"arrow\">â†’</span></button>\n  </div>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  import Complete from './Complete.vue'\n\n  export default {\n    name: 'AutoUpgrades',\n    components: {\n      Complete,\n    },\n    props: {\n      adminRpc: {\n        type: Object,\n        required: true,\n      },\n      setupRpc: {\n        type: Object,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        title: this.$t('Auto Upgrades'),\n        description: this.isCCHidden\n          ? this.$t('Automatic Upgrades')\n          : this.$t('Automatic Upgrades and ETM Dashboard Access'),\n        systemSettings: {\n          autoUpgrade: true,\n          cloudEnabled: true,\n        },\n        initialValues: {},\n        isCCHidden: false,\n        showComplete: false,\n        rpc: {},\n      }\n    },\n    computed: {\n      ...mapState(['rpc']),\n    },\n    mounted() {\n      this.getSettings()\n    },\n    methods: {\n      async getSettings() {\n        try {\n          this.$store.commit('setLoading', true)\n          this.rpc = await new window.JSONRpcClient('/admin/JSON-RPC').UvmContext\n          console.log('this.rpc', this.rpc)\n\n          const result = await this.rpc.systemManager().getSettings()\n\n          this.systemSettings = result\n          this.initialValues = {\n            autoUpgrade: result.autoUpgrade,\n            cloudEnabled: result.cloudEnabled,\n          }\n\n          if (this.rpc.isCCHidden) {\n            this.isCCHidden = true\n            this.systemSettings.cloudEnabled = false\n            this.description = this.$t('Automatic Upgrades')\n          }\n        } catch (error) {\n          console.error('Error fetching settings:', error)\n          this.$store.dispatch('handleException', error)\n        } finally {\n          this.$store.commit('setLoading', false)\n        }\n      },\n      onSave() {\n        // Check for changes\n        this.showComplete = true\n        // if (\n        //   this.initialValues.autoUpgrade === this.systemSettings.autoUpgrade &&\n        //   this.initialValues.cloudEnabled === this.systemSettings.cloudEnabled\n        // ) {\n        //   this.$emit('nextStep')\n        //   return\n        // }\n\n        // // Enable support if cloudEnabled is true\n        // if (this.systemSettings.cloudEnabled) {\n        //   this.systemSettings.supportEnabled = true\n        // }\n\n        // try {\n        //   this.$store.commit('setLoading', true)\n        //   await this.rpc.systemManager.setSettings(this.systemSettings)\n        //   alert(this.$t('Settings saved successfully.'))\n        //   this.$emit('nextStep')\n        // } catch (error) {\n        //   console.error('Error saving settings:', error)\n        //   this.$store.dispatch('handleException', error)\n        // } finally {\n        //   this.$store.commit('setLoading', false)\n        // }\n      },\n    },\n  }\n</script>\n\n<style scoped>\n  .auto-upgrades {\n    padding: 20px;\n    font-family: Arial, sans-serif;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n  }\n\n  .checkbox-container {\n    margin-bottom: 20px;\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .checkbox-container label {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .info-text {\n    margin-left: 20px;\n    font-size: 14px;\n    color: #555;\n    text-align: left;\n  }\n\n  button {\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n\n  button:hover {\n    background-color: #0056b3;\n  }\n  .internet-button .arrow {\n    margin-left: 8px;\n    font-size: 18px;\n  }\n</style>\n"],"mappings":";;;;;AAwCA,SAAAA,QAAA;AACA,OAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF,QAAA,EAAAA;EACA;EACAG,KAAA;IACAC,QAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAE,IAAA,WAAAA,KAAA;IACA;MACAC,KAAA,OAAAC,EAAA;MACAC,WAAA,OAAAC,UAAA,GACA,KAAAF,EAAA,yBACA,KAAAA,EAAA;MACAG,cAAA;QACAC,WAAA;QACAC,YAAA;MACA;MACAC,aAAA;MACAJ,UAAA;MACAK,YAAA;MACAC,GAAA;IACA;EACA;EACAC,QAAA,EAAAC,aAAA,KACAtB,QAAA,UACA;EACAuB,OAAA,WAAAA,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,WAAA,WAAAA,YAAA;MAAA,IAAAE,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,MAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAEAT,KAAA,CAAAW,MAAA,CAAAC,MAAA;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OACA,IAAAG,MAAA,CAAAC,aAAA,oBAAAC,UAAA;YAAA;cAAAf,KAAA,CAAAN,GAAA,GAAAc,QAAA,CAAAQ,IAAA;cACAC,OAAA,CAAAC,GAAA,aAAAlB,KAAA,CAAAN,GAAA;cAAAc,QAAA,CAAAE,IAAA;cAAA,OAEAV,KAAA,CAAAN,GAAA,CAAAyB,aAAA,GAAArB,WAAA;YAAA;cAAAO,MAAA,GAAAG,QAAA,CAAAQ,IAAA;cAEAhB,KAAA,CAAAX,cAAA,GAAAgB,MAAA;cACAL,KAAA,CAAAR,aAAA;gBACAF,WAAA,EAAAe,MAAA,CAAAf,WAAA;gBACAC,YAAA,EAAAc,MAAA,CAAAd;cACA;cAEA,IAAAS,KAAA,CAAAN,GAAA,CAAAN,UAAA;gBACAY,KAAA,CAAAZ,UAAA;gBACAY,KAAA,CAAAX,cAAA,CAAAE,YAAA;gBACAS,KAAA,CAAAb,WAAA,GAAAa,KAAA,CAAAd,EAAA;cACA;cAAAsB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAY,EAAA,GAAAZ,QAAA;cAEAS,OAAA,CAAAI,KAAA,6BAAAb,QAAA,CAAAY,EAAA;cACApB,KAAA,CAAAW,MAAA,CAAAW,QAAA,oBAAAd,QAAA,CAAAY,EAAA;YAAA;cAAAZ,QAAA,CAAAC,IAAA;cAEAT,KAAA,CAAAW,MAAA,CAAAC,MAAA;cAAA,OAAAJ,QAAA,CAAAe,MAAA;YAAA;YAAA;cAAA,OAAAf,QAAA,CAAAgB,IAAA;UAAA;QAAA,GAAApB,OAAA;MAAA;IAEA;IACAqB,MAAA,WAAAA,OAAA;MACA;MACA,KAAAhC,YAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}