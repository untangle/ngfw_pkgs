{"ast":null,"code":"import \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { VRow, VCol } from 'vuetify/lib';\nimport { ValidationProvider } from 'vee-validate';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { priorityOptions, limitExceedActionOptions } from '../../constants';\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    action: {\n      type: Object,\n      \"default\": undefined\n    },\n    rule: {\n      type: Object,\n      \"default\": undefined\n    }\n  },\n  data: function data() {\n    return {\n      actionCopy: undefined,\n      actions: ['ACCEPT', 'REJECT', 'DROP'],\n      priorityOptions: priorityOptions,\n      limitExceedActionOptions: limitExceedActionOptions,\n      natActionItems: ['SNAT', 'MASQUERADE'],\n      shouldShowPriority: false\n    };\n  },\n  computed: {\n    ruleType: function ruleType(_ref) {\n      var $attrs = _ref.$attrs;\n      return $attrs.ruleType;\n    },\n    remoteData: function remoteData(_ref2) {\n      var $attrs = _ref2.$attrs;\n      return $attrs.remoteData;\n    },\n    remoteFetching: function remoteFetching(_ref3) {\n      var $attrs = _ref3.$attrs;\n      return $attrs.remoteFetching;\n    },\n    allowLimitExceedAction: function allowLimitExceedAction(_ref4) {\n      var _rule$conditions, _rule$conditions2;\n      var rule = _ref4.rule;\n      return (rule === null || rule === void 0 || (_rule$conditions = rule.conditions) === null || _rule$conditions === void 0 ? void 0 : _rule$conditions.length) && (rule === null || rule === void 0 || (_rule$conditions2 = rule.conditions) === null || _rule$conditions2 === void 0 ? void 0 : _rule$conditions2.some(function (cond) {\n        return cond.type === 'LIMIT_RATE' && cond.op === '>';\n      }));\n    }\n  },\n  watch: {\n    action: {\n      handler: function handler(newAction, oldAction) {\n        if (JSON.stringify(newAction) === JSON.stringify(oldAction)) return;\n        this.actionCopy = cloneDeep(newAction);\n        /**\n         * in case of wan rules `WAN_POLICY` action\n         * an event is triggered to populate wan policies from host app (remote)\n         */\n        if (newAction.type === 'WAN_POLICY') {\n          this.$emit('get-remote-data', 'policies');\n        }\n      },\n      immediate: true,\n      deep: true\n    },\n    actionCopy: {\n      handler: function handler(action) {\n        this.$emit('update:action', action);\n      },\n      deep: true\n    },\n    // MFW-2291 - remove dnat_port from action if not set (empty string)\n    'actionCopy.dnat_port': function actionCopyDnat_port(value) {\n      if (!value) {\n        this.$delete(this.actionCopy, 'dnat_port');\n      }\n    },\n    'actionCopy.limit_exceed_action': function actionCopyLimit_exceed_action(value) {\n      if (!value) {\n        this.handleLimitExceedActionChange(value);\n      }\n    },\n    /**\n     * removes the snat_address from `nat` action if action type is `MASQUERADE`\n     * @param {String} value\n     */\n    'actionCopy.type': function actionCopyType(value) {\n      if (this.ruleType === 'nat' && value === 'MASQUERADE') {\n        this.$delete(this.actionCopy, 'snat_address');\n      }\n    },\n    allowLimitExceedAction: function allowLimitExceedAction(value) {\n      if (this.ruleType !== 'shaping') return;\n      if (value) {\n        this.actionCopy.type = 'LIMIT_EXCEED_ACTION';\n        this.$set(this.actionCopy, 'limit_exceed_action', this.limitExceedActionOptions[0].value);\n        delete this.actionCopy.priority;\n      } else {\n        this.actionCopy.type = 'SET_PRIORITY';\n        this.$set(this.actionCopy, 'priority', this.priorityOptions[0].value);\n        delete this.actionCopy.limit_exceed_action;\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Check the initial value of `limit_exceed_action` on component mount\n    this.handleLimitExceedActionChange(this.actionCopy.limit_exceed_action);\n  },\n  methods: {\n    handleLimitExceedActionChange: function handleLimitExceedActionChange(selectedAction) {\n      // Set the `shouldShowPriority` based on the selected action\n      if (selectedAction === 'PRIORITY') {\n        this.shouldShowPriority = true;\n      } else {\n        this.shouldShowPriority = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","ValidationProvider","cloneDeep","priorityOptions","limitExceedActionOptions","components","props","action","type","Object","undefined","rule","data","actionCopy","actions","natActionItems","shouldShowPriority","computed","ruleType","_ref","$attrs","remoteData","_ref2","remoteFetching","_ref3","allowLimitExceedAction","_ref4","_rule$conditions","_rule$conditions2","conditions","length","some","cond","op","watch","handler","newAction","oldAction","JSON","stringify","$emit","immediate","deep","actionCopyDnat_port","value","$delete","actionCopyLimit_exceed_action","handleLimitExceedActionChange","actionCopyType","$set","priority","limit_exceed_action","mounted","methods","selectedAction"],"sources":["node_modules/vuntangle/src/shared/Conditions/RuleAction.vue"],"sourcesContent":["<!--\n  RuleAction is the generic component used for settings the action for a rule\n  Actions are specific to each ruleType (`wan-policies`, `filter`, `nat`, `shaping` etc... )\n-->\n<template>\n  <div>\n    <!-- `port-forward` actions\n      action: { type: 'DNAT', dnat_address, dnat_port }\n      Action type applied for firewall/`filter` rules\n    -->\n    <div v-if=\"ruleType === 'port-forward'\" class=\"d-flex align-center\">\n      <div class=\"font-weight-bold mr-2\">{{ $vuntangle.$t('rule_action_dnat') }}:</div>\n      <v-row dense class=\"align-center\">\n        <v-col cols=\"3\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|ip\">\n            <u-text-field v-model=\"actionCopy.dnat_address\" :label=\"$vuntangle.$t('address')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"2\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"port\">\n            <u-text-field\n              v-model=\"actionCopy.dnat_port\"\n              :label=\"$vuntangle.$t('port_optional')\"\n              :error-messages=\"errors\"\n              clearable\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </div>\n\n    <!-- `shaping` actions\n      action: { type: 'SET_PRIORITY|LIMIT_EXCEED_ACTION', priority: 1, limit_exceed_action: 'drop' }\n      Sets priority for the network/`shaping` rules\n    -->\n    <div v-if=\"ruleType === 'shaping'\" class=\"d-flex align-center\">\n      <v-row dense class=\"align-center\">\n        <v-col cols=\"4\">\n          <!-- MFW-4234: If LIMIT_RATE && '>' == then action should only be 'LIMIT_EXCEED_ACTION' -->\n          <u-select\n            v-if=\"allowLimitExceedAction\"\n            v-model=\"actionCopy.type\"\n            :items=\"['LIMIT_EXCEED_ACTION']\"\n            :placeholder=\"$vuntangle.$t('select')\"\n          >\n            <template #selection=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n            <template #item=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n          </u-select>\n          <!-- MFW-4234: If LIMIT_RATE not amongst the condition then 'LIMIT_EXCEED_ACTION' shouldn't be allowed\n            OR if LIMIT_RATE && '<' == then action should only be 'Set Priority' -->\n          <u-select v-else v-model=\"actionCopy.type\" :items=\"['SET_PRIORITY']\" :placeholder=\"$vuntangle.$t('select')\">\n            <template #selection=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n            <template #item=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n          </u-select>\n        </v-col>\n        <v-col v-if=\"actionCopy.type === 'SET_PRIORITY'\" cols=\"4\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\" tag=\"div\">\n            <u-select\n              v-model=\"actionCopy.priority\"\n              :items=\"priorityOptions\"\n              :placeholder=\"$vuntangle.$t('select')\"\n              :error-messages=\"errors\"\n            >\n              <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n              <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n        <v-col v-if=\"actionCopy.type === 'LIMIT_EXCEED_ACTION'\" cols=\"3\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\" tag=\"div\">\n            <u-select\n              v-model=\"actionCopy.limit_exceed_action\"\n              :items=\"limitExceedActionOptions\"\n              :placeholder=\"$vuntangle.$t('select')\"\n              :error-messages=\"errors\"\n              @change=\"handleLimitExceedActionChange\"\n            >\n              <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n              <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n        <v-col v-if=\"shouldShowPriority\" cols=\"3\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\" tag=\"div\">\n            <u-select\n              v-model=\"actionCopy.priority\"\n              :items=\"priorityOptions\"\n              :placeholder=\"$vuntangle.$t('select')\"\n              :error-messages=\"errors\"\n            >\n              <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n              <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </div>\n\n    <!-- `nat` actions\n      action: { type: 'SNAT|MASQUERADE', snat_address }\n    -->\n    <div v-if=\"ruleType === 'nat'\">\n      <v-row dense class=\"align-center\">\n        <v-col cols=\"4\">\n          <u-select v-model=\"actionCopy.type\" :items=\"natActionItems\" :placeholder=\"$vuntangle.$t('select')\">\n            <template #selection=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n            <template #item=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n          </u-select>\n        </v-col>\n        <v-col v-if=\"actionCopy.type === 'SNAT'\" cols=\"8\">\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"{ required: true, ip_expression: { multiple: false }, check_non_routeable_address: true }\"\n          >\n            <u-text-field v-model=\"actionCopy.snat_address\" :label=\"$vuntangle.$t('address')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </div>\n\n    <!-- `filter` and `access` actions\n      action: { type: 'ACCEPT | REJECT | DROP' }\n      Action type applied for firewall/`filter` rules\n    -->\n    <div v-if=\"ruleType === 'filter' || ruleType === 'access'\" class=\"d-flex\">\n      <v-row dense class=\"align-center\">\n        <v-col cols=\"4\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"actionCopy.type\"\n              :items=\"actions\"\n              :placeholder=\"$vuntangle.$t('select')\"\n              :error-messages=\"errors\"\n            >\n              <template #selection=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n              <template #item=\"{ item }\">{{ $vuntangle.$t(`rule_action_${item.toLowerCase()}`) }}</template>\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </div>\n\n    <!-- `wan-rules` actions\n      action: { type: 'WAN_POLICY', policy: 'somePolicyId' }\n      Policy attached to the `WAN_POLICY` action applied for routing/`wan-rules`\n      Policies are populated via event (up) -> parent (down) -> props\n      so for MFW wan policies, those are retrieved as array of objects\n      [{ best_of_wan, criteria, description, enabled, interfaces, policyId, type }]\n      the action selector uses `description` and `policyId` for the select items\n    -->\n    <div v-if=\"ruleType === 'wan-rules'\">\n      <v-row dense class=\"align-center\">\n        <v-col cols=\"6\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"actionCopy.policy\"\n              :items=\"remoteData.policies\"\n              item-value=\"policyId\"\n              item-text=\"description\"\n              :placeholder=\"$vuntangle.$t('select')\"\n              :label=\"$t('rule_action_wan_policy')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </div>\n  </div>\n</template>\n<script>\n  import { VRow, VCol } from 'vuetify/lib'\n  import { ValidationProvider } from 'vee-validate'\n  import cloneDeep from 'lodash/cloneDeep'\n  import { priorityOptions, limitExceedActionOptions } from '../../constants'\n\n  export default {\n    components: { VRow, VCol, ValidationProvider },\n    props: {\n      action: { type: Object, default: undefined },\n      rule: { type: Object, default: undefined },\n    },\n    data() {\n      return {\n        actionCopy: undefined,\n        actions: ['ACCEPT', 'REJECT', 'DROP'],\n        priorityOptions,\n        limitExceedActionOptions,\n        natActionItems: ['SNAT', 'MASQUERADE'],\n        shouldShowPriority: false,\n      }\n    },\n    computed: {\n      ruleType: ({ $attrs }) => $attrs.ruleType,\n      remoteData: ({ $attrs }) => $attrs.remoteData,\n      remoteFetching: ({ $attrs }) => $attrs.remoteFetching,\n      allowLimitExceedAction: ({ rule }) =>\n        rule?.conditions?.length && rule?.conditions?.some(cond => cond.type === 'LIMIT_RATE' && cond.op === '>'),\n    },\n    watch: {\n      action: {\n        handler(newAction, oldAction) {\n          if (JSON.stringify(newAction) === JSON.stringify(oldAction)) return\n          this.actionCopy = cloneDeep(newAction)\n          /**\n           * in case of wan rules `WAN_POLICY` action\n           * an event is triggered to populate wan policies from host app (remote)\n           */\n          if (newAction.type === 'WAN_POLICY') {\n            this.$emit('get-remote-data', 'policies')\n          }\n        },\n        immediate: true,\n        deep: true,\n      },\n      actionCopy: {\n        handler(action) {\n          this.$emit('update:action', action)\n        },\n        deep: true,\n      },\n      // MFW-2291 - remove dnat_port from action if not set (empty string)\n      'actionCopy.dnat_port'(value) {\n        if (!value) {\n          this.$delete(this.actionCopy, 'dnat_port')\n        }\n      },\n      'actionCopy.limit_exceed_action'(value) {\n        if (!value) {\n          this.handleLimitExceedActionChange(value)\n        }\n      },\n      /**\n       * removes the snat_address from `nat` action if action type is `MASQUERADE`\n       * @param {String} value\n       */\n      'actionCopy.type'(value) {\n        if (this.ruleType === 'nat' && value === 'MASQUERADE') {\n          this.$delete(this.actionCopy, 'snat_address')\n        }\n      },\n      allowLimitExceedAction(value) {\n        if (this.ruleType !== 'shaping') return\n        if (value) {\n          this.actionCopy.type = 'LIMIT_EXCEED_ACTION'\n          this.$set(this.actionCopy, 'limit_exceed_action', this.limitExceedActionOptions[0].value)\n          delete this.actionCopy.priority\n        } else {\n          this.actionCopy.type = 'SET_PRIORITY'\n          this.$set(this.actionCopy, 'priority', this.priorityOptions[0].value)\n          delete this.actionCopy.limit_exceed_action\n        }\n      },\n    },\n    mounted() {\n      // Check the initial value of `limit_exceed_action` on component mount\n      this.handleLimitExceedActionChange(this.actionCopy.limit_exceed_action)\n    },\n    methods: {\n      handleLimitExceedActionChange(selectedAction) {\n        // Set the `shouldShowPriority` based on the selected action\n        if (selectedAction === 'PRIORITY') {\n          this.shouldShowPriority = true\n        } else {\n          this.shouldShowPriority = false\n        }\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}