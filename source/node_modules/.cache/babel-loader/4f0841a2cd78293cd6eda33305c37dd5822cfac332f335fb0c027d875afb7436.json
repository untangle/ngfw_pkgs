{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { CONFIG_TYPE } from '../SettingsInterface/components/constants';\nexport default {\n  methods: {\n    /**\n     * Value formatter for grid device name\n     * It guesses the EOS interface display names based on device\n     * e.g. `et1_3` => `Ethernet1/3`, `ma1_1` => `Management1/1`\n     * For non EOS devices (e.g. OpenWRT) it will use device name as is\n     * @param {String} device - the interface device\n     * @returns\n     */\n    deviceValueFormatter: function deviceValueFormatter(device) {\n      var reEt = /^et(\\d{1,2})_(\\d{1,2})$/;\n      var reMa = /^ma(\\d{1,2})_(\\d{1,2})$/;\n      var match = device.match(reEt) || device.match(reMa);\n      if (!match) return device;\n      var name = '';\n      if (match[0].startsWith('et')) name = this.$vuntangle.$t('ethernet');\n      if (match[0].startsWith('ma')) name = this.$vuntangle.$t('management');\n      return \"\".concat(name).concat(match[1], \"/\").concat(match[2]);\n    },\n    /**\n     * Returns the interface status, e.g. `Connected (online)`\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {Object}\n     */\n    getStatus: function getStatus(intf, status) {\n      return {\n        intf: intf,\n        status: status\n      };\n    },\n    /**\n     * Value formatter for grid status for proper filtering sorting\n     * @param {Object} value\n     * @returns {String}\n     */\n    statusValueFormatter: function statusValueFormatter(_ref) {\n      var intf = _ref.intf,\n        status = _ref.status;\n      var connected = this.$t(intf.enabled ? status && status.connected ? 'connected' : 'disconnected' : 'disabled');\n      var online = status !== null && status !== void 0 && status.wan && status !== null && status !== void 0 && status.connected && !(status !== null && status !== void 0 && status.offline) ? this.$t('online') : this.$t('offline');\n      return \"\".concat(connected, \" \").concat(online);\n    },\n    /**\n     * Returns the interface duplex, e.g. `Full Duplex`\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getDuplex: function getDuplex(intf, status) {\n      var duplex = (status === null || status === void 0 ? void 0 : status.ethDuplex) || intf.ethDuplex;\n      if (duplex === 'full') return this.$vuntangle.$t('full_duplex');\n      if (duplex === 'half') return this.$vuntangle.t('half_duplex');\n      return '-';\n    },\n    /**\n     * Returns the interface MAC address\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getMac: function getMac(intf, status) {\n      if (intf.virtual) return '-';\n      return (status === null || status === void 0 ? void 0 : status.macAddress) || '-';\n    },\n    /**\n     * Returns the interface ETH speed\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getSpeed: function getSpeed(intf, status) {\n      var speed = (status === null || status === void 0 ? void 0 : status.ethSpeed) > -1 ? status.ethSpeed : intf.ethSpeed;\n      if (!speed || speed < 0) return '-';\n      return \"\".concat(speed / 1000, \" Gbps\");\n    },\n    /**\n     * Returns the interface type (WAN, LAN, Management / NIC, VLAN, WIREGUARD etc)\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getType: function getType(intf) {\n      var type = this.$vuntangle.$t('lan');\n      if (intf.management) type = this.$vuntangle.$t('management');\n      if (intf.wan) type = this.$vuntangle.$t('wan');\n      return \"\".concat(type, \" / \").concat(intf.type);\n    },\n    /**\n     * Returns interface IPv4 Address based on status or fallsback on settings\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv4Address: function getIpv4Address(intf, status) {\n      var _intf$v4ConfigType;\n      if (!(status !== null && status !== void 0 && status.ip4Addr) && !intf.v4StaticAddress) return '-';\n      var address = '';\n      if (status !== null && status !== void 0 && status.ip4Addr) {\n        address = status.ip4Addr[0];\n      } else if (intf.v4StaticAddress) {\n        if (intf.v4ConfigType === CONFIG_TYPE.DISABLED) {\n          return this.$vuntangle.$t('disabled');\n        }\n        address = intf.v4StaticAddress + (intf.v4StaticPrefix ? \"/\".concat(intf.v4StaticPrefix) : '');\n      }\n      var addressSource = status ? this.getAddressSource(status) : ((_intf$v4ConfigType = intf.v4ConfigType) === null || _intf$v4ConfigType === void 0 ? void 0 : _intf$v4ConfigType.toLowerCase()) || this.$vuntangle.$t('unknown');\n      return \"\".concat(address, \" (\").concat(addressSource, \")\");\n    },\n    /**\n     * Returns interface IPv6 Address based on status or fallsback on settings\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv6Address: function getIpv6Address(intf, status) {\n      var _intf$v6ConfigType;\n      if (!(status !== null && status !== void 0 && status.ip6Addr) && !intf.v6StaticAddress) return '-';\n      var address = '';\n      if (status !== null && status !== void 0 && status.ip6Addr) {\n        address = status.ip6Addr.join(', ');\n      } else if (intf.v6StaticAddress) {\n        if (intf.v6ConfigType === CONFIG_TYPE.DISABLED) {\n          return this.$vuntangle.$t('disabled');\n        }\n        address = intf.v6StaticAddress + (intf.v6StaticPrefix ? \"/\".concat(intf.v6StaticPrefix) : '');\n      }\n      var addressSource = status ? this.getAddressSource(status) : ((_intf$v6ConfigType = intf.v6ConfigType) === null || _intf$v6ConfigType === void 0 ? void 0 : _intf$v6ConfigType.toLowerCase()) || this.$vuntangle.$t('unknown');\n      return \"\".concat(address, \" (\").concat(addressSource, \")\");\n    },\n    /**\n     * Returns interface IPv4 Gateway\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv4Gateway: function getIpv4Gateway(intf, status) {\n      return (status === null || status === void 0 ? void 0 : status.ip4Gateway) || '-';\n    },\n    /**\n     * Returns interface IPv6 Gateway\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv6Gateway: function getIpv6Gateway(intf, status) {\n      return (status === null || status === void 0 ? void 0 : status.ip6Gateway) || '-';\n    },\n    /**\n     * Returns DNS Servers\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getDnsServers: function getDnsServers(intf, status) {\n      var servers = status === null || status === void 0 ? void 0 : status.dnsServers;\n      return servers !== null && servers !== void 0 && servers.length ? servers.join(', ') : '-';\n    },\n    /**\n     * Returns Download speed\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getDownload: function getDownload(intf, status) {\n      var _this = this;\n      // compute download for non bridged\n      if (!status || !status.connected || status.offline) return '-';\n      var downloadKbps = 0;\n\n      // for non bridged interfaces\n      if (intf.type !== 'BRIDGE') {\n        if (status.wan) {\n          downloadKbps = status.rxByteRate / 1000;\n        }\n        downloadKbps = status.txByteRate / 1000;\n      } else {\n        // cummulate download for bridged\n        var downloadSpeed = 0;\n        var bridgedInterfaces = this.interfaces.filter(function (i) {\n          var _intf$bridgedInterfac;\n          return (_intf$bridgedInterfac = intf.bridgedInterfaces) === null || _intf$bridgedInterfac === void 0 ? void 0 : _intf$bridgedInterfac.includes(i.interfaceId);\n        });\n        bridgedInterfaces.forEach(function (i) {\n          var _this$interfacesStatu;\n          var devStatus = (_this$interfacesStatu = _this.interfacesStatusMap) === null || _this$interfacesStatu === void 0 ? void 0 : _this$interfacesStatu[i.device];\n          if (devStatus) {\n            downloadSpeed += devStatus.txByteRate / 1000;\n          }\n        });\n        downloadKbps = Math.round(downloadSpeed * 1000) / 1000;\n      }\n      return \"\".concat(downloadKbps, \" \").concat(this.$vuntangle.$t('kbps'));\n    },\n    /**\n     * Returns Upload speed\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getUpload: function getUpload(intf, status) {\n      var _this2 = this;\n      // compute upload for non bridged\n      if (!status || !status.connected || status.offline) return '-';\n      var uploadKbps = 0;\n\n      // for non bridged interfaces\n      if (intf.type !== 'BRIDGE') {\n        if (status.wan) {\n          uploadKbps = status.txByteRate / 1000;\n        }\n        uploadKbps = status.rxByteRate / 1000;\n      } else {\n        // cummulate upload for bridged\n        var uploadSpeed = 0;\n        var bridgedInterfaces = this.interfaces.filter(function (i) {\n          var _intf$bridgedInterfac2;\n          return (_intf$bridgedInterfac2 = intf.bridgedInterfaces) === null || _intf$bridgedInterfac2 === void 0 ? void 0 : _intf$bridgedInterfac2.includes(i.interfaceId);\n        });\n        bridgedInterfaces.forEach(function (i) {\n          var _this2$interfacesStat;\n          var devStatus = (_this2$interfacesStat = _this2.interfacesStatusMap) === null || _this2$interfacesStat === void 0 ? void 0 : _this2$interfacesStat[i.device];\n          if (devStatus) {\n            uploadSpeed += devStatus.rxByteRate / 1000;\n          }\n        });\n        uploadKbps = Math.round(uploadSpeed * 1000) / 1000;\n      }\n      return \"\".concat(uploadKbps, \" \").concat(this.$vuntangle.$t('kbps'));\n    },\n    /**\n     * Returns bridged to interface for bridged interfaces\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getBridgedTo: function getBridgedTo(intf) {\n      var _intf$bridgedInterfac3,\n        _this3 = this;\n      if (intf.configType !== 'BRIDGED' && intf.type !== 'BRIDGE') return '-';\n      return (_intf$bridgedInterfac3 = intf.bridgedInterfaces) === null || _intf$bridgedInterfac3 === void 0 ? void 0 : _intf$bridgedInterfac3.map(function (intfId) {\n        var _this3$interfaces$fin;\n        return (_this3$interfaces$fin = _this3.interfaces.find(function (i) {\n          return i.interfaceId === intfId;\n        })) === null || _this3$interfaces$fin === void 0 ? void 0 : _this3$interfaces$fin.name;\n      });\n    },\n    /**\n     * Returns the parent bridge for the interface\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getParentBridge: function getParentBridge(intf) {\n      // loop interfaces and see if this interface id is set in any other interface 'bridgedInterfaces' property\n      var bridgedInterfaces = this.interfaces.filter(function (i) {\n        var _i$bridgedInterfaces;\n        return (_i$bridgedInterfaces = i.bridgedInterfaces) === null || _i$bridgedInterfaces === void 0 ? void 0 : _i$bridgedInterfaces.includes(intf.interfaceId);\n      });\n      // if nothing found, return -\n      if (bridgedInterfaces.length === 0) return '-';\n      // else, return the name of the bridge\n      return bridgedInterfaces[0].name;\n    },\n    /**\n     * Returns IPsec local gateway\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecLocalGateway: function getIpsecLocalGateway(intf) {\n      var _intf$ipsec;\n      return ((_intf$ipsec = intf.ipsec) === null || _intf$ipsec === void 0 ? void 0 : _intf$ipsec.local.gateway) || '-';\n    },\n    /**\n     * Returns IPsec local networks\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecLocalNetworks: function getIpsecLocalNetworks(intf) {\n      var _intf$ipsec2;\n      if (!((_intf$ipsec2 = intf.ipsec) !== null && _intf$ipsec2 !== void 0 && (_intf$ipsec2 = _intf$ipsec2.local) !== null && _intf$ipsec2 !== void 0 && _intf$ipsec2.networks)) return '-';\n      return intf.ipsec.local.networks.map(function (ntk) {\n        return \"\".concat(ntk.network, \"/\").concat(ntk.prefix);\n      });\n    },\n    /**\n     * Returns IPsec remote gateway\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecRemoteGateway: function getIpsecRemoteGateway(intf) {\n      var _intf$ipsec3;\n      return ((_intf$ipsec3 = intf.ipsec) === null || _intf$ipsec3 === void 0 ? void 0 : _intf$ipsec3.remote.gateway) || '-';\n    },\n    /**\n     * Returns IPsec remote networks\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecRemoteNetworks: function getIpsecRemoteNetworks(intf) {\n      var _intf$ipsec4;\n      if (!((_intf$ipsec4 = intf.ipsec) !== null && _intf$ipsec4 !== void 0 && (_intf$ipsec4 = _intf$ipsec4.remote) !== null && _intf$ipsec4 !== void 0 && _intf$ipsec4.networks)) return '-';\n      return intf.ipsec.remote.networks.map(function (ntk) {\n        return \"\".concat(ntk.network, \"/\").concat(ntk.prefix);\n      });\n    },\n    /**\n     * Returns IPsec bound to interface\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecBoundTo: function getIpsecBoundTo(intf) {\n      var _this$interfacesStatu2;\n      if (intf.type !== 'IPSEC') return '-';\n      if (intf.boundInterfaceId === 0) {\n        return this.$vuntangle.$t('any_wan');\n      }\n      var boundInterfaceId = intf.boundInterfaceId;\n      var boundInterfaceStatus = (_this$interfacesStatu2 = this.interfacesStatus) === null || _this$interfacesStatu2 === void 0 ? void 0 : _this$interfacesStatu2.find(function (intf) {\n        return intf.interfaceId === boundInterfaceId;\n      });\n      if (boundInterfaceStatus) {\n        var name = boundInterfaceStatus.name;\n        var address = null;\n        if (boundInterfaceStatus.ip4Addr) {\n          if (Array.isArray(boundInterfaceStatus.ip4Addr) && boundInterfaceStatus.ip4Addr[0]) {\n            address = boundInterfaceStatus.ip4Addr[0];\n          }\n        }\n        return \"\".concat(name).concat(address ? ' (' + address + ')' : '');\n      }\n      return '-';\n    },\n    /**\n     * Returns IPsec authentication type\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecAuthType: function getIpsecAuthType(intf) {\n      var _intf$ipsec5;\n      if (!((_intf$ipsec5 = intf.ipsec) !== null && _intf$ipsec5 !== void 0 && (_intf$ipsec5 = _intf$ipsec5.authentication) !== null && _intf$ipsec5 !== void 0 && _intf$ipsec5.type)) return '-';\n      if (intf.ipsec.authentication.type === 'shared_secret') return this.$vuntangle.$t('shared_secret');\n      return this.$vuntangle.$t('public_key');\n    },\n    // helpers\n    /**\n     * MFW-2063\n     * return interface address source (e.g. static, dhcp)\n     * addressSource is usually an array ['static', 'static']\n     * this is collected via ubus call and populates addressSource array based on interface \"proto\"\n     * for some bridged interfaces this addressSource might look like ['none', 'static', 'static']\n     */\n    getAddressSource: function getAddressSource(intfStatus) {\n      var addressSource = intfStatus.addressSource;\n      // null or undefined\n      if (!addressSource) return this.$vuntangle.$t('unknown');\n      // not an array (expected a string)\n      if (!Array.isArray(addressSource)) return addressSource;\n      // empty array\n      if (!addressSource.length) return this.$vuntangle.$t('unknown');\n      var sourceDisplay = null;\n      addressSource.forEach(function (source) {\n        if (sourceDisplay && sourceDisplay !== 'none') {\n          return;\n        }\n        if (source !== 'none') {\n          sourceDisplay = source;\n        }\n      });\n      return sourceDisplay || this.$vuntangle.$t('unknown');\n    }\n  }\n};","map":{"version":3,"names":["CONFIG_TYPE","methods","deviceValueFormatter","device","reEt","reMa","match","name","startsWith","$vuntangle","$t","concat","getStatus","intf","status","statusValueFormatter","_ref","connected","enabled","online","wan","offline","getDuplex","duplex","ethDuplex","t","getMac","virtual","macAddress","getSpeed","speed","ethSpeed","getType","type","management","getIpv4Address","_intf$v4ConfigType","ip4Addr","v4StaticAddress","address","v4ConfigType","DISABLED","v4StaticPrefix","addressSource","getAddressSource","toLowerCase","getIpv6Address","_intf$v6ConfigType","ip6Addr","v6StaticAddress","join","v6ConfigType","v6StaticPrefix","getIpv4Gateway","ip4Gateway","getIpv6Gateway","ip6Gateway","getDnsServers","servers","dnsServers","length","getDownload","_this","downloadKbps","rxByteRate","txByteRate","downloadSpeed","bridgedInterfaces","interfaces","filter","i","_intf$bridgedInterfac","includes","interfaceId","forEach","_this$interfacesStatu","devStatus","interfacesStatusMap","Math","round","getUpload","_this2","uploadKbps","uploadSpeed","_intf$bridgedInterfac2","_this2$interfacesStat","getBridgedTo","_intf$bridgedInterfac3","_this3","configType","map","intfId","_this3$interfaces$fin","find","getParentBridge","_i$bridgedInterfaces","getIpsecLocalGateway","_intf$ipsec","ipsec","local","gateway","getIpsecLocalNetworks","_intf$ipsec2","networks","ntk","network","prefix","getIpsecRemoteGateway","_intf$ipsec3","remote","getIpsecRemoteNetworks","_intf$ipsec4","getIpsecBoundTo","_this$interfacesStatu2","boundInterfaceId","boundInterfaceStatus","interfacesStatus","Array","isArray","getIpsecAuthType","_intf$ipsec5","authentication","intfStatus","sourceDisplay","source"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/shared/Interfaces/interfacesMixin.js"],"sourcesContent":["import { CONFIG_TYPE } from '../SettingsInterface/components/constants'\n\nexport default {\n  methods: {\n    /**\n     * Value formatter for grid device name\n     * It guesses the EOS interface display names based on device\n     * e.g. `et1_3` => `Ethernet1/3`, `ma1_1` => `Management1/1`\n     * For non EOS devices (e.g. OpenWRT) it will use device name as is\n     * @param {String} device - the interface device\n     * @returns\n     */\n    deviceValueFormatter(device) {\n      const reEt = /^et(\\d{1,2})_(\\d{1,2})$/\n      const reMa = /^ma(\\d{1,2})_(\\d{1,2})$/\n\n      const match = device.match(reEt) || device.match(reMa)\n      if (!match) return device\n\n      let name = ''\n      if (match[0].startsWith('et')) name = this.$vuntangle.$t('ethernet')\n      if (match[0].startsWith('ma')) name = this.$vuntangle.$t('management')\n\n      return `${name}${match[1]}/${match[2]}`\n    },\n\n    /**\n     * Returns the interface status, e.g. `Connected (online)`\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {Object}\n     */\n    getStatus(intf, status) {\n      return {\n        intf,\n        status,\n      }\n    },\n\n    /**\n     * Value formatter for grid status for proper filtering sorting\n     * @param {Object} value\n     * @returns {String}\n     */\n    statusValueFormatter({ intf, status }) {\n      const connected = this.$t(intf.enabled ? (status && status.connected ? 'connected' : 'disconnected') : 'disabled')\n      const online = status?.wan && status?.connected && !status?.offline ? this.$t('online') : this.$t('offline')\n      return `${connected} ${online}`\n    },\n\n    /**\n     * Returns the interface duplex, e.g. `Full Duplex`\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getDuplex(intf, status) {\n      const duplex = status?.ethDuplex || intf.ethDuplex\n      if (duplex === 'full') return this.$vuntangle.$t('full_duplex')\n      if (duplex === 'half') return this.$vuntangle.t('half_duplex')\n      return '-'\n    },\n\n    /**\n     * Returns the interface MAC address\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getMac(intf, status) {\n      if (intf.virtual) return '-'\n      return status?.macAddress || '-'\n    },\n\n    /**\n     * Returns the interface ETH speed\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getSpeed(intf, status) {\n      const speed = status?.ethSpeed > -1 ? status.ethSpeed : intf.ethSpeed\n      if (!speed || speed < 0) return '-'\n      return `${speed / 1000} Gbps`\n    },\n\n    /**\n     * Returns the interface type (WAN, LAN, Management / NIC, VLAN, WIREGUARD etc)\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getType(intf) {\n      let type = this.$vuntangle.$t('lan')\n      if (intf.management) type = this.$vuntangle.$t('management')\n      if (intf.wan) type = this.$vuntangle.$t('wan')\n      return `${type} / ${intf.type}`\n    },\n\n    /**\n     * Returns interface IPv4 Address based on status or fallsback on settings\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv4Address(intf, status) {\n      if (!status?.ip4Addr && !intf.v4StaticAddress) return '-'\n\n      let address = ''\n      if (status?.ip4Addr) {\n        address = status.ip4Addr[0]\n      } else if (intf.v4StaticAddress) {\n        if (intf.v4ConfigType === CONFIG_TYPE.DISABLED) {\n          return this.$vuntangle.$t('disabled')\n        }\n        address = intf.v4StaticAddress + (intf.v4StaticPrefix ? `/${intf.v4StaticPrefix}` : '')\n      }\n\n      const addressSource = status\n        ? this.getAddressSource(status)\n        : intf.v4ConfigType?.toLowerCase() || this.$vuntangle.$t('unknown')\n\n      return `${address} (${addressSource})`\n    },\n\n    /**\n     * Returns interface IPv6 Address based on status or fallsback on settings\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv6Address(intf, status) {\n      if (!status?.ip6Addr && !intf.v6StaticAddress) return '-'\n\n      let address = ''\n      if (status?.ip6Addr) {\n        address = status.ip6Addr.join(', ')\n      } else if (intf.v6StaticAddress) {\n        if (intf.v6ConfigType === CONFIG_TYPE.DISABLED) {\n          return this.$vuntangle.$t('disabled')\n        }\n        address = intf.v6StaticAddress + (intf.v6StaticPrefix ? `/${intf.v6StaticPrefix}` : '')\n      }\n      const addressSource = status\n        ? this.getAddressSource(status)\n        : intf.v6ConfigType?.toLowerCase() || this.$vuntangle.$t('unknown')\n      return `${address} (${addressSource})`\n    },\n\n    /**\n     * Returns interface IPv4 Gateway\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv4Gateway(intf, status) {\n      return status?.ip4Gateway || '-'\n    },\n\n    /**\n     * Returns interface IPv6 Gateway\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getIpv6Gateway(intf, status) {\n      return status?.ip6Gateway || '-'\n    },\n\n    /**\n     * Returns DNS Servers\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getDnsServers(intf, status) {\n      const servers = status?.dnsServers\n      return servers?.length ? servers.join(', ') : '-'\n    },\n\n    /**\n     * Returns Download speed\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getDownload(intf, status) {\n      // compute download for non bridged\n      if (!status || !status.connected || status.offline) return '-'\n\n      let downloadKbps = 0\n\n      // for non bridged interfaces\n      if (intf.type !== 'BRIDGE') {\n        if (status.wan) {\n          downloadKbps = status.rxByteRate / 1000\n        }\n        downloadKbps = status.txByteRate / 1000\n      } else {\n        // cummulate download for bridged\n        let downloadSpeed = 0\n        const bridgedInterfaces = this.interfaces.filter(i => intf.bridgedInterfaces?.includes(i.interfaceId))\n        bridgedInterfaces.forEach(i => {\n          const devStatus = this.interfacesStatusMap?.[i.device]\n          if (devStatus) {\n            downloadSpeed += devStatus.txByteRate / 1000\n          }\n        })\n        downloadKbps = Math.round(downloadSpeed * 1000) / 1000\n      }\n\n      return `${downloadKbps} ${this.$vuntangle.$t('kbps')}`\n    },\n\n    /**\n     * Returns Upload speed\n     * @param {Object} intf - interface settings\n     * @param {Object} status - interface status\n     * @returns {String}\n     */\n    getUpload(intf, status) {\n      // compute upload for non bridged\n      if (!status || !status.connected || status.offline) return '-'\n\n      let uploadKbps = 0\n\n      // for non bridged interfaces\n      if (intf.type !== 'BRIDGE') {\n        if (status.wan) {\n          uploadKbps = status.txByteRate / 1000\n        }\n        uploadKbps = status.rxByteRate / 1000\n      } else {\n        // cummulate upload for bridged\n        let uploadSpeed = 0\n        const bridgedInterfaces = this.interfaces.filter(i => intf.bridgedInterfaces?.includes(i.interfaceId))\n        bridgedInterfaces.forEach(i => {\n          const devStatus = this.interfacesStatusMap?.[i.device]\n          if (devStatus) {\n            uploadSpeed += devStatus.rxByteRate / 1000\n          }\n        })\n        uploadKbps = Math.round(uploadSpeed * 1000) / 1000\n      }\n\n      return `${uploadKbps} ${this.$vuntangle.$t('kbps')}`\n    },\n\n    /**\n     * Returns bridged to interface for bridged interfaces\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getBridgedTo(intf) {\n      if (intf.configType !== 'BRIDGED' && intf.type !== 'BRIDGE') return '-'\n      return intf.bridgedInterfaces?.map(intfId => this.interfaces.find(i => i.interfaceId === intfId)?.name)\n    },\n\n    /**\n     * Returns the parent bridge for the interface\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getParentBridge(intf) {\n      // loop interfaces and see if this interface id is set in any other interface 'bridgedInterfaces' property\n      const bridgedInterfaces = this.interfaces.filter(i => i.bridgedInterfaces?.includes(intf.interfaceId))\n      // if nothing found, return -\n      if (bridgedInterfaces.length === 0) return '-'\n      // else, return the name of the bridge\n      return bridgedInterfaces[0].name\n    },\n\n    /**\n     * Returns IPsec local gateway\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecLocalGateway(intf) {\n      return intf.ipsec?.local.gateway || '-'\n    },\n\n    /**\n     * Returns IPsec local networks\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecLocalNetworks(intf) {\n      if (!intf.ipsec?.local?.networks) return '-'\n      return intf.ipsec.local.networks.map(ntk => `${ntk.network}/${ntk.prefix}`)\n    },\n\n    /**\n     * Returns IPsec remote gateway\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecRemoteGateway(intf) {\n      return intf.ipsec?.remote.gateway || '-'\n    },\n\n    /**\n     * Returns IPsec remote networks\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecRemoteNetworks(intf) {\n      if (!intf.ipsec?.remote?.networks) return '-'\n      return intf.ipsec.remote.networks.map(ntk => `${ntk.network}/${ntk.prefix}`)\n    },\n\n    /**\n     * Returns IPsec bound to interface\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecBoundTo(intf) {\n      if (intf.type !== 'IPSEC') return '-'\n\n      if (intf.boundInterfaceId === 0) {\n        return this.$vuntangle.$t('any_wan')\n      }\n\n      const boundInterfaceId = intf.boundInterfaceId\n      const boundInterfaceStatus = this.interfacesStatus?.find(intf => intf.interfaceId === boundInterfaceId)\n\n      if (boundInterfaceStatus) {\n        const name = boundInterfaceStatus.name\n        let address = null\n        if (boundInterfaceStatus.ip4Addr) {\n          if (Array.isArray(boundInterfaceStatus.ip4Addr) && boundInterfaceStatus.ip4Addr[0]) {\n            address = boundInterfaceStatus.ip4Addr[0]\n          }\n        }\n        return `${name}${address ? ' (' + address + ')' : ''}`\n      }\n      return '-'\n    },\n\n    /**\n     * Returns IPsec authentication type\n     * @param {Object} intf - interface settings\n     * @returns {String}\n     */\n    getIpsecAuthType(intf) {\n      if (!intf.ipsec?.authentication?.type) return '-'\n      if (intf.ipsec.authentication.type === 'shared_secret') return this.$vuntangle.$t('shared_secret')\n      return this.$vuntangle.$t('public_key')\n    },\n\n    // helpers\n\n    /**\n     * MFW-2063\n     * return interface address source (e.g. static, dhcp)\n     * addressSource is usually an array ['static', 'static']\n     * this is collected via ubus call and populates addressSource array based on interface \"proto\"\n     * for some bridged interfaces this addressSource might look like ['none', 'static', 'static']\n     */\n    getAddressSource(intfStatus) {\n      const addressSource = intfStatus.addressSource\n      // null or undefined\n      if (!addressSource) return this.$vuntangle.$t('unknown')\n      // not an array (expected a string)\n      if (!Array.isArray(addressSource)) return addressSource\n      // empty array\n      if (!addressSource.length) return this.$vuntangle.$t('unknown')\n\n      let sourceDisplay = null\n      addressSource.forEach(source => {\n        if (sourceDisplay && sourceDisplay !== 'none') {\n          return\n        }\n        if (source !== 'none') {\n          sourceDisplay = source\n        }\n      })\n      return sourceDisplay || this.$vuntangle.$t('unknown')\n    },\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}