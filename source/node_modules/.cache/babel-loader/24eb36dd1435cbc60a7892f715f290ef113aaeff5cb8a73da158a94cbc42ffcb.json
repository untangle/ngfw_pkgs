{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport cloneDeep from 'lodash/cloneDeep';\nimport { VContainer, VSpacer, VDivider } from 'vuetify/lib';\nimport settingsMixin from '../settingsMixin';\nimport util from '../../plugins/util';\nimport UGrid from '../../components/UGrid';\nimport CheckboxRenderer from '../../components/UGrid/renderers/CheckboxRenderer.vue';\nimport dates from '../../plugins/dates';\nimport DynamicBlockList from './DynamicBlockList.vue';\nimport { settingsDefaults as defaults } from './defaults';\nexport default {\n  components: {\n    VContainer: VContainer,\n    VSpacer: VSpacer,\n    VDivider: VDivider,\n    UGrid: UGrid\n  },\n  mixins: [settingsMixin],\n  defaults: defaults,\n  props: {\n    status: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    fetching: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      combinedData: [],\n      selection: [],\n      frameworkComponents: {\n        CheckboxRenderer: CheckboxRenderer\n      }\n    };\n  },\n  computed: {\n    columnDefs: function columnDefs() {\n      var _this = this;\n      var columns = [{\n        headerName: this.$vuntangle.$t('enabled'),\n        field: 'enabled',\n        minWidth: 50,\n        width: 80,\n        flex: 0,\n        cellRenderer: 'CheckboxRenderer'\n      }, {\n        headerName: this.$vuntangle.$t('source_name'),\n        field: 'name',\n        flex: 1\n      }, {\n        headerName: this.$vuntangle.$t('source_url'),\n        field: 'source',\n        flex: 2\n      }, {\n        headerName: this.$vuntangle.$t('polling_interval'),\n        minWidth: 120,\n        valueGetter: function valueGetter(_ref) {\n          var data = _ref.data;\n          if (data.pollingTime && data.pollingUnit) {\n            return data.pollingTime + ' ' + _this.$vuntangle.$tc(data.pollingUnit.toLowerCase(), data.pollingTime);\n          } else {\n            return _this.$vuntangle.$t('no_polling');\n          }\n        },\n        comparator: function comparator(a, b, nodeA, nodeB) {\n          return util.compareTimeIntervals(nodeA.data.pollingTime, nodeA.data.pollingUnit, nodeB.data.pollingTime, nodeB.data.pollingUnit);\n        }\n      }];\n      if (!this.features.isTemplateView) {\n        columns.splice(0, 0, {\n          headerName: this.$vuntangle.$t('status'),\n          field: 'status',\n          minWidth: 50,\n          width: 80,\n          flex: 0,\n          sortable: true,\n          valueGetter: function valueGetter(_ref2) {\n            var data = _ref2.data;\n            return _this.$vuntangle.$t(_this.getStatusTooltip(data));\n          },\n          cellRenderer: 'CellWithTooltip',\n          cellRendererParams: function cellRendererParams(params) {\n            return {\n              icon: 'mdi-circle',\n              small: true,\n              color: _this.getStatusColor(params.data),\n              top: true,\n              tooltip: _this.$vuntangle.$t(_this.getStatusTooltip(params.data))\n            };\n          }\n        });\n        columns.push.apply(columns, [{\n          headerName: this.$vuntangle.$t('count'),\n          field: 'num_entries',\n          minWidth: 50,\n          width: 70,\n          flex: 0,\n          valueFormatter: function valueFormatter(_ref3) {\n            var value = _ref3.value;\n            return value || value === 0 ? value : '-';\n          }\n        }, {\n          headerName: this.$vuntangle.$t('last_updated'),\n          field: 'last_updated_time',\n          valueFormatter: function valueFormatter(_ref4) {\n            var value = _ref4.value;\n            return dates.formatDateFromApi(value * 1000) || '-';\n          }\n        }]);\n      }\n      return columns;\n    },\n    rowActions: function rowActions() {\n      var _this2 = this;\n      return [{\n        icon: 'mdi-download',\n        isHidden: function isHidden(_ref5) {\n          var data = _ref5.data;\n          return !_this2.settingsCopy.enabled || !_this2.settings.enabled || !_this2.isSavedAsEnabled(data.id) || _this2.features.isTemplateView;\n        },\n        tooltip: this.$vuntangle.$t('download_to_appliance'),\n        handler: function handler(_ref6) {\n          var data = _ref6.data;\n          return _this2.$emit('download', [data.id]);\n        }\n      }, {\n        icon: 'mdi-publish',\n        isHidden: function isHidden(_ref7) {\n          var data = _ref7.data;\n          return !data.num_entries || _this2.features.isTemplateView;\n        },\n        tooltip: this.$vuntangle.$t('export_csv'),\n        handler: function handler(_ref8) {\n          var data = _ref8.data;\n          return _this2.$emit('download-csv', data.id);\n        }\n      }, {\n        icon: 'mdi-pencil',\n        tooltip: this.$vuntangle.$t('edit'),\n        handler: this.onEdit\n      }, {\n        icon: 'mdi-delete',\n        tooltip: this.$vuntangle.$t('remove'),\n        handler: function handler(_ref9) {\n          var data = _ref9.data;\n          return _this2.onDeleteConfiguration(data);\n        }\n      }];\n    }\n  },\n  /** watchers used to generate combined data from settings and status */\n  watch: {\n    settingsCopy: {\n      handler: function handler() {\n        this.setCombinedData();\n      },\n      immediate: true,\n      deep: true\n    },\n    /** sets the enabled flag on configurations when using the grid Enabled column checkboxes  */\n    combinedData: {\n      handler: function handler(data) {\n        var _this3 = this;\n        data.forEach(function (entry, index) {\n          _this3.settingsCopy.configurations[index].enabled = entry.enabled;\n        });\n      },\n      immediate: true,\n      deep: true\n    },\n    status: {\n      handler: function handler() {\n        this.setCombinedData();\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    /**\n     * Combines the settings data with the status data to be displayed in the grid\n     */\n    setCombinedData: function setCombinedData() {\n      var _this4 = this;\n      if (!this.settingsCopy || !this.status) return;\n      var list = cloneDeep(this.settingsCopy.configurations);\n      list.forEach(function (conf) {\n        var confStatus = _this4.status.find(function (s) {\n          return s.uuid === conf.id;\n        });\n        if (confStatus) {\n          _this4.$set(conf, 'num_entries', confStatus.num_entries);\n          _this4.$set(conf, 'status', confStatus.status);\n          _this4.$set(conf, 'last_updated_time', confStatus.last_updated_time);\n        }\n      });\n      this.combinedData = list;\n    },\n    /**\n     * Downloads the selected configurations to the appliance\n     */\n    downloadSelected: function downloadSelected() {\n      var _this5 = this;\n      var list = [];\n      this.selection.forEach(function (entry) {\n        var conf = _this5.settingsCopy.configurations.find(function (c) {\n          return c.id === entry.id;\n        });\n        if (conf && conf.enabled && _this5.isSavedAsEnabled(conf.id)) {\n          list.push(conf.id);\n        }\n      });\n      if (list.length) {\n        this.$emit('download', list);\n      }\n    },\n    /**\n     * Enables the mass action to downloads the selected configurations to the appliance\n     * Requires selecting no configurations which are invalid for download\n     */\n    canSelectedDownload: function canSelectedDownload() {\n      var _this6 = this;\n      return this.selection.length && this.settingsCopy.enabled && this.settings.enabled && !this.selection.find(function (s) {\n        var conf = _this6.settingsCopy.configurations.find(function (c) {\n          return c.id === s.id;\n        });\n        return !(conf && conf.enabled && _this6.isSavedAsEnabled(conf.id));\n      });\n    },\n    /**\n     * Returns the saved `enabled` state of the configuration\n     * @param {String} confId - the configuration UUID for which `enabled` prop is set\n     */\n    isSavedAsEnabled: function isSavedAsEnabled(confId) {\n      var conf = this.settings.configurations.find(function (c) {\n        return c.id === confId;\n      });\n      return conf ? conf.enabled : false;\n    },\n    /**\n     * Shows confirm dialog when deleting a configuration\n     * Upon confirm the `delete-configuration` gets emitted to the host app\n     * @param configuration - complete configuration object for respective row\n     */\n    onDeleteConfiguration: function onDeleteConfiguration(configuration) {\n      var _this7 = this;\n      /**\n       * in case of global templates the entry is not just removed from list\n       * whithout being pushed, as the template may not jave been yet created\n       */\n      if (this.features.isTemplateView) {\n        var index = this.settingsCopy.configurations.findIndex(function (conf) {\n          return conf.id === configuration.id;\n        });\n        if (index >= 0) {\n          this.settingsCopy.configurations.splice(index, 1);\n        }\n        return;\n      }\n      this.$vuntangle.confirm.show({\n        title: \"<i class=\\\"mdi mdi-alert\\\" style=\\\"font-style: normal;\\\"> \".concat(this.$vuntangle.$t('confirm'), \"</i>\"),\n        message: this.$vuntangle.$t('remove_block_list', [configuration.name]),\n        confirmLabel: this.$vuntangle.$t('yes'),\n        cancelLabel: this.$vuntangle.$t('no'),\n        action: function () {\n          var _action = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this7.$emit('delete-configuration', configuration.id);\n                case 2:\n                  resolve();\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          function action(_x) {\n            return _action.apply(this, arguments);\n          }\n          return action;\n        }()\n      });\n    },\n    /**\n     * Get the color for the status icon\n     * @param item - row item\n     */\n    getStatusColor: function getStatusColor(item) {\n      if (!this.settings.enabled || !this.isSavedAsEnabled(item.id)) {\n        return 'gray'; // gray if the blocklist or all blocklists are saved as disabled\n      } else if (item.status === undefined || item.status == null) {\n        return 'gray'; // gray if the blocklist has never polled for status\n      } else if (item.status) {\n        return '#68bd49'; // green if it has polled and reached the url\n      } else {\n        return 'red'; // red indicates failure to reach url\n      }\n    },\n    /**\n     * Get the tooltip text for the status icon\n     * @param item - row item\n     */\n    getStatusTooltip: function getStatusTooltip(item) {\n      if (!this.settings.enabled || !this.isSavedAsEnabled(item.id)) {\n        return 'disabled'; // the blocklist or all blocklists are saved as disabled\n      } else if (item.status === undefined || item.status == null) {\n        return 'last_update_never'; // blocklist has never polled for status\n      } else if (item.status) {\n        return 'last_update_succeeded'; // it has polled and reached the url\n      } else {\n        return 'last_update_failed'; // failure to reach url\n      }\n    },\n    /**\n     * Shows route edit dialog, it adds a new route if index undefined\n     * @param index - number\n     */\n    onEdit: function onEdit(_ref10) {\n      var _this8 = this;\n      var data = _ref10.data;\n      var id = data === null || data === void 0 ? void 0 : data.id;\n      // extract only conf data on grid row click (avoid getting status data in conf columns)\n      var settings = this.settingsCopy.configurations.find(function (conf) {\n        return conf.id === id;\n      }) || undefined;\n      this.$vuntangle.dialog.show({\n        title: !id ? this.$vuntangle.$t('add_blocklist') : this.$vuntangle.$t('edit_blocklist'),\n        component: DynamicBlockList,\n        width: 800,\n        height: 'auto',\n        actionLabel: !id ? this.$vuntangle.$t('add') : this.$vuntangle.$t('update'),\n        componentProps: {\n          settings: settings\n        },\n        componentEvents: {\n          // updates configuration\n          update: function update(entry) {\n            var index = _this8.settingsCopy.configurations.findIndex(function (conf) {\n              return conf.id === id;\n            });\n            if (index >= 0) _this8.settingsCopy.configurations.splice(index, 1, entry);else _this8.settingsCopy.configurations.push(entry);\n\n            /**\n             * for global templates the changes are not going to be pushed right away\n             * upon add/edit/delete a list entry as the template might not have been created yet\n             */\n            if (_this8.features.isTemplateView) return;\n            _this8.$emit('update-settings', _this8.settingsCopy);\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["cloneDeep","VContainer","VSpacer","VDivider","settingsMixin","util","UGrid","CheckboxRenderer","dates","DynamicBlockList","settingsDefaults","defaults","components","mixins","props","status","type","Array","default","fetching","Boolean","data","combinedData","selection","frameworkComponents","computed","columnDefs","_this","columns","headerName","$vuntangle","$t","field","minWidth","width","flex","cellRenderer","valueGetter","_ref","pollingTime","pollingUnit","$tc","toLowerCase","comparator","a","b","nodeA","nodeB","compareTimeIntervals","features","isTemplateView","splice","sortable","_ref2","getStatusTooltip","cellRendererParams","params","icon","small","color","getStatusColor","top","tooltip","push","apply","valueFormatter","_ref3","value","_ref4","formatDateFromApi","rowActions","_this2","isHidden","_ref5","settingsCopy","enabled","settings","isSavedAsEnabled","id","handler","_ref6","$emit","_ref7","num_entries","_ref8","onEdit","_ref9","onDeleteConfiguration","watch","setCombinedData","immediate","deep","_this3","forEach","entry","index","configurations","methods","_this4","list","conf","confStatus","find","s","uuid","$set","last_updated_time","downloadSelected","_this5","c","length","canSelectedDownload","_this6","confId","configuration","_this7","findIndex","confirm","show","title","concat","message","name","confirmLabel","cancelLabel","action","_action","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resolve","wrap","_callee$","_context","prev","next","stop","_x","arguments","item","undefined","_ref10","_this8","dialog","component","height","actionLabel","componentProps","componentEvents","update"],"sources":["node_modules/vuntangle/src/shared/SettingsDynamicBlockLists/DynamicBlockLists.vue"],"sourcesContent":["<template>\n  <v-container :fluid=\"true\" :class=\"`d-flex flex-column flex-grow-1 shared-cmp ${disabled ? 'disabled' : ''}`\">\n    <div class=\"d-flex align-center\">\n      <h2 class=\"font-weight-light\">{{ $vuntangle.$t('dynamic_blocklist') }}</h2>\n      <v-spacer />\n      <slot name=\"actions\" :new-settings=\"settingsCopy\" :is-dirty=\"isDirty\" :disabled=\"disabled\" />\n    </div>\n    <v-divider class=\"my-2\" />\n    <p class=\"body-2 my-4\">\n      {{ $vuntangle.$t('dynamic_blocklist_description') }}\n    </p>\n    <u-section v-if=\"!!$slots['extra-fields']\">\n      <slot name=\"extra-fields\" />\n    </u-section>\n    <div class=\"d-flex my-2 align-center\">\n      <!-- Enable/Disable toggle -->\n      <v-switch\n        v-model=\"settingsCopy.enabled\"\n        :disabled=\"disabled\"\n        class=\"body-2 my-0 py-0\"\n        dense\n        inset\n        hide-details\n        :label=\"\n          $vuntangle.$t('toggle_block_list', [\n            settingsCopy.enabled ? $vuntangle.$t('enabled') : $vuntangle.$t('disabled'),\n          ])\n        \"\n      />\n      <v-spacer />\n\n      <u-btn\n        v-if=\"!features.isTemplateView\"\n        color=\"primary\"\n        class=\"mr-2\"\n        :disabled=\"disabled || !settings.enabled || !canSelectedDownload()\"\n        @click=\"downloadSelected()\"\n      >\n        <v-icon left>mdi-download</v-icon> {{ $vuntangle.$t('download_to_appliance') }}\n      </u-btn>\n\n      <u-btn color=\"primary\" @click=\"onEdit({})\">\n        <v-icon left>mdi-plus</v-icon> {{ $vuntangle.$t('add_source') }}\n      </u-btn>\n    </div>\n\n    <u-grid\n      id=\"dynamic-blocklists\"\n      row-node-id=\"id\"\n      :row-data=\"combinedData\"\n      :column-defs=\"columnDefs\"\n      :enable-refresh=\"!features.isTemplateView\"\n      :row-actions=\"rowActions\"\n      :fetching=\"fetching\"\n      :selection-type=\"!features.isTemplateView ? 'multiAction' : ''\"\n      :selection.sync=\"selection\"\n      :framework-components=\"frameworkComponents\"\n      :custom-grid-options=\"{ suppressRowClickSelection: true }\"\n      @row-clicked=\"onEdit\"\n      @refresh=\"$emit('refresh')\"\n    />\n  </v-container>\n</template>\n\n<script>\n  import cloneDeep from 'lodash/cloneDeep'\n  import { VContainer, VSpacer, VDivider } from 'vuetify/lib'\n  import settingsMixin from '../settingsMixin'\n  import util from '../../plugins/util'\n  import UGrid from '../../components/UGrid'\n  import CheckboxRenderer from '../../components/UGrid/renderers/CheckboxRenderer.vue'\n  import dates from '../../plugins/dates'\n  import DynamicBlockList from './DynamicBlockList.vue'\n  import { settingsDefaults as defaults } from './defaults'\n\n  export default {\n    components: { VContainer, VSpacer, VDivider, UGrid },\n    mixins: [settingsMixin],\n    defaults,\n    props: {\n      status: { type: Array, default: () => [] },\n      fetching: { type: Boolean, default: false },\n    },\n    data() {\n      return {\n        combinedData: [],\n        selection: [],\n        frameworkComponents: {\n          CheckboxRenderer,\n        },\n      }\n    },\n    computed: {\n      columnDefs() {\n        const columns = [\n          {\n            headerName: this.$vuntangle.$t('enabled'),\n            field: 'enabled',\n            minWidth: 50,\n            width: 80,\n            flex: 0,\n            cellRenderer: 'CheckboxRenderer',\n          },\n          { headerName: this.$vuntangle.$t('source_name'), field: 'name', flex: 1 },\n          { headerName: this.$vuntangle.$t('source_url'), field: 'source', flex: 2 },\n          {\n            headerName: this.$vuntangle.$t('polling_interval'),\n            minWidth: 120,\n            valueGetter: ({ data }) => {\n              if (data.pollingTime && data.pollingUnit) {\n                return data.pollingTime + ' ' + this.$vuntangle.$tc(data.pollingUnit.toLowerCase(), data.pollingTime)\n              } else {\n                return this.$vuntangle.$t('no_polling')\n              }\n            },\n            comparator: (a, b, nodeA, nodeB) => {\n              return util.compareTimeIntervals(\n                nodeA.data.pollingTime,\n                nodeA.data.pollingUnit,\n                nodeB.data.pollingTime,\n                nodeB.data.pollingUnit,\n              )\n            },\n          },\n        ]\n        if (!this.features.isTemplateView) {\n          columns.splice(0, 0, {\n            headerName: this.$vuntangle.$t('status'),\n            field: 'status',\n            minWidth: 50,\n            width: 80,\n            flex: 0,\n            sortable: true,\n            valueGetter: ({ data }) => {\n              return this.$vuntangle.$t(this.getStatusTooltip(data))\n            },\n            cellRenderer: 'CellWithTooltip',\n            cellRendererParams: params => {\n              return {\n                icon: 'mdi-circle',\n                small: true,\n                color: this.getStatusColor(params.data),\n                top: true,\n                tooltip: this.$vuntangle.$t(this.getStatusTooltip(params.data)),\n              }\n            },\n          })\n          columns.push(\n            ...[\n              {\n                headerName: this.$vuntangle.$t('count'),\n                field: 'num_entries',\n                minWidth: 50,\n                width: 70,\n                flex: 0,\n                valueFormatter: ({ value }) => {\n                  return value || value === 0 ? value : '-'\n                },\n              },\n              {\n                headerName: this.$vuntangle.$t('last_updated'),\n                field: 'last_updated_time',\n                valueFormatter: ({ value }) => {\n                  return dates.formatDateFromApi(value * 1000) || '-'\n                },\n              },\n            ],\n          )\n        }\n        return columns\n      },\n\n      rowActions() {\n        return [\n          {\n            icon: 'mdi-download',\n            isHidden: ({ data }) => {\n              return (\n                !this.settingsCopy.enabled ||\n                !this.settings.enabled ||\n                !this.isSavedAsEnabled(data.id) ||\n                this.features.isTemplateView\n              )\n            },\n            tooltip: this.$vuntangle.$t('download_to_appliance'),\n            handler: ({ data }) => this.$emit('download', [data.id]),\n          },\n          {\n            icon: 'mdi-publish',\n            isHidden: ({ data }) => {\n              return !data.num_entries || this.features.isTemplateView\n            },\n            tooltip: this.$vuntangle.$t('export_csv'),\n            handler: ({ data }) => this.$emit('download-csv', data.id),\n          },\n          {\n            icon: 'mdi-pencil',\n            tooltip: this.$vuntangle.$t('edit'),\n            handler: this.onEdit,\n          },\n          {\n            icon: 'mdi-delete',\n            tooltip: this.$vuntangle.$t('remove'),\n            handler: ({ data }) => this.onDeleteConfiguration(data),\n          },\n        ]\n      },\n    },\n\n    /** watchers used to generate combined data from settings and status */\n    watch: {\n      settingsCopy: {\n        handler() {\n          this.setCombinedData()\n        },\n        immediate: true,\n        deep: true,\n      },\n      /** sets the enabled flag on configurations when using the grid Enabled column checkboxes  */\n      combinedData: {\n        handler(data) {\n          data.forEach((entry, index) => {\n            this.settingsCopy.configurations[index].enabled = entry.enabled\n          })\n        },\n        immediate: true,\n        deep: true,\n      },\n\n      status: {\n        handler() {\n          this.setCombinedData()\n        },\n        immediate: true,\n        deep: true,\n      },\n    },\n\n    methods: {\n      /**\n       * Combines the settings data with the status data to be displayed in the grid\n       */\n      setCombinedData() {\n        if (!this.settingsCopy || !this.status) return\n        const list = cloneDeep(this.settingsCopy.configurations)\n        list.forEach(conf => {\n          const confStatus = this.status.find(s => s.uuid === conf.id)\n          if (confStatus) {\n            this.$set(conf, 'num_entries', confStatus.num_entries)\n            this.$set(conf, 'status', confStatus.status)\n            this.$set(conf, 'last_updated_time', confStatus.last_updated_time)\n          }\n        })\n        this.combinedData = list\n      },\n\n      /**\n       * Downloads the selected configurations to the appliance\n       */\n      downloadSelected() {\n        const list = []\n        this.selection.forEach(entry => {\n          const conf = this.settingsCopy.configurations.find(c => c.id === entry.id)\n          if (conf && conf.enabled && this.isSavedAsEnabled(conf.id)) {\n            list.push(conf.id)\n          }\n        })\n        if (list.length) {\n          this.$emit('download', list)\n        }\n      },\n\n      /**\n       * Enables the mass action to downloads the selected configurations to the appliance\n       * Requires selecting no configurations which are invalid for download\n       */\n      canSelectedDownload() {\n        return (\n          this.selection.length &&\n          this.settingsCopy.enabled &&\n          this.settings.enabled &&\n          !this.selection.find(s => {\n            const conf = this.settingsCopy.configurations.find(c => c.id === s.id)\n            return !(conf && conf.enabled && this.isSavedAsEnabled(conf.id))\n          })\n        )\n      },\n\n      /**\n       * Returns the saved `enabled` state of the configuration\n       * @param {String} confId - the configuration UUID for which `enabled` prop is set\n       */\n      isSavedAsEnabled(confId) {\n        const conf = this.settings.configurations.find(c => c.id === confId)\n        return conf ? conf.enabled : false\n      },\n\n      /**\n       * Shows confirm dialog when deleting a configuration\n       * Upon confirm the `delete-configuration` gets emitted to the host app\n       * @param configuration - complete configuration object for respective row\n       */\n      onDeleteConfiguration(configuration) {\n        /**\n         * in case of global templates the entry is not just removed from list\n         * whithout being pushed, as the template may not jave been yet created\n         */\n        if (this.features.isTemplateView) {\n          const index = this.settingsCopy.configurations.findIndex(conf => conf.id === configuration.id)\n          if (index >= 0) {\n            this.settingsCopy.configurations.splice(index, 1)\n          }\n          return\n        }\n\n        this.$vuntangle.confirm.show({\n          title: `<i class=\"mdi mdi-alert\" style=\"font-style: normal;\"> ${this.$vuntangle.$t('confirm')}</i>`,\n          message: this.$vuntangle.$t('remove_block_list', [configuration.name]),\n          confirmLabel: this.$vuntangle.$t('yes'),\n          cancelLabel: this.$vuntangle.$t('no'),\n          action: async resolve => {\n            await this.$emit('delete-configuration', configuration.id)\n            resolve()\n          },\n        })\n      },\n\n      /**\n       * Get the color for the status icon\n       * @param item - row item\n       */\n      getStatusColor(item) {\n        if (!this.settings.enabled || !this.isSavedAsEnabled(item.id)) {\n          return 'gray' // gray if the blocklist or all blocklists are saved as disabled\n        } else if (item.status === undefined || item.status == null) {\n          return 'gray' // gray if the blocklist has never polled for status\n        } else if (item.status) {\n          return '#68bd49' // green if it has polled and reached the url\n        } else {\n          return 'red' // red indicates failure to reach url\n        }\n      },\n\n      /**\n       * Get the tooltip text for the status icon\n       * @param item - row item\n       */\n      getStatusTooltip(item) {\n        if (!this.settings.enabled || !this.isSavedAsEnabled(item.id)) {\n          return 'disabled' // the blocklist or all blocklists are saved as disabled\n        } else if (item.status === undefined || item.status == null) {\n          return 'last_update_never' // blocklist has never polled for status\n        } else if (item.status) {\n          return 'last_update_succeeded' // it has polled and reached the url\n        } else {\n          return 'last_update_failed' // failure to reach url\n        }\n      },\n\n      /**\n       * Shows route edit dialog, it adds a new route if index undefined\n       * @param index - number\n       */\n      onEdit({ data }) {\n        const id = data?.id\n        // extract only conf data on grid row click (avoid getting status data in conf columns)\n        const settings = this.settingsCopy.configurations.find(conf => conf.id === id) || undefined\n\n        this.$vuntangle.dialog.show({\n          title: !id ? this.$vuntangle.$t('add_blocklist') : this.$vuntangle.$t('edit_blocklist'),\n          component: DynamicBlockList,\n          width: 800,\n          height: 'auto',\n          actionLabel: !id ? this.$vuntangle.$t('add') : this.$vuntangle.$t('update'),\n          componentProps: {\n            settings,\n          },\n          componentEvents: {\n            // updates configuration\n            update: entry => {\n              const index = this.settingsCopy.configurations.findIndex(conf => conf.id === id)\n              if (index >= 0) this.settingsCopy.configurations.splice(index, 1, entry)\n              else this.settingsCopy.configurations.push(entry)\n\n              /**\n               * for global templates the changes are not going to be pushed right away\n               * upon add/edit/delete a list entry as the template might not have been created yet\n               */\n              if (this.features.isTemplateView) return\n              this.$emit('update-settings', this.settingsCopy)\n            },\n          },\n        })\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}