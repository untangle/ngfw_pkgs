{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ValidationObserver } from 'vee-validate';\nimport { VRow, VCol, VSelect, VSwitch, VCheckbox, VBtnToggle, VBtn, VTabsItems, VTabItem } from 'vuetify/lib';\nimport mixin from './mixin';\nimport Ipv4 from './ipv4/Ipv4.vue';\nimport Ipv6 from './ipv6/Ipv6.vue';\nimport Dhcp from './dhcp/Dhcp.vue';\nimport Vrrp from './vrrp/Vrrp.vue';\nimport Qos from './qos/Qos.vue';\nimport Advanced from './advanced/Advanced.vue';\nimport OpenVpn from './openvpn/OpenVpn.vue';\nimport Wireguard from './wireguard/Wireguard.vue';\nimport Wifi from './wifi/Wifi.vue';\nimport Wwan from './wwan/Wwan.vue';\nimport { IpsecNetwork, IpsecAuth, IpsecCipherSuites } from './ipsec';\nexport default {\n  components: {\n    ValidationObserver: ValidationObserver,\n    Ipv4: Ipv4,\n    Ipv6: Ipv6,\n    Dhcp: Dhcp,\n    Vrrp: Vrrp,\n    Qos: Qos,\n    Advanced: Advanced,\n    OpenVpn: OpenVpn,\n    Wireguard: Wireguard,\n    Wifi: Wifi,\n    Wwan: Wwan,\n    IpsecNetwork: IpsecNetwork,\n    IpsecAuth: IpsecAuth,\n    IpsecCipherSuites: IpsecCipherSuites,\n    VRow: VRow,\n    VCol: VCol,\n    VSelect: VSelect,\n    VSwitch: VSwitch,\n    VCheckbox: VCheckbox,\n    VBtnToggle: VBtnToggle,\n    VBtn: VBtn,\n    VTabsItems: VTabsItems,\n    VTabItem: VTabItem\n  },\n  mixins: [mixin],\n  inject: ['$intf', '$interfaces', '$status', '$disabled', '$onDelete', '$isSaving', '$features'],\n  data: function data() {\n    return {\n      selectedTab: null\n    };\n  },\n  computed: {\n    configTypeTranslated: function configTypeTranslated() {\n      return this.$t(this.intf.configType.toLowerCase());\n    },\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    features: function features(_ref2) {\n      var $features = _ref2.$features;\n      return $features();\n    },\n    interfaces: function interfaces(_ref3) {\n      var $interfaces = _ref3.$interfaces;\n      return $interfaces();\n    },\n    status: function status(_ref4) {\n      var $status = _ref4.$status;\n      return $status();\n    },\n    disabled: function disabled(_ref5) {\n      var $disabled = _ref5.$disabled;\n      return $disabled();\n    },\n    isSaving: function isSaving(_ref6) {\n      var $isSaving = _ref6.$isSaving;\n      return $isSaving();\n    },\n    /**\n     * used to display a warning message when wan interface gets disabled\n     * @returns {String} the interfaces names bound to this wan\n     */\n    boundInterfaces: function boundInterfaces() {\n      var _this = this;\n      if (!this.intf.wan || this.intf.enabled) {\n        return '';\n      }\n      return this.interfaces.reduce(function (boundInterfaces, intf) {\n        if (intf.boundInterfaceId === _this.intf.interfaceId) {\n          boundInterfaces.push(intf.name);\n        }\n        return boundInterfaces;\n      }, []).join(', ');\n    },\n    /**\n     * returns an array of components to be shown as tabs\n     */\n    tabs: function tabs(_ref7) {\n      var intf = _ref7.intf,\n        showAddressed = _ref7.showAddressed,\n        showDhcp = _ref7.showDhcp,\n        showVrrp = _ref7.showVrrp,\n        showQos = _ref7.showQos,\n        interfaces = _ref7.interfaces;\n      var intfIdToNameMap = {};\n      var parentBridgedIntfMap = {};\n      var isBridged = false;\n      interfaces.forEach(function (i) {\n        return intfIdToNameMap[i.interfaceId] = i.name;\n      });\n      var _iterator = _createForOfIteratorHelper(interfaces),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _intf = _step.value;\n          if (_intf.bridgedInterfaces) {\n            var _iterator2 = _createForOfIteratorHelper(_intf.bridgedInterfaces),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var bridgeIntf = _step2.value;\n                parentBridgedIntfMap[bridgeIntf] = intfIdToNameMap[_intf.interfaceId];\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (parentBridgedIntfMap[intf.interfaceId]) {\n        isBridged = true;\n      }\n      var isWiFiBridged = intf.type === 'WIFI' && isBridged;\n      return [].concat(_toConsumableArray(showAddressed && !isWiFiBridged ? [{\n        cmp: 'Ipv4',\n        key: 'ipv4'\n      }, {\n        cmp: 'Ipv6',\n        key: 'ipv6'\n      }] : []), _toConsumableArray(showDhcp && !isWiFiBridged ? [{\n        cmp: 'Dhcp',\n        key: 'dhcp'\n      }] : []), _toConsumableArray(showQos ? [{\n        cmp: 'Qos',\n        key: 'qos'\n      }] : []), _toConsumableArray(showVrrp ? [{\n        cmp: 'Vrrp',\n        key: 'vrrp'\n      }] : []), _toConsumableArray(intf.type === 'WIFI' ? [{\n        cmp: 'Wifi',\n        key: 'wifi'\n      }] : []), _toConsumableArray(intf.type === 'WWAN' ? [{\n        cmp: 'Wwan',\n        key: 'lte'\n      }] : []), _toConsumableArray(intf.type === 'OPENVPN' ? [{\n        cmp: 'OpenVpn',\n        key: 'openvpn'\n      }] : []), _toConsumableArray(intf.type === 'WIREGUARD' ? [{\n        cmp: 'Wireguard',\n        key: 'wireguard'\n      }] : []), _toConsumableArray(intf.type === 'IPSEC' ? [{\n        cmp: 'IpsecNetwork',\n        key: 'network'\n      }, {\n        cmp: 'IpsecAuth',\n        key: 'authentication'\n      }, {\n        cmp: 'IpsecCipherSuites',\n        key: 'cipher_suites'\n      }] : []), _toConsumableArray(!isWiFiBridged && intf.type !== 'BRIDGE' ? [{\n        cmp: 'Advanced',\n        key: 'advanced'\n      }] : []));\n    }\n  },\n  watch: {\n    // special case if the wireguard type is set to 'TUNNEL', make sure the bound interface is not 'any' (0)\n    'intf.wireguardType': {\n      immediate: true,\n      handler: function handler(newWireguardType) {\n        if (newWireguardType === 'TUNNEL' && this.intf.boundInterfaceId === 0) {\n          this.intf.boundInterfaceId = null;\n        }\n      }\n    },\n    // update VLAN interface `wan` and `natEgress` options based on selected parent interface\n    'intf.boundInterfaceId': function intfBoundInterfaceId(id) {\n      if (!id || !this.intf) {\n        return;\n      }\n      if (this.intf.type === 'VLAN') {\n        var parentIntf = this.interfaces.find(function (_ref8) {\n          var interfaceId = _ref8.interfaceId;\n          return interfaceId === id;\n        });\n        this.intf.wan = parentIntf.wan;\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.selectedTab = this.tabs.length ? this.tabs[0].key : undefined;\n  },\n  methods: {\n    validate: function validate() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var commonValid, invalidTab, promises, tabsValid;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this2.$refs.common.validate();\n            case 2:\n              commonValid = _context2.sent;\n              if (!_this2.showTabs) {\n                _context2.next = 11;\n                break;\n              }\n              invalidTab = null; // check if tabs fields are valid\n              promises = _this2.tabs.map(/*#__PURE__*/function () {\n                var _ref9 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(tab) {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return _this2.$refs[tab.key][0].validate();\n                      case 2:\n                        tab.valid = _context.sent;\n                        if (!tab.valid && !invalidTab) {\n                          invalidTab = tab.key;\n                        }\n                        return _context.abrupt(\"return\", tab.valid);\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return function (_x) {\n                  return _ref9.apply(this, arguments);\n                };\n              }()); // returns an array of resolved promises into `true` (valid) or `false` (invalid)\n              _context2.next = 8;\n              return Promise.all(promises);\n            case 8:\n              tabsValid = _context2.sent;\n              if (invalidTab) _this2.selectedTab = invalidTab;\n              return _context2.abrupt(\"return\", commonValid && !tabsValid.includes(false));\n            case 11:\n              return _context2.abrupt(\"return\", commonValid);\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    /**\n     * MFW-2038, MFW-2047\n     * handles the NAT egress value (true/false) explicitly when user\n     * turns an interface to WAN via UI switcher (if switcher is enabled)\n     * - by default NAT egress will be pre-set to true (with ability to turn it to false if wanted)\n     * - except for IPsec interfaces for which NAT egress will not change (will remain as false)\n     * @param {Boolean} isWan - true/false\n     */\n    handleNatEgress: function handleNatEgress(isWan) {\n      if (isWan && this.intf.type !== 'IPSEC') {\n        this.intf.natEgress = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["ValidationObserver","VRow","VCol","VSelect","VSwitch","VCheckbox","VBtnToggle","VBtn","VTabsItems","VTabItem","mixin","Ipv4","Ipv6","Dhcp","Vrrp","Qos","Advanced","OpenVpn","Wireguard","Wifi","Wwan","IpsecNetwork","IpsecAuth","IpsecCipherSuites","components","mixins","inject","data","selectedTab","computed","configTypeTranslated","$t","intf","configType","toLowerCase","_ref","$intf","features","_ref2","$features","interfaces","_ref3","$interfaces","status","_ref4","$status","disabled","_ref5","$disabled","isSaving","_ref6","$isSaving","boundInterfaces","_this","wan","enabled","reduce","boundInterfaceId","interfaceId","push","name","join","tabs","_ref7","showAddressed","showDhcp","showVrrp","showQos","intfIdToNameMap","parentBridgedIntfMap","isBridged","forEach","i","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","bridgedInterfaces","_iterator2","_step2","bridgeIntf","err","e","f","isWiFiBridged","type","concat","_toConsumableArray","cmp","key","watch","immediate","handler","newWireguardType","intfBoundInterfaceId","id","parentIntf","find","_ref8","mounted","length","undefined","methods","validate","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","commonValid","invalidTab","promises","tabsValid","wrap","_callee2$","_context2","prev","next","$refs","common","sent","showTabs","map","_ref9","_callee","tab","_callee$","_context","valid","abrupt","stop","_x","apply","arguments","Promise","all","includes","handleNatEgress","isWan","natEgress"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/Common.vue"],"sourcesContent":["<template>\n  <v-form :disabled=\"disabled\" :class=\"{ 'shared-cmp disabled': disabled }\">\n    <ValidationObserver ref=\"common\">\n      <div class=\"d-flex align-center\" style=\"gap: 48px\">\n        <!-- enabled -->\n        <v-switch v-model=\"intf.enabled\" :label=\"$t('interface_enabled')\" />\n\n        <v-spacer />\n\n        <u-alert v-if=\"boundInterfaces\" class=\"ma-0 py-2\" info>\n          <span v-html=\"$t('bound_wan_interface_warning', [boundInterfaces])\"></span>\n        </u-alert>\n        <!-- delete action button, available for virtual interfaces only when editing -->\n        <u-btn v-if=\"showDelete\" text color=\"red\" @click=\"$onDelete\">\n          {{ $t('delete_interface') }}\n        </u-btn>\n      </div>\n\n      <v-row>\n        <!-- name -->\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" :rules=\"!isSaving ? interfaceNameRules : ''\">\n            <u-text-field v-model=\"intf.name\" :label=\"$t('interface_name')\" maxlength=\"10\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n\n        <!-- configType -->\n        <v-col v-if=\"showConfigType && features.hasBridged\">\n          <u-select\n            v-model=\"intf.configType\"\n            :items=\"configTypes\"\n            :label=\"$t('config_type')\"\n            :disabled=\"configTypes.length < 1\"\n          />\n        </v-col>\n        <v-col v-else-if=\"showConfigType\">\n          <u-text-field v-model=\"configTypeTranslated\" :label=\"$t('config_type')\" :disabled=\"true\" />\n        </v-col>\n\n        <!-- boundInterfaceId -->\n        <v-col v-if=\"showBoundToOptions\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"intf.boundInterfaceId\"\n              :items=\"boundToOptions\"\n              :label=\"$t('bound_to')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <!-- bridgedTo -->\n      <v-row v-if=\"showBridgedToOptions && type !== 'BRIDGE'\" class=\"mb-2\">\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"intf.bridgedTo\"\n              :items=\"bridgedToOptions\"\n              :label=\"$t('bridged_to')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <!-- bridgedTo -->\n      <v-row v-if=\"showBridgedToOptions && type === 'BRIDGE'\" class=\"mb-2\">\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <v-select\n              v-model=\"intf.bridgedInterfaces\"\n              :items=\"bridgedToOptions\"\n              :label=\"$t('bridged_to')\"\n              :error-messages=\"errors\"\n              attach\n              small-chips\n              deletable-chips\n              dense\n              outlined\n              hide-details\n              multiple\n              :placeholder=\"$vuntangle.$t('select')\"\n              :menu-props=\"{ offsetY: true, dense: true }\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </v-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <v-row v-if=\"type === 'VLAN'\">\n        <!-- boundInterfaceId -->\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" :rules=\"boundInterfaceIdRules\">\n            <u-select\n              v-model=\"intf.boundInterfaceId\"\n              :items=\"boundToOptions\"\n              :label=\"$t('parent_interface')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n\n        <!-- vlanid -->\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" :rules=\"vlanIdRules\">\n            <u-text-field v-model=\"intf.vlanid\" :label=\"$t('vlan_id')\" placeholder=\"1 - 4094\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <div class=\"d-flex align-center\" style=\"gap: 48px\">\n        <!-- wan -->\n        <v-switch\n          v-if=\"showWan\"\n          v-model=\"intf.wan\"\n          :label=\"$t('wan_interface')\"\n          :disabled=\"disableWan\"\n          @change=\"handleNatEgress\"\n        />\n\n        <!-- natEgress -->\n        <v-checkbox v-if=\"showNatEgress\" v-model=\"intf.natEgress\" :label=\"$t('nat_outgoing_traffic')\" />\n      </div>\n    </ValidationObserver>\n\n    <!-- tabs navigation -->\n    <div v-if=\"showTabs\" class=\"d-flex flex-row align-center mt-8\">\n      <v-divider />\n      <v-btn-toggle v-model=\"selectedTab\" dense rounded mandatory>\n        <v-btn\n          v-for=\"tab in tabs\"\n          :key=\"tab.key\"\n          style=\"min-width: 180px\"\n          :value=\"tab.key\"\n          icon\n          active-class=\"primary\"\n          :class=\"`px-8 ${tab.key === selectedTab ? 'white--text' : ''} font-weight-bold`\"\n          min-width=\"180\"\n        >\n          {{ $t(tab.key) }}\n          <v-icon v-if=\"tab.valid === false\" small color=\"red lighten-1\">mdi-alert</v-icon>\n        </v-btn>\n      </v-btn-toggle>\n      <v-divider />\n    </div>\n\n    <!-- tabs content -->\n    <v-tabs-items v-if=\"showTabs\" v-model=\"selectedTab\" class=\"transparent\" style=\"overflow: visible\">\n      <v-tab-item\n        v-for=\"tab in tabs\"\n        :key=\"tab.key\"\n        eager\n        :value=\"tab.key\"\n        :transition=\"false\"\n        :reverse-transition=\"false\"\n        class=\"py-4\"\n      >\n        <ValidationObserver :ref=\"tab.key\">\n          <component :is=\"tab.cmp\" v-on=\"$listeners\" />\n        </ValidationObserver>\n      </v-tab-item>\n    </v-tabs-items>\n  </v-form>\n</template>\n<script>\n  import { ValidationObserver } from 'vee-validate'\n  import { VRow, VCol, VSelect, VSwitch, VCheckbox, VBtnToggle, VBtn, VTabsItems, VTabItem } from 'vuetify/lib'\n\n  import mixin from './mixin'\n\n  import Ipv4 from './ipv4/Ipv4.vue'\n  import Ipv6 from './ipv6/Ipv6.vue'\n  import Dhcp from './dhcp/Dhcp.vue'\n  import Vrrp from './vrrp/Vrrp.vue'\n  import Qos from './qos/Qos.vue'\n  import Advanced from './advanced/Advanced.vue'\n\n  import OpenVpn from './openvpn/OpenVpn.vue'\n  import Wireguard from './wireguard/Wireguard.vue'\n  import Wifi from './wifi/Wifi.vue'\n  import Wwan from './wwan/Wwan.vue'\n\n  import { IpsecNetwork, IpsecAuth, IpsecCipherSuites } from './ipsec'\n\n  export default {\n    components: {\n      ValidationObserver,\n      Ipv4,\n      Ipv6,\n      Dhcp,\n      Vrrp,\n      Qos,\n      Advanced,\n      OpenVpn,\n      Wireguard,\n      Wifi,\n      Wwan,\n      IpsecNetwork,\n      IpsecAuth,\n      IpsecCipherSuites,\n      VRow,\n      VCol,\n      VSelect,\n      VSwitch,\n      VCheckbox,\n      VBtnToggle,\n      VBtn,\n      VTabsItems,\n      VTabItem,\n    },\n    mixins: [mixin],\n    inject: ['$intf', '$interfaces', '$status', '$disabled', '$onDelete', '$isSaving', '$features'],\n    data() {\n      return {\n        selectedTab: null,\n      }\n    },\n    computed: {\n      configTypeTranslated() {\n        return this.$t(this.intf.configType.toLowerCase())\n      },\n      intf: ({ $intf }) => $intf(),\n      features: ({ $features }) => $features(),\n      interfaces: ({ $interfaces }) => $interfaces(),\n      status: ({ $status }) => $status(),\n      disabled: ({ $disabled }) => $disabled(),\n      isSaving: ({ $isSaving }) => $isSaving(),\n      /**\n       * used to display a warning message when wan interface gets disabled\n       * @returns {String} the interfaces names bound to this wan\n       */\n      boundInterfaces() {\n        if (!this.intf.wan || this.intf.enabled) {\n          return ''\n        }\n        return this.interfaces\n          .reduce((boundInterfaces, intf) => {\n            if (intf.boundInterfaceId === this.intf.interfaceId) {\n              boundInterfaces.push(intf.name)\n            }\n            return boundInterfaces\n          }, [])\n          .join(', ')\n      },\n\n      /**\n       * returns an array of components to be shown as tabs\n       */\n      tabs: ({ intf, showAddressed, showDhcp, showVrrp, showQos, interfaces }) => {\n        const intfIdToNameMap = {}\n        const parentBridgedIntfMap = {}\n        let isBridged = false\n        interfaces.forEach(i => (intfIdToNameMap[i.interfaceId] = i.name))\n        for (const intf of interfaces) {\n          if (intf.bridgedInterfaces) {\n            for (const bridgeIntf of intf.bridgedInterfaces) {\n              parentBridgedIntfMap[bridgeIntf] = intfIdToNameMap[intf.interfaceId]\n            }\n          }\n        }\n        if (parentBridgedIntfMap[intf.interfaceId]) {\n          isBridged = true\n        }\n        const isWiFiBridged = intf.type === 'WIFI' && isBridged\n\n        return [\n          // IPv4, IPv6\n          ...(showAddressed && !isWiFiBridged\n            ? [\n                { cmp: 'Ipv4', key: 'ipv4' },\n                { cmp: 'Ipv6', key: 'ipv6' },\n              ]\n            : []),\n          // DHCP\n          ...(showDhcp && !isWiFiBridged ? [{ cmp: 'Dhcp', key: 'dhcp' }] : []),\n          // QOS\n          ...(showQos ? [{ cmp: 'Qos', key: 'qos' }] : []),\n          // VRRP\n          ...(showVrrp ? [{ cmp: 'Vrrp', key: 'vrrp' }] : []),\n          // WIFI\n          ...(intf.type === 'WIFI' ? [{ cmp: 'Wifi', key: 'wifi' }] : []),\n          // WWAN (LTE)\n          ...(intf.type === 'WWAN' ? [{ cmp: 'Wwan', key: 'lte' }] : []),\n          // OPENVPN\n          ...(intf.type === 'OPENVPN' ? [{ cmp: 'OpenVpn', key: 'openvpn' }] : []),\n          // WIREGUARD\n          ...(intf.type === 'WIREGUARD' ? [{ cmp: 'Wireguard', key: 'wireguard' }] : []),\n          // IPSEC\n          ...(intf.type === 'IPSEC'\n            ? [\n                { cmp: 'IpsecNetwork', key: 'network' },\n                { cmp: 'IpsecAuth', key: 'authentication' },\n                { cmp: 'IpsecCipherSuites', key: 'cipher_suites' },\n              ]\n            : []),\n          // Advanced\n          ...(!isWiFiBridged && intf.type !== 'BRIDGE' ? [{ cmp: 'Advanced', key: 'advanced' }] : []),\n        ]\n      },\n    },\n    watch: {\n      // special case if the wireguard type is set to 'TUNNEL', make sure the bound interface is not 'any' (0)\n      'intf.wireguardType': {\n        immediate: true,\n        handler(newWireguardType) {\n          if (newWireguardType === 'TUNNEL' && this.intf.boundInterfaceId === 0) {\n            this.intf.boundInterfaceId = null\n          }\n        },\n      },\n      // update VLAN interface `wan` and `natEgress` options based on selected parent interface\n      'intf.boundInterfaceId'(id) {\n        if (!id || !this.intf) {\n          return\n        }\n        if (this.intf.type === 'VLAN') {\n          const parentIntf = this.interfaces.find(({ interfaceId }) => interfaceId === id)\n          this.intf.wan = parentIntf.wan\n        }\n      },\n    },\n    mounted() {\n      this.selectedTab = this.tabs.length ? this.tabs[0].key : undefined\n    },\n\n    methods: {\n      async validate() {\n        const commonValid = await this.$refs.common.validate()\n        if (this.showTabs) {\n          let invalidTab = null\n          // check if tabs fields are valid\n          const promises = this.tabs.map(async tab => {\n            tab.valid = await this.$refs[tab.key][0].validate()\n            if (!tab.valid && !invalidTab) {\n              invalidTab = tab.key\n            }\n            return tab.valid\n          })\n          // returns an array of resolved promises into `true` (valid) or `false` (invalid)\n          const tabsValid = await Promise.all(promises)\n          if (invalidTab) this.selectedTab = invalidTab\n\n          return commonValid && !tabsValid.includes(false)\n        }\n        return commonValid\n      },\n      /**\n       * MFW-2038, MFW-2047\n       * handles the NAT egress value (true/false) explicitly when user\n       * turns an interface to WAN via UI switcher (if switcher is enabled)\n       * - by default NAT egress will be pre-set to true (with ability to turn it to false if wanted)\n       * - except for IPsec interfaces for which NAT egress will not change (will remain as false)\n       * @param {Boolean} isWan - true/false\n       */\n      handleNatEgress(isWan) {\n        if (isWan && this.intf.type !== 'IPSEC') {\n          this.intf.natEgress = true\n        }\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}