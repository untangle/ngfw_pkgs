{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\n/* eslint-disable no-useless-escape */\n/**\n * Created by elgs on 3/5/16.\n */\nvar normalize = function normalize(a) {\n  validate(a);\n  a = a.toLowerCase();\n  var nh = a.split(/\\:\\:/g);\n  if (nh.length > 2) {\n    throw new Error('Invalid address: ' + a);\n  }\n  var sections = [];\n  if (nh.length === 1) {\n    // full mode\n    sections = a.split(/\\:/g);\n    if (sections.length !== 8) {\n      throw new Error('Invalid address: ' + a);\n    }\n  } else if (nh.length === 2) {\n    // compact mode\n    var n = nh[0];\n    var h = nh[1];\n    var ns = n.split(/\\:/g);\n    var hs = h.split(/\\:/g);\n    for (var i in ns) {\n      sections[i] = ns[i];\n    }\n    for (var _i = hs.length; _i > 0; --_i) {\n      sections[7 - (hs.length - _i)] = hs[_i - 1];\n    }\n  }\n  for (var _i2 = 0; _i2 < 8; ++_i2) {\n    if (sections[_i2] === undefined) {\n      sections[_i2] = '0000';\n    }\n    sections[_i2] = _leftPad(sections[_i2], '0', 4);\n  }\n  return sections.join(':');\n};\nvar abbreviate = function abbreviate(a) {\n  validate(a);\n  a = normalize(a);\n  a = a.replace(/0000/g, 'g');\n  a = a.replace(/\\:000/g, ':');\n  a = a.replace(/\\:00/g, ':');\n  a = a.replace(/\\:0/g, ':');\n  a = a.replace(/g/g, '0');\n  var sections = a.split(/\\:/g);\n  var zPreviousFlag = false;\n  var zeroStartIndex = -1;\n  var zeroLength = 0;\n  var zStartIndex = -1;\n  var zLength = 0;\n  for (var i = 0; i < 8; ++i) {\n    var section = sections[i];\n    var zFlag = section === '0';\n    if (zFlag && !zPreviousFlag) {\n      zStartIndex = i;\n    }\n    if (!zFlag && zPreviousFlag) {\n      zLength = i - zStartIndex;\n    }\n    if (zLength > 1 && zLength > zeroLength) {\n      zeroStartIndex = zStartIndex;\n      zeroLength = zLength;\n    }\n    zPreviousFlag = section === '0';\n  }\n  if (zPreviousFlag) {\n    zLength = 8 - zStartIndex;\n  }\n  if (zLength > 1 && zLength > zeroLength) {\n    zeroStartIndex = zStartIndex;\n    zeroLength = zLength;\n  }\n  // console.log(zeroStartIndex, zeroLength);\n  // console.log(sections);\n  if (zeroStartIndex >= 0 && zeroLength > 1) {\n    sections.splice(zeroStartIndex, zeroLength, 'g');\n  }\n  // console.log(sections);\n  a = sections.join(':');\n  // console.log(a);\n  a = a.replace(/\\:g\\:/g, '::');\n  a = a.replace(/\\:g/g, '::');\n  a = a.replace(/g\\:/g, '::');\n  a = a.replace(/g/g, '::');\n  // console.log(a);\n  return a;\n};\n\n// Basic validation\nvar validate = function validate(a) {\n  var ns = [];\n  var nh = a.split('::');\n  if (nh.length > 2) {\n    throw new Error('Invalid address: ' + a);\n  } else if (nh.length === 2) {\n    if (nh[0].startsWith(':') || nh[0].endsWith(':') || nh[1].startsWith(':') || nh[1].endsWith(':')) {\n      throw new Error('Invalid address: ' + a);\n    }\n    ns.push.apply(ns, _toConsumableArray(nh[0].split(':').filter(function (a) {\n      return a;\n    })));\n    ns.push.apply(ns, _toConsumableArray(nh[1].split(':').filter(function (a) {\n      return a;\n    })));\n    if (ns.length > 7) {\n      throw new Error('Invalid address: ' + a);\n    }\n  } else if (nh.length === 1) {\n    ns.push.apply(ns, _toConsumableArray(nh[0].split(':').filter(function (a) {\n      return a;\n    })));\n    if (ns.length !== 8) {\n      throw new Error('Invalid address: ' + a);\n    }\n  }\n  for (var _i3 = 0, _ns = ns; _i3 < _ns.length; _i3++) {\n    var n = _ns[_i3];\n    var match = n.match(/^[a-f0-9]{1,4}$/i);\n    if (!match || match[0] !== n) {\n      throw new Error('Invalid address: ' + a);\n    }\n  }\n};\nvar _leftPad = function _leftPad(d, p, n) {\n  var padding = p.repeat(n);\n  if (d.length < padding.length) {\n    d = padding.substring(0, padding.length - d.length) + d;\n  }\n  return d;\n};\nvar _hex2bin = function _hex2bin(hex) {\n  return parseInt(hex, 16).toString(2);\n};\nvar _bin2hex = function _bin2hex(bin) {\n  return parseInt(bin, 2).toString(16);\n};\nvar _addr2bin = function _addr2bin(addr) {\n  var nAddr = normalize(addr);\n  var sections = nAddr.split(':');\n  var binAddr = '';\n  var _iterator = _createForOfIteratorHelper(sections),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var section = _step.value;\n      binAddr += _leftPad(_hex2bin(section), '0', 16);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return binAddr;\n};\nvar _bin2addr = function _bin2addr(bin) {\n  var addr = [];\n  for (var i = 0; i < 8; ++i) {\n    var binPart = bin.substr(i * 16, 16);\n    var hexSection = _leftPad(_bin2hex(binPart), '0', 4);\n    addr.push(hexSection);\n  }\n  return addr.join(':');\n};\nvar divideSubnet = function divideSubnet(addr, mask0, mask1, limit, abbr) {\n  validate(addr);\n  mask0 *= 1;\n  mask1 *= 1;\n  limit *= 1;\n  mask1 = mask1 || 128;\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.');\n  }\n  var ret = [];\n  var binAddr = _addr2bin(addr);\n  var binNetPart = binAddr.substr(0, mask0);\n  var binHostPart = '0'.repeat(128 - mask1);\n  var numSubnets = Math.pow(2, mask1 - mask0);\n  for (var i = 0; i < numSubnets; ++i) {\n    if (!!limit && i >= limit) {\n      break;\n    }\n    var binSubnet = _leftPad(i.toString(2), '0', mask1 - mask0);\n    var binSubAddr = binNetPart + binSubnet + binHostPart;\n    var hexAddr = _bin2addr(binSubAddr);\n    if (abbr) {\n      ret.push(abbreviate(hexAddr));\n    } else {\n      ret.push(hexAddr);\n    }\n  }\n  // console.log(numSubnets);\n  // console.log(binNetPart, binSubnetPart, binHostPart);\n  // console.log(binNetPart.length, binSubnetPart.length, binHostPart.length);\n  // console.log(ret.length);\n  return ret;\n};\nvar range = function range(addr, mask0, mask1, abbr) {\n  validate(addr);\n  mask0 *= 1;\n  mask1 *= 1;\n  mask1 = mask1 || 128;\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.');\n  }\n  var binAddr = _addr2bin(addr);\n  var binNetPart = binAddr.substr(0, mask0);\n  var binHostPart = '0'.repeat(128 - mask1);\n  var binStartAddr = binNetPart + '0'.repeat(mask1 - mask0) + binHostPart;\n  var binEndAddr = binNetPart + '1'.repeat(mask1 - mask0) + binHostPart;\n  if (abbr) {\n    return {\n      start: abbreviate(_bin2addr(binStartAddr)),\n      end: abbreviate(_bin2addr(binEndAddr)),\n      size: Math.pow(2, mask1 - mask0)\n    };\n  } else {\n    return {\n      start: _bin2addr(binStartAddr),\n      end: _bin2addr(binEndAddr),\n      size: Math.pow(2, mask1 - mask0)\n    };\n  }\n};\nvar rangeBigInt = function rangeBigInt(addr, mask0, mask1, abbr) {\n  if (typeof BigInt === 'undefined') {\n    return range(addr, mask0, mask1, abbr);\n  }\n  validate(addr);\n  mask0 *= 1;\n  mask1 *= 1;\n  mask1 = mask1 || 128;\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.');\n  }\n  var binAddr = _addr2bin(addr);\n  var binNetPart = binAddr.substr(0, mask0);\n  var binHostPart = '0'.repeat(128 - mask1);\n  var binStartAddr = binNetPart + '0'.repeat(mask1 - mask0) + binHostPart;\n  var binEndAddr = binNetPart + '1'.repeat(mask1 - mask0) + binHostPart;\n  if (abbr) {\n    return {\n      start: abbreviate(_bin2addr(binStartAddr)),\n      end: abbreviate(_bin2addr(binEndAddr)),\n      size: BigInt(Math.pow(2, mask1 - mask0)).toString()\n    };\n  } else {\n    return {\n      start: _bin2addr(binStartAddr),\n      end: _bin2addr(binEndAddr),\n      size: BigInt(Math.pow(2, mask1 - mask0)).toString()\n    };\n  }\n};\nvar randomSubnet = function randomSubnet(addr, mask0, mask1, limit, abbr) {\n  validate(addr);\n  mask0 *= 1;\n  mask1 *= 1;\n  limit *= 1;\n  mask1 = mask1 || 128;\n  limit = limit || 1;\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.');\n  }\n  var ret = [];\n  var binAddr = _addr2bin(addr);\n  var binNetPart = binAddr.substr(0, mask0);\n  var binHostPart = '0'.repeat(128 - mask1);\n  var numSubnets = Math.pow(2, mask1 - mask0);\n  for (var i = 0; i < numSubnets && i < limit; ++i) {\n    // generate an binary string with length of mask1 - mask0\n    var binSubnet = '';\n    for (var j = 0; j < mask1 - mask0; ++j) {\n      binSubnet += Math.floor(Math.random() * 2);\n    }\n    var binSubAddr = binNetPart + binSubnet + binHostPart;\n    var hexAddr = _bin2addr(binSubAddr);\n    if (abbr) {\n      ret.push(abbreviate(hexAddr));\n    } else {\n      ret.push(hexAddr);\n    }\n  }\n  // console.log(numSubnets);\n  // console.log(binNetPart, binSubnetPart, binHostPart);\n  // console.log(binNetPart.length, binSubnetPart.length, binHostPart.length);\n  // console.log(ret.length);\n  return ret;\n};\nvar ptr = function ptr(addr, mask) {\n  validate(addr);\n  mask *= 1;\n  if (mask < 0 || mask > 128 || Math.floor(mask / 4) !== mask / 4) {\n    throw new Error('Invalid masks.');\n  }\n  var fullAddr = normalize(addr);\n  var reverse = fullAddr.replace(/:/g, '').split('').reverse();\n  return reverse.slice(0, (128 - mask) / 4).join('.');\n};\nexport default {\n  normalize: normalize,\n  abbreviate: abbreviate,\n  validate: validate,\n  divideSubnet: divideSubnet,\n  range: range,\n  rangeBigInt: rangeBigInt,\n  randomSubnet: randomSubnet,\n  ptr: ptr\n};","map":{"version":3,"names":["normalize","a","validate","toLowerCase","nh","split","length","Error","sections","n","h","ns","hs","i","undefined","_leftPad","join","abbreviate","replace","zPreviousFlag","zeroStartIndex","zeroLength","zStartIndex","zLength","section","zFlag","splice","startsWith","endsWith","push","apply","_toConsumableArray","filter","_i3","_ns","match","d","p","padding","repeat","substring","_hex2bin","hex","parseInt","toString","_bin2hex","bin","_addr2bin","addr","nAddr","binAddr","_iterator","_createForOfIteratorHelper","_step","s","done","value","err","e","f","_bin2addr","binPart","substr","hexSection","divideSubnet","mask0","mask1","limit","abbr","ret","binNetPart","binHostPart","numSubnets","Math","pow","binSubnet","binSubAddr","hexAddr","range","binStartAddr","binEndAddr","start","end","size","rangeBigInt","BigInt","randomSubnet","j","floor","random","ptr","mask","fullAddr","reverse","slice"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/plugins/ip6.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\n/**\n * Created by elgs on 3/5/16.\n */\nconst normalize = function (a) {\n  validate(a)\n\n  a = a.toLowerCase()\n\n  const nh = a.split(/\\:\\:/g)\n  if (nh.length > 2) {\n    throw new Error('Invalid address: ' + a)\n  }\n\n  let sections = []\n  if (nh.length === 1) {\n    // full mode\n    sections = a.split(/\\:/g)\n    if (sections.length !== 8) {\n      throw new Error('Invalid address: ' + a)\n    }\n  } else if (nh.length === 2) {\n    // compact mode\n    const n = nh[0]\n    const h = nh[1]\n    const ns = n.split(/\\:/g)\n    const hs = h.split(/\\:/g)\n    for (const i in ns) {\n      sections[i] = ns[i]\n    }\n    for (let i = hs.length; i > 0; --i) {\n      sections[7 - (hs.length - i)] = hs[i - 1]\n    }\n  }\n  for (let i = 0; i < 8; ++i) {\n    if (sections[i] === undefined) {\n      sections[i] = '0000'\n    }\n    sections[i] = _leftPad(sections[i], '0', 4)\n  }\n  return sections.join(':')\n}\n\nconst abbreviate = function (a) {\n  validate(a)\n  a = normalize(a)\n  a = a.replace(/0000/g, 'g')\n  a = a.replace(/\\:000/g, ':')\n  a = a.replace(/\\:00/g, ':')\n  a = a.replace(/\\:0/g, ':')\n  a = a.replace(/g/g, '0')\n  const sections = a.split(/\\:/g)\n  let zPreviousFlag = false\n  let zeroStartIndex = -1\n  let zeroLength = 0\n  let zStartIndex = -1\n  let zLength = 0\n  for (let i = 0; i < 8; ++i) {\n    const section = sections[i]\n    const zFlag = section === '0'\n    if (zFlag && !zPreviousFlag) {\n      zStartIndex = i\n    }\n    if (!zFlag && zPreviousFlag) {\n      zLength = i - zStartIndex\n    }\n    if (zLength > 1 && zLength > zeroLength) {\n      zeroStartIndex = zStartIndex\n      zeroLength = zLength\n    }\n    zPreviousFlag = section === '0'\n  }\n  if (zPreviousFlag) {\n    zLength = 8 - zStartIndex\n  }\n  if (zLength > 1 && zLength > zeroLength) {\n    zeroStartIndex = zStartIndex\n    zeroLength = zLength\n  }\n  // console.log(zeroStartIndex, zeroLength);\n  // console.log(sections);\n  if (zeroStartIndex >= 0 && zeroLength > 1) {\n    sections.splice(zeroStartIndex, zeroLength, 'g')\n  }\n  // console.log(sections);\n  a = sections.join(':')\n  // console.log(a);\n  a = a.replace(/\\:g\\:/g, '::')\n  a = a.replace(/\\:g/g, '::')\n  a = a.replace(/g\\:/g, '::')\n  a = a.replace(/g/g, '::')\n  // console.log(a);\n  return a\n}\n\n// Basic validation\nconst validate = function (a) {\n  const ns = []\n  const nh = a.split('::')\n  if (nh.length > 2) {\n    throw new Error('Invalid address: ' + a)\n  } else if (nh.length === 2) {\n    if (nh[0].startsWith(':') || nh[0].endsWith(':') || nh[1].startsWith(':') || nh[1].endsWith(':')) {\n      throw new Error('Invalid address: ' + a)\n    }\n\n    ns.push(...nh[0].split(':').filter(a => a))\n    ns.push(...nh[1].split(':').filter(a => a))\n    if (ns.length > 7) {\n      throw new Error('Invalid address: ' + a)\n    }\n  } else if (nh.length === 1) {\n    ns.push(...nh[0].split(':').filter(a => a))\n    if (ns.length !== 8) {\n      throw new Error('Invalid address: ' + a)\n    }\n  }\n\n  for (const n of ns) {\n    const match = n.match(/^[a-f0-9]{1,4}$/i)\n    if (!match || match[0] !== n) {\n      throw new Error('Invalid address: ' + a)\n    }\n  }\n}\n\nconst _leftPad = function (d, p, n) {\n  const padding = p.repeat(n)\n  if (d.length < padding.length) {\n    d = padding.substring(0, padding.length - d.length) + d\n  }\n  return d\n}\n\nconst _hex2bin = function (hex) {\n  return parseInt(hex, 16).toString(2)\n}\nconst _bin2hex = function (bin) {\n  return parseInt(bin, 2).toString(16)\n}\n\nconst _addr2bin = function (addr) {\n  const nAddr = normalize(addr)\n  const sections = nAddr.split(':')\n  let binAddr = ''\n  for (const section of sections) {\n    binAddr += _leftPad(_hex2bin(section), '0', 16)\n  }\n  return binAddr\n}\n\nconst _bin2addr = function (bin) {\n  const addr = []\n  for (let i = 0; i < 8; ++i) {\n    const binPart = bin.substr(i * 16, 16)\n    const hexSection = _leftPad(_bin2hex(binPart), '0', 4)\n    addr.push(hexSection)\n  }\n  return addr.join(':')\n}\n\nconst divideSubnet = function (addr, mask0, mask1, limit, abbr) {\n  validate(addr)\n  mask0 *= 1\n  mask1 *= 1\n  limit *= 1\n  mask1 = mask1 || 128\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.')\n  }\n  const ret = []\n  const binAddr = _addr2bin(addr)\n  const binNetPart = binAddr.substr(0, mask0)\n  const binHostPart = '0'.repeat(128 - mask1)\n  const numSubnets = Math.pow(2, mask1 - mask0)\n  for (let i = 0; i < numSubnets; ++i) {\n    if (!!limit && i >= limit) {\n      break\n    }\n    const binSubnet = _leftPad(i.toString(2), '0', mask1 - mask0)\n    const binSubAddr = binNetPart + binSubnet + binHostPart\n    const hexAddr = _bin2addr(binSubAddr)\n    if (abbr) {\n      ret.push(abbreviate(hexAddr))\n    } else {\n      ret.push(hexAddr)\n    }\n  }\n  // console.log(numSubnets);\n  // console.log(binNetPart, binSubnetPart, binHostPart);\n  // console.log(binNetPart.length, binSubnetPart.length, binHostPart.length);\n  // console.log(ret.length);\n  return ret\n}\n\nconst range = function (addr, mask0, mask1, abbr) {\n  validate(addr)\n  mask0 *= 1\n  mask1 *= 1\n  mask1 = mask1 || 128\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.')\n  }\n  const binAddr = _addr2bin(addr)\n  const binNetPart = binAddr.substr(0, mask0)\n  const binHostPart = '0'.repeat(128 - mask1)\n  const binStartAddr = binNetPart + '0'.repeat(mask1 - mask0) + binHostPart\n  const binEndAddr = binNetPart + '1'.repeat(mask1 - mask0) + binHostPart\n  if (abbr) {\n    return {\n      start: abbreviate(_bin2addr(binStartAddr)),\n      end: abbreviate(_bin2addr(binEndAddr)),\n      size: Math.pow(2, mask1 - mask0),\n    }\n  } else {\n    return {\n      start: _bin2addr(binStartAddr),\n      end: _bin2addr(binEndAddr),\n      size: Math.pow(2, mask1 - mask0),\n    }\n  }\n}\n\nconst rangeBigInt = function (addr, mask0, mask1, abbr) {\n  if (typeof BigInt === 'undefined') {\n    return range(addr, mask0, mask1, abbr)\n  }\n\n  validate(addr)\n  mask0 *= 1\n  mask1 *= 1\n  mask1 = mask1 || 128\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.')\n  }\n  const binAddr = _addr2bin(addr)\n  const binNetPart = binAddr.substr(0, mask0)\n  const binHostPart = '0'.repeat(128 - mask1)\n  const binStartAddr = binNetPart + '0'.repeat(mask1 - mask0) + binHostPart\n  const binEndAddr = binNetPart + '1'.repeat(mask1 - mask0) + binHostPart\n  if (abbr) {\n    return {\n      start: abbreviate(_bin2addr(binStartAddr)),\n      end: abbreviate(_bin2addr(binEndAddr)),\n      size: BigInt(2 ** (mask1 - mask0)).toString(),\n    }\n  } else {\n    return {\n      start: _bin2addr(binStartAddr),\n      end: _bin2addr(binEndAddr),\n      size: BigInt(2 ** (mask1 - mask0)).toString(),\n    }\n  }\n}\n\nconst randomSubnet = function (addr, mask0, mask1, limit, abbr) {\n  validate(addr)\n  mask0 *= 1\n  mask1 *= 1\n  limit *= 1\n  mask1 = mask1 || 128\n  limit = limit || 1\n  if (mask0 < 0 || mask1 < 0 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n    throw new Error('Invalid masks.')\n  }\n  const ret = []\n  const binAddr = _addr2bin(addr)\n  const binNetPart = binAddr.substr(0, mask0)\n  const binHostPart = '0'.repeat(128 - mask1)\n  const numSubnets = Math.pow(2, mask1 - mask0)\n  for (let i = 0; i < numSubnets && i < limit; ++i) {\n    // generate an binary string with length of mask1 - mask0\n    let binSubnet = ''\n    for (let j = 0; j < mask1 - mask0; ++j) {\n      binSubnet += Math.floor(Math.random() * 2)\n    }\n    const binSubAddr = binNetPart + binSubnet + binHostPart\n    const hexAddr = _bin2addr(binSubAddr)\n    if (abbr) {\n      ret.push(abbreviate(hexAddr))\n    } else {\n      ret.push(hexAddr)\n    }\n  }\n  // console.log(numSubnets);\n  // console.log(binNetPart, binSubnetPart, binHostPart);\n  // console.log(binNetPart.length, binSubnetPart.length, binHostPart.length);\n  // console.log(ret.length);\n  return ret\n}\n\nconst ptr = function (addr, mask) {\n  validate(addr)\n  mask *= 1\n  if (mask < 0 || mask > 128 || Math.floor(mask / 4) !== mask / 4) {\n    throw new Error('Invalid masks.')\n  }\n  const fullAddr = normalize(addr)\n  const reverse = fullAddr.replace(/:/g, '').split('').reverse()\n  return reverse.slice(0, (128 - mask) / 4).join('.')\n}\n\nexport default {\n  normalize,\n  abbreviate,\n  validate,\n  divideSubnet,\n  range,\n  rangeBigInt,\n  randomSubnet,\n  ptr,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}