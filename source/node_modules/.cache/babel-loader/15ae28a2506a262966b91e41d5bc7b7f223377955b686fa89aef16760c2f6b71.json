{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/web.atob.js\";\nimport \"core-js/modules/web.btoa.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport { VRow, VCol, VCheckbox, VFileInput, VTextarea } from 'vuetify/lib';\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    VCheckbox: VCheckbox,\n    VFileInput: VFileInput,\n    VTextarea: VTextarea\n  },\n  inject: ['$intf', '$status'],\n  data: function data() {\n    return {\n      file: null,\n      enableInlineEdit: false\n    };\n  },\n  /**\n   * the conf and password are base64 encoded\n   * using computed props to get and set values\n   */\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    status: function status(_ref2) {\n      var $status = _ref2.$status;\n      return $status();\n    },\n    openvpnConf: {\n      get: function get() {\n        var conf = this.intf.openvpnConfFile.contents;\n        return conf ? window.atob(conf) : '';\n      },\n      set: function set(value) {\n        this.intf.openvpnConfFile.contents = window.btoa(value);\n      }\n    },\n    openvpnPassword: {\n      get: function get() {\n        var pass = this.intf.openvpnPasswordBase64;\n        return pass ? window.atob(pass) : '';\n      },\n      set: function set(value) {\n        this.intf.openvpnPasswordBase64 = window.btoa(value);\n      }\n    }\n  },\n  methods: {\n    onFileChange: function onFileChange(file) {\n      var _this = this;\n      if (!file) {\n        this.openvpnConf = null;\n        return;\n      }\n      var reader = new FileReader();\n      reader.onload = function () {\n        _this.openvpnConf = reader.result;\n      };\n      reader.readAsText(file);\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","VCheckbox","VFileInput","VTextarea","components","inject","data","file","enableInlineEdit","computed","intf","_ref","$intf","status","_ref2","$status","openvpnConf","get","conf","openvpnConfFile","contents","window","atob","set","value","btoa","openvpnPassword","pass","openvpnPasswordBase64","methods","onFileChange","_this","reader","FileReader","onload","result","readAsText"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/openvpn/OpenVpn.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row>\n      <v-col cols=\"8\">\n        <ValidationProvider v-slot=\"{ errors }\" :rules=\"{ required: !openvpnConf }\">\n          <v-file-input\n            v-model=\"file\"\n            truncate-length=\"15\"\n            outlined\n            dense\n            :prepend-icon=\"null\"\n            :label=\"$t('select_file_from_disk')\"\n            hide-details\n            :error-messages=\"errors\"\n            @change=\"onFileChange\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </v-file-input>\n        </ValidationProvider>\n      </v-col>\n      <v-col class=\"d-flex justify-end\">\n        <v-checkbox v-model=\"enableInlineEdit\" small :label=\"$t('inline_edit')\" hide-details class=\"ma-0\" />\n      </v-col>\n    </v-row>\n\n    <v-row>\n      <v-col>\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <v-textarea\n            v-model=\"openvpnConf\"\n            outlined\n            :placeholder=\"$t('no_file_selected')\"\n            :readonly=\"!enableInlineEdit\"\n            hide-details\n            class=\"file-content\"\n            rows=\"10\"\n            :error-messages=\"errors\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </v-textarea>\n        </ValidationProvider>\n      </v-col>\n    </v-row>\n\n    <!-- openvpnUsernamePasswordEnabled -->\n    <v-row>\n      <v-col>\n        <v-checkbox v-model=\"intf.openvpnUsernamePasswordEnabled\" :label=\"$t('requires_authentication')\" hide-details />\n      </v-col>\n    </v-row>\n\n    <v-row v-if=\"intf.openvpnUsernamePasswordEnabled\" dense>\n      <v-col>\n        <!-- openvpnUsername -->\n        <ValidationProvider v-slot=\"{ errors }\" :rules=\"{ required: intf.openvpnUsernamePasswordEnabled }\">\n          <u-text-field v-model=\"intf.openvpnUsername\" label=\"Username\" :error-messages=\"errors\">\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n      <v-col>\n        <!-- openvpnPassword -->\n        <ValidationProvider v-slot=\"{ errors }\" :rules=\"{ required: intf.openvpnUsernamePasswordEnabled, min: 6 }\">\n          <u-text-field v-model=\"openvpnPassword\" label=\"Password\" type=\"password\" :error-messages=\"errors\">\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </v-col>\n    </v-row>\n    <!-- openvpnPeerDns -->\n    <v-row>\n      <v-col>\n        <v-checkbox v-model=\"intf.openvpnPeerDns\" :label=\"$t('use_peer_dns')\" hide-details class=\"ma-0\" />\n      </v-col>\n    </v-row>\n  </div>\n</template>\n<script>\n  import { VRow, VCol, VCheckbox, VFileInput, VTextarea } from 'vuetify/lib'\n\n  export default {\n    components: { VRow, VCol, VCheckbox, VFileInput, VTextarea },\n    inject: ['$intf', '$status'],\n    data() {\n      return {\n        file: null,\n        enableInlineEdit: false,\n      }\n    },\n    /**\n     * the conf and password are base64 encoded\n     * using computed props to get and set values\n     */\n    computed: {\n      intf: ({ $intf }) => $intf(),\n      status: ({ $status }) => $status(),\n\n      openvpnConf: {\n        get() {\n          const conf = this.intf.openvpnConfFile.contents\n          return conf ? window.atob(conf) : ''\n        },\n        set(value) {\n          this.intf.openvpnConfFile.contents = window.btoa(value)\n        },\n      },\n      openvpnPassword: {\n        get() {\n          const pass = this.intf.openvpnPasswordBase64\n          return pass ? window.atob(pass) : ''\n        },\n        set(value) {\n          this.intf.openvpnPasswordBase64 = window.btoa(value)\n        },\n      },\n    },\n    methods: {\n      onFileChange(file) {\n        if (!file) {\n          this.openvpnConf = null\n          return\n        }\n        const reader = new FileReader()\n        reader.onload = () => {\n          this.openvpnConf = reader.result\n        }\n        reader.readAsText(file)\n      },\n    },\n  }\n</script>\n<style>\n  .file-content textarea {\n    font-family: monospace;\n    font-size: 12px;\n    line-height: 1.5;\n    margin: 0 10px 10px 0;\n  }\n</style>\n"],"mappings":";;;;;;AA8EA,SAAAA,IAAA,EAAAC,IAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,SAAA;AAEA;EACAC,UAAA;IAAAL,IAAA,EAAAA,IAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,SAAA,EAAAA,SAAA;IAAAC,UAAA,EAAAA,UAAA;IAAAC,SAAA,EAAAA;EAAA;EACAE,MAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,IAAA;MACAC,gBAAA;IACA;EACA;EACA;AACA;AACA;AACA;EACAC,QAAA;IACAC,IAAA,WAAAA,KAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MAAA,OAAAA,KAAA;IAAA;IACAC,MAAA,WAAAA,OAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAD,KAAA,CAAAC,OAAA;MAAA,OAAAA,OAAA;IAAA;IAEAC,WAAA;MACAC,GAAA,WAAAA,IAAA;QACA,IAAAC,IAAA,QAAAR,IAAA,CAAAS,eAAA,CAAAC,QAAA;QACA,OAAAF,IAAA,GAAAG,MAAA,CAAAC,IAAA,CAAAJ,IAAA;MACA;MACAK,GAAA,WAAAA,IAAAC,KAAA;QACA,KAAAd,IAAA,CAAAS,eAAA,CAAAC,QAAA,GAAAC,MAAA,CAAAI,IAAA,CAAAD,KAAA;MACA;IACA;IACAE,eAAA;MACAT,GAAA,WAAAA,IAAA;QACA,IAAAU,IAAA,QAAAjB,IAAA,CAAAkB,qBAAA;QACA,OAAAD,IAAA,GAAAN,MAAA,CAAAC,IAAA,CAAAK,IAAA;MACA;MACAJ,GAAA,WAAAA,IAAAC,KAAA;QACA,KAAAd,IAAA,CAAAkB,qBAAA,GAAAP,MAAA,CAAAI,IAAA,CAAAD,KAAA;MACA;IACA;EACA;EACAK,OAAA;IACAC,YAAA,WAAAA,aAAAvB,IAAA;MAAA,IAAAwB,KAAA;MACA,KAAAxB,IAAA;QACA,KAAAS,WAAA;QACA;MACA;MACA,IAAAgB,MAAA,OAAAC,UAAA;MACAD,MAAA,CAAAE,MAAA;QACAH,KAAA,CAAAf,WAAA,GAAAgB,MAAA,CAAAG,MAAA;MACA;MACAH,MAAA,CAAAI,UAAA,CAAA7B,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}