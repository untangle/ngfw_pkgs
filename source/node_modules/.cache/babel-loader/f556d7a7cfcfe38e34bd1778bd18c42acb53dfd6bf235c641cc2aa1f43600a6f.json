{"ast":null,"code":"// import vuntangle from '@/plugins/vuntangle'\n// // import i18n from '@/plugins/vue-i18n'\n\n// const getDefaultState = () => ({\n//   networkSettings: null,\n// })\n\n// const getters = {\n//   networkSettings: state => state.networkSettings,\n//   lanInterfaces: state => state.networkSettings.interfaces.list.filter(intf => !intf.isWan),\n// }\n\n// const mutations = {\n//   RESET: state => Object.assign(state, getDefaultState()),\n//   SET_NETWORK_SETTINGS: (state, value) => (state.networkSettings = value),\n// }\n\n// const actions = {\n//   async fetchNetworkSettings({ commit, state }) {\n//     if (state.networkSettings !== null) return\n//     commit('SET_FETCHING', true, { root: true })\n//     const data = await window.rpc.networkManager.getNetworkSettings()\n//     commit('SET_FETCHING', false, { root: true })\n//     if (data) {\n//       commit('SET_NETWORK_SETTINGS', data)\n//     }\n//   },\n\n//   saveNetworkSettings({ commit }, settings) {\n//     return new Promise((resolve, reject) => {\n//       commit('SET_FETCHING', true, { root: true })\n//       window.rpc.networkManager.setNetworkSettings((response, exception) => {\n//         commit('SET_FETCHING', false, { root: true })\n//         if (exception) {\n//           vuntangle.toast.add(exception.message, 'error')\n//           reject(exception)\n//           return\n//         }\n//         commit('SET_NETWORK_SETTINGS', settings)\n//         vuntangle.toast.add(vuntangle.$t('saved_successfully', ['Settings']))\n//         resolve()\n//       }, settings)\n//     })\n//   },\n// }\n\n// export default {\n//   namespaced: true,\n//   state: getDefaultState,\n//   getters,\n//   mutations,\n//   actions,\n// }","map":{"version":3,"names":[],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/src/store/settings.js"],"sourcesContent":["// import vuntangle from '@/plugins/vuntangle'\n// // import i18n from '@/plugins/vue-i18n'\n\n// const getDefaultState = () => ({\n//   networkSettings: null,\n// })\n\n// const getters = {\n//   networkSettings: state => state.networkSettings,\n//   lanInterfaces: state => state.networkSettings.interfaces.list.filter(intf => !intf.isWan),\n// }\n\n// const mutations = {\n//   RESET: state => Object.assign(state, getDefaultState()),\n//   SET_NETWORK_SETTINGS: (state, value) => (state.networkSettings = value),\n// }\n\n// const actions = {\n//   async fetchNetworkSettings({ commit, state }) {\n//     if (state.networkSettings !== null) return\n//     commit('SET_FETCHING', true, { root: true })\n//     const data = await window.rpc.networkManager.getNetworkSettings()\n//     commit('SET_FETCHING', false, { root: true })\n//     if (data) {\n//       commit('SET_NETWORK_SETTINGS', data)\n//     }\n//   },\n\n//   saveNetworkSettings({ commit }, settings) {\n//     return new Promise((resolve, reject) => {\n//       commit('SET_FETCHING', true, { root: true })\n//       window.rpc.networkManager.setNetworkSettings((response, exception) => {\n//         commit('SET_FETCHING', false, { root: true })\n//         if (exception) {\n//           vuntangle.toast.add(exception.message, 'error')\n//           reject(exception)\n//           return\n//         }\n//         commit('SET_NETWORK_SETTINGS', settings)\n//         vuntangle.toast.add(vuntangle.$t('saved_successfully', ['Settings']))\n//         resolve()\n//       }, settings)\n//     })\n//   },\n// }\n\n// export default {\n//   namespaced: true,\n//   state: getDefaultState,\n//   getters,\n//   mutations,\n//   actions,\n// }\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}