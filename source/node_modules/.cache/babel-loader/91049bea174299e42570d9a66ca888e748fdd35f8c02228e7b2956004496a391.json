{"ast":null,"code":"import _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * Utilities for handling highcharts options\n */\nimport Highcharts from 'highcharts';\nimport merge from 'lodash/merge';\nimport i18n from './vue-i18n';\nimport renderer from './renderer';\n\n// base options for the highcharts options\nvar fontFamily = 'Roboto, sans-serif';\n\n// the generic base options used for all charts\nvar baseChartOptions = {\n  chart: {\n    animation: false,\n    marginTop: 20,\n    marginRight: 5,\n    style: {\n      fontFamily: fontFamily\n    },\n    type: 'pie',\n    // to avoid initial xAxis cut-off for pies\n    backgroundColor: 'transparent'\n  },\n  navigator: {\n    enabled: false\n  },\n  rangeSelector: {\n    enabled: false\n  },\n  scrollbar: {\n    enabled: false\n  },\n  tooltip: {\n    enabled: true,\n    animation: false,\n    outside: false,\n    shared: true,\n    followPointer: true,\n    split: false,\n    padding: 10,\n    hideDelay: 0,\n    backgroundColor: 'rgba(247, 247, 247, 0.95)',\n    useHTML: true,\n    xDateFormat: '%A, %b %e, %l:%M %p',\n    headerFormat: \"<p style=\\\"font-family: \".concat(fontFamily, \";font-weight: bold; margin: 0 0 5px 0; color: #555;\\\">\\n        {point.key}\\n      </p>\")\n  },\n  legend: {\n    enabled: true,\n    itemStyle: {\n      fontFamily: fontFamily,\n      fontSize: '11px',\n      fontWeight: 300,\n      width: '100px',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    title: {\n      style: {\n        fontFamily: fontFamily\n      }\n    },\n    labelFormatter: function labelFormatter() {\n      return i18n.t(this.name);\n    }\n  },\n  yAxis: {\n    opposite: false,\n    allowDecimals: false,\n    gridLineColor: '#EEE',\n    gridLineDashStyle: 'Dash',\n    title: {\n      align: 'high',\n      offset: 0,\n      reserveSpace: false,\n      y: 3,\n      rotation: 0,\n      textAlign: 'left',\n      style: {\n        color: '#555',\n        fontFamily: fontFamily,\n        fontSize: '12px',\n        fontWeight: 600\n      }\n    },\n    labels: {\n      style: {\n        fontFamily: fontFamily\n      }\n    }\n  },\n  plotOptions: {\n    series: {\n      animation: false\n    },\n    pie: {\n      borderColor: '#fafafa'\n    }\n  },\n  series: []\n};\n\n/**\n * Get highcharts 'options'\n * @param {Object} report - report configuration\n * @param {Array} data - the report data\n * @param {Object} interfaceIdNameMap - the interface id-name map\n * @returns {Object}\n */\nvar getChartOptions = function getChartOptions(report, data, interfaceIdNameMap) {\n  // get the colors for the series and rendering\n  var colors = report.rendering.colors ? report.rendering.colors.replace(/ /g, '').split(',') : getDefaultColors();\n\n  // get the series to determine the rendering\n  var type = report.query.type;\n  var series = type === 'SERIES' || type === 'CATEGORIES_SERIES' ? getSeriesReportSeries(report, colors, data, interfaceIdNameMap) : getOtherReportSeries(report, colors, data);\n\n  // get the highcharts options depending on the report type\n  var reportTypeOptions = type === 'SERIES' || type === 'CATEGORIES_SERIES' ? getSeriesChartOptions(report.rendering, series.length) : getCategoriesChartOptions(report);\n\n  // merge base options, dynamic options, report type options, colors, and series data\n  return merge({}, baseChartOptions, {\n    time: {\n      useUTC: false\n    },\n    tooltip: {\n      formatter: function formatter(tooltip) {\n        return tooltip.defaultFormatter.call(this, tooltip);\n      },\n      pointFormatter: function pointFormatter() {\n        var _report$rendering, _report$rendering2, _report$rendering3;\n        var format = \"<span style=\\\"color: \".concat(this.color, \"; margin-right: 2px;\\\">\\u25A0</span>\\n          <span style=\\\"font-weight: bold;\\\">\").concat(renderer.shortenText(this.series.name), \"</span> &rarr; \");\n\n        /**\n         * NOTE:\n         * `bytesRenderer` and `bytesSecRenderer` are already having units in it\n         */\n        switch ((_report$rendering = report.rendering) === null || _report$rendering === void 0 ? void 0 : _report$rendering.units) {\n          case 'bytes':\n            format += renderer.bytesRenderer(this.y);\n            break;\n          case 'bytes/s':\n            format += renderer.bytesSecRenderer(this.y);\n            break;\n          case 'ms':\n            format += \"\".concat(this.y.toFixed(2), \" \").concat((_report$rendering2 = report.rendering) === null || _report$rendering2 === void 0 ? void 0 : _report$rendering2.units);\n            break;\n          default:\n            format += \"\".concat(this.y, \" \").concat((_report$rendering3 = report.rendering) === null || _report$rendering3 === void 0 ? void 0 : _report$rendering3.units);\n        }\n        format += \"<br/>\";\n        return format;\n      }\n    }\n  }, reportTypeOptions, {\n    colors: colors,\n    series: series\n  });\n};\nfunction getDefaultColors() {\n  var colors = _toConsumableArray(Highcharts.getOptions().colors);\n\n  // add untangle colors, move color order around\n  // colors.push(vuetify.framework.theme.currentTheme.aristaBlue, colors[2], colors[1])\n  // colors.splice(1, 2, vuetify.framework.theme.currentTheme.utGreen)\n\n  return colors;\n}\n\n/**\n * Get the highcharts series option for a 'series' report type.\n * @param {Object} report the report conf\n * @param {Array} colors\n * @param {Array} data\n * @param {Object} interfaceIdNameMap - the interface id-name map\n *\n * @returns {Array}\n */\nfunction getSeriesReportSeries(report, colors, data, interfaceIdNameMap) {\n  var series = {};\n  var name = null;\n  data.forEach(function (point) {\n    Object.keys(point).forEach(function (key) {\n      if (key !== 'time_trunc') {\n        var _report$query;\n        name = key;\n        if (((_report$query = report.query) === null || _report$query === void 0 || (_report$query = _report$query.queryCategories) === null || _report$query === void 0 ? void 0 : _report$query.groupColumn) === 'interface_id') {\n          name = \"\".concat((interfaceIdNameMap === null || interfaceIdNameMap === void 0 ? void 0 : interfaceIdNameMap[key]) || i18n.t('unknown'), \"  [\").concat(key, \"]\");\n        }\n        if (!series[key]) {\n          series[key] = {\n            name: name !== '<nil>' ? name : i18n.t('unknown'),\n            data: []\n          };\n        } else {\n          // null values get converted to 0 by default, unless `rendering.nulls` is true\n          series[key].data.push([point.time_trunc, !report.rendering.nulls ? point[key] || 0 : point[key]]);\n        }\n      }\n    });\n  });\n\n  // sort by name before adding colors to keep graph legends consistent\n  return Object.keys(series).map(function (key) {\n    return series[key];\n  }).sort(function (a, b) {\n    return a.name === b.name ? 0 : String(a.name) > String(b.name) ? 1 : -1;\n  }).map(function (result, idx) {\n    var _report$rendering4, _report$rendering5;\n    var color = colors[idx] || colors[idx % colors.length];\n    return Object.assign(result, {\n      color: color,\n      lineColor: color,\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, Highcharts.Color(color).setOpacity(((_report$rendering4 = report.rendering) === null || _report$rendering4 === void 0 ? void 0 : _report$rendering4.topAreaOpacity) || 0.7).get('rgba')], [1, Highcharts.Color(color).setOpacity(((_report$rendering5 = report.rendering) === null || _report$rendering5 === void 0 ? void 0 : _report$rendering5.bottomAreaOpacity) || 0.1).get('rgba')]]\n      }\n    });\n  });\n}\n\n/**\n * Get the highcharts series option for 'other' (non-series) report types.\n *\n * @param {Report} report - report conf\n * @param {Array}  colors\n * @param {Array}  data\n *\n * @returns {Array}\n */\nfunction getOtherReportSeries(report, colors, data) {\n  var _report$rendering6;\n  var normalizedData = [];\n  data.forEach(function (point) {\n    var name = point[report.query.queryCategories.groupColumn] || i18n.t('unknown');\n    normalizedData.push({\n      name: name,\n      y: point.value\n    });\n  });\n  var seriesData = [];\n  var others;\n  var slicesNumber = ((_report$rendering6 = report.rendering) === null || _report$rendering6 === void 0 ? void 0 : _report$rendering6.slicesNumber) || 10;\n  if (normalizedData.length > slicesNumber) {\n    others = {\n      name: 'Others',\n      y: 0\n    };\n    normalizedData.forEach(function (point, idx) {\n      if (idx >= slicesNumber) {\n        others.y += point.y;\n      } else {\n        seriesData.push(point);\n      }\n    });\n  } else {\n    seriesData = normalizedData;\n  }\n\n  // sort data by value\n  seriesData.sort(function (a, b) {\n    return a.y === b.y ? 0 : a.y < b.y ? 1 : -1;\n  });\n\n  // add others to the end of the data\n  if (others) {\n    seriesData.push(others);\n  }\n\n  // add colors\n  seriesData.forEach(function (point, idx) {\n    return point.color = colors[idx];\n  });\n\n  // return series data\n  return [{\n    name: report.query.table.split(' ')[0],\n    data: seriesData\n  }];\n}\n\n/**\n * Get the highcharts options for a 'series' report type.\n * @param {Object} rendering - report rendering options\n * @param {Number} seriesLength\n * @returns {Object}\n */\nfunction getSeriesChartOptions(rendering, seriesLength) {\n  var plotOptions = {\n    column: {\n      stacking: rendering.stacking || undefined,\n      colorByPoint: false,\n      dataGrouping: {\n        enabled: rendering.dataGroupingEnabled,\n        approximation: rendering.dataGroupingApproximation,\n        pointPadding: 0.2,\n        groupPixelWidth: rendering.dataGroupingFactor * seriesLength\n      }\n    }\n  };\n  var plotType = ['line', 'spline', 'area', 'areaspline'];\n  plotType.forEach(function (type) {\n    plotOptions[type] = {\n      lineWidth: rendering.lineWidth || 1,\n      stacking: rendering.stacking || undefined,\n      dashStyle: rendering.dashStyle || 'Solid',\n      dataGrouping: {\n        enabled: rendering.dataGroupingEnabled || true,\n        approximation: rendering.dataGroupingApproximation || 'sum',\n        groupPixelWidth: rendering.dataGroupingFactor * seriesLength || 30,\n        dateTimeLabelFormats: {\n          millisecond: ['%A, %b %e, %l:%M:%S.%L %p', '%A, %b %e, %l:%M:%S.%L %p', ' - %l:%M:%S.%L %p'],\n          second: ['%A, %b %e, %l:%M:%S %p', '%A, %b %e, %l:%M:%S %p', ' - %l:%M:%S %p'],\n          minute: ['%A, %b %e, %l:%M %p', '%A, %b %e, %l:%M %p', ' - %l:%M %p'],\n          hour: ['%A, %b %e, %l:%M %p', '%A, %b %e, %l:%M %p', ' - %l:%M %p'],\n          day: ['%A, %b %e, %Y', '%A, %b %e', ' - %A, %b %e, %Y'],\n          week: ['Week from %A, %b %e, %Y', '%A, %b %e', ' - %A, %b %e, %Y'],\n          month: ['%B %Y', '%B', ' - %B %Y'],\n          year: ['%Y', '%Y', ' - %Y']\n        }\n      }\n    };\n  });\n  return {\n    chart: {\n      type: rendering.type,\n      zoomType: 'x',\n      marginBottom: undefined\n    },\n    plotOptions: plotOptions,\n    legend: {\n      layout: 'horizontal',\n      floating: true,\n      align: 'center',\n      y: 10\n    },\n    xAxis: {\n      style: {\n        fontFamily: fontFamily\n      },\n      categories: undefined,\n      dateTimeLabelFormats: {\n        second: '%l:%M:%S %p',\n        minute: '%l:%M %p',\n        hour: '%l:%M %p',\n        day: '%Y-%m-%d',\n        week: '%e. %b',\n        month: \"%b '%y\",\n        year: '%Y'\n      },\n      labels: {\n        style: {\n          fontFamily: fontFamily\n        },\n        autoRotation: false\n      }\n    },\n    yAxis: {\n      title: {\n        text: i18n.t(rendering.units) || ''\n      },\n      labels: {\n        style: {\n          fontFamily: fontFamily\n        },\n        formatter: function formatter() {\n          return rendering.units === 'bytes' || rendering.units === 'bytes/s' ? renderer.bytesRenderer(this.value) : this.value;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Get the highcharts options for a 'categories' report type.\n * @param {Object} report - report config\n * @param {Object} report.rendering - rendering options\n * @returns {Object}\n */\nvar getCategoriesChartOptions = function getCategoriesChartOptions(_ref) {\n  var rendering = _ref.rendering;\n  return {\n    chart: {\n      type: rendering.type,\n      zoomType: undefined\n    },\n    plotOptions: {\n      pie: {\n        innerSize: (rendering.donutInnerSize || 0) + '%',\n        borderWidth: rendering.borderWidth || 1,\n        edgeColor: '#fafafa',\n        edgeWidth: rendering.borderWidth || 1,\n        size: '100%',\n        dataLabels: {\n          style: {\n            fontFamily: fontFamily\n          },\n          distance: 10,\n          formatter: function formatter() {\n            if (rendering.column === 'web_filter_catid') {\n              // show web filter category name instead of category ID\n              this.point.name = renderer.webfilterCategory(this.point.name);\n            }\n            return renderer.shortenText(this.point.name);\n          }\n        }\n      },\n      column: {\n        colorByPoint: true\n      }\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'left',\n      verticalAlign: 'top',\n      floating: true,\n      labelFormatter: function labelFormatter() {\n        return \"<strong>\".concat(renderer.shortenText(this.name), \"</strong>\");\n      }\n    },\n    xAxis: {\n      labels: {\n        style: {\n          fontFamily: fontFamily\n        }\n      },\n      visible: rendering.type === 'column'\n    },\n    yAxis: {\n      labels: {\n        style: {\n          fontFamily: fontFamily\n        }\n      },\n      visible: rendering.type === 'column'\n    }\n  };\n};\nexport default {\n  baseChartOptions: baseChartOptions,\n  getChartOptions: getChartOptions\n};","map":{"version":3,"names":["Highcharts","merge","i18n","renderer","fontFamily","baseChartOptions","chart","animation","marginTop","marginRight","style","type","backgroundColor","navigator","enabled","rangeSelector","scrollbar","tooltip","outside","shared","followPointer","split","padding","hideDelay","useHTML","xDateFormat","headerFormat","concat","legend","itemStyle","fontSize","fontWeight","width","whiteSpace","overflow","textOverflow","title","labelFormatter","t","name","yAxis","opposite","allowDecimals","gridLineColor","gridLineDashStyle","align","offset","reserveSpace","y","rotation","textAlign","color","labels","plotOptions","series","pie","borderColor","getChartOptions","report","data","interfaceIdNameMap","colors","rendering","replace","getDefaultColors","query","getSeriesReportSeries","getOtherReportSeries","reportTypeOptions","getSeriesChartOptions","length","getCategoriesChartOptions","time","useUTC","formatter","defaultFormatter","call","pointFormatter","_report$rendering","_report$rendering2","_report$rendering3","format","shortenText","units","bytesRenderer","bytesSecRenderer","toFixed","_toConsumableArray","getOptions","forEach","point","Object","keys","key","_report$query","queryCategories","groupColumn","push","time_trunc","nulls","map","sort","a","b","String","result","idx","_report$rendering4","_report$rendering5","assign","lineColor","fillColor","linearGradient","x1","y1","x2","y2","stops","Color","setOpacity","topAreaOpacity","get","bottomAreaOpacity","_report$rendering6","normalizedData","value","seriesData","others","slicesNumber","table","seriesLength","column","stacking","undefined","colorByPoint","dataGrouping","dataGroupingEnabled","approximation","dataGroupingApproximation","pointPadding","groupPixelWidth","dataGroupingFactor","plotType","lineWidth","dashStyle","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","zoomType","marginBottom","layout","floating","xAxis","categories","autoRotation","text","_ref","innerSize","donutInnerSize","borderWidth","edgeColor","edgeWidth","size","dataLabels","distance","webfilterCategory","verticalAlign","visible"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/plugins/chartOptions.js"],"sourcesContent":["/**\n * Utilities for handling highcharts options\n */\nimport Highcharts from 'highcharts'\nimport merge from 'lodash/merge'\nimport i18n from './vue-i18n'\nimport renderer from './renderer'\n\n// base options for the highcharts options\nconst fontFamily = 'Roboto, sans-serif'\n\n// the generic base options used for all charts\nconst baseChartOptions = {\n  chart: {\n    animation: false,\n    marginTop: 20,\n    marginRight: 5,\n    style: { fontFamily },\n    type: 'pie', // to avoid initial xAxis cut-off for pies\n    backgroundColor: 'transparent',\n  },\n  navigator: { enabled: false },\n  rangeSelector: { enabled: false },\n  scrollbar: { enabled: false },\n  tooltip: {\n    enabled: true,\n    animation: false,\n    outside: false,\n    shared: true,\n    followPointer: true,\n    split: false,\n    padding: 10,\n    hideDelay: 0,\n    backgroundColor: 'rgba(247, 247, 247, 0.95)',\n    useHTML: true,\n    xDateFormat: '%A, %b %e, %l:%M %p',\n    headerFormat: `<p style=\"font-family: ${fontFamily};font-weight: bold; margin: 0 0 5px 0; color: #555;\">\n        {point.key}\n      </p>`,\n  },\n  legend: {\n    enabled: true,\n    itemStyle: {\n      fontFamily,\n      fontSize: '11px',\n      fontWeight: 300,\n      width: '100px',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    },\n    title: {\n      style: { fontFamily },\n    },\n    labelFormatter() {\n      return i18n.t(this.name)\n    },\n  },\n  yAxis: {\n    opposite: false,\n    allowDecimals: false,\n    gridLineColor: '#EEE',\n    gridLineDashStyle: 'Dash',\n    title: {\n      align: 'high',\n      offset: 0,\n      reserveSpace: false,\n      y: 3,\n      rotation: 0,\n      textAlign: 'left',\n      style: {\n        color: '#555',\n        fontFamily,\n        fontSize: '12px',\n        fontWeight: 600,\n      },\n    },\n    labels: {\n      style: { fontFamily },\n    },\n  },\n  plotOptions: {\n    series: { animation: false },\n    pie: { borderColor: '#fafafa' },\n  },\n  series: [],\n}\n\n/**\n * Get highcharts 'options'\n * @param {Object} report - report configuration\n * @param {Array} data - the report data\n * @param {Object} interfaceIdNameMap - the interface id-name map\n * @returns {Object}\n */\nconst getChartOptions = function (report, data, interfaceIdNameMap) {\n  // get the colors for the series and rendering\n  const colors = report.rendering.colors ? report.rendering.colors.replace(/ /g, '').split(',') : getDefaultColors()\n\n  // get the series to determine the rendering\n  const type = report.query.type\n  const series =\n    type === 'SERIES' || type === 'CATEGORIES_SERIES'\n      ? getSeriesReportSeries(report, colors, data, interfaceIdNameMap)\n      : getOtherReportSeries(report, colors, data)\n\n  // get the highcharts options depending on the report type\n  const reportTypeOptions =\n    type === 'SERIES' || type === 'CATEGORIES_SERIES'\n      ? getSeriesChartOptions(report.rendering, series.length)\n      : getCategoriesChartOptions(report)\n\n  // merge base options, dynamic options, report type options, colors, and series data\n  return merge(\n    {},\n    baseChartOptions,\n    {\n      time: { useUTC: false },\n      tooltip: {\n        formatter(tooltip) {\n          return tooltip.defaultFormatter.call(this, tooltip)\n        },\n        pointFormatter() {\n          let format = `<span style=\"color: ${this.color}; margin-right: 2px;\">\\u25A0</span>\n          <span style=\"font-weight: bold;\">${renderer.shortenText(this.series.name)}</span> &rarr; `\n\n          /**\n           * NOTE:\n           * `bytesRenderer` and `bytesSecRenderer` are already having units in it\n           */\n          switch (report.rendering?.units) {\n            case 'bytes':\n              format += renderer.bytesRenderer(this.y)\n              break\n            case 'bytes/s':\n              format += renderer.bytesSecRenderer(this.y)\n              break\n            case 'ms':\n              format += `${this.y.toFixed(2)} ${report.rendering?.units}`\n              break\n            default:\n              format += `${this.y} ${report.rendering?.units}`\n          }\n          format += `<br/>`\n          return format\n        },\n      },\n    },\n    reportTypeOptions,\n    {\n      colors,\n      series,\n    },\n  )\n}\n\nfunction getDefaultColors() {\n  const colors = [...Highcharts.getOptions().colors]\n\n  // add untangle colors, move color order around\n  // colors.push(vuetify.framework.theme.currentTheme.aristaBlue, colors[2], colors[1])\n  // colors.splice(1, 2, vuetify.framework.theme.currentTheme.utGreen)\n\n  return colors\n}\n\n/**\n * Get the highcharts series option for a 'series' report type.\n * @param {Object} report the report conf\n * @param {Array} colors\n * @param {Array} data\n * @param {Object} interfaceIdNameMap - the interface id-name map\n *\n * @returns {Array}\n */\nfunction getSeriesReportSeries(report, colors, data, interfaceIdNameMap) {\n  const series = {}\n  let name = null\n\n  data.forEach(point => {\n    Object.keys(point).forEach(function (key) {\n      if (key !== 'time_trunc') {\n        name = key\n        if (report.query?.queryCategories?.groupColumn === 'interface_id') {\n          name = `${interfaceIdNameMap?.[key] || i18n.t('unknown')}  [${key}]`\n        }\n        if (!series[key]) {\n          series[key] = { name: name !== '<nil>' ? name : i18n.t('unknown'), data: [] }\n        } else {\n          // null values get converted to 0 by default, unless `rendering.nulls` is true\n          series[key].data.push([point.time_trunc, !report.rendering.nulls ? point[key] || 0 : point[key]])\n        }\n      }\n    })\n  })\n\n  // sort by name before adding colors to keep graph legends consistent\n  return Object.keys(series)\n    .map(key => series[key])\n    .sort((a, b) => (a.name === b.name ? 0 : String(a.name) > String(b.name) ? 1 : -1))\n    .map((result, idx) => {\n      const color = colors[idx] || colors[idx % colors.length]\n      return Object.assign(result, {\n        color,\n        lineColor: color,\n        fillColor: {\n          linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n          stops: [\n            [\n              0,\n              Highcharts.Color(color)\n                .setOpacity(report.rendering?.topAreaOpacity || 0.7)\n                .get('rgba'),\n            ],\n            [\n              1,\n              Highcharts.Color(color)\n                .setOpacity(report.rendering?.bottomAreaOpacity || 0.1)\n                .get('rgba'),\n            ],\n          ],\n        },\n      })\n    })\n}\n\n/**\n * Get the highcharts series option for 'other' (non-series) report types.\n *\n * @param {Report} report - report conf\n * @param {Array}  colors\n * @param {Array}  data\n *\n * @returns {Array}\n */\nfunction getOtherReportSeries(report, colors, data) {\n  const normalizedData = []\n  data.forEach(point => {\n    const name = point[report.query.queryCategories.groupColumn] || i18n.t('unknown')\n    normalizedData.push({\n      name,\n      y: point.value,\n    })\n  })\n\n  let seriesData = []\n  let others\n  const slicesNumber = report.rendering?.slicesNumber || 10\n  if (normalizedData.length > slicesNumber) {\n    others = { name: 'Others', y: 0 }\n    normalizedData.forEach((point, idx) => {\n      if (idx >= slicesNumber) {\n        others.y += point.y\n      } else {\n        seriesData.push(point)\n      }\n    })\n  } else {\n    seriesData = normalizedData\n  }\n\n  // sort data by value\n  seriesData.sort((a, b) => (a.y === b.y ? 0 : a.y < b.y ? 1 : -1))\n\n  // add others to the end of the data\n  if (others) {\n    seriesData.push(others)\n  }\n\n  // add colors\n  seriesData.forEach((point, idx) => (point.color = colors[idx]))\n\n  // return series data\n  return [{ name: report.query.table.split(' ')[0], data: seriesData }]\n}\n\n/**\n * Get the highcharts options for a 'series' report type.\n * @param {Object} rendering - report rendering options\n * @param {Number} seriesLength\n * @returns {Object}\n */\nfunction getSeriesChartOptions(rendering, seriesLength) {\n  const plotOptions = {\n    column: {\n      stacking: rendering.stacking || undefined,\n      colorByPoint: false,\n      dataGrouping: {\n        enabled: rendering.dataGroupingEnabled,\n        approximation: rendering.dataGroupingApproximation,\n        pointPadding: 0.2,\n        groupPixelWidth: rendering.dataGroupingFactor * seriesLength,\n      },\n    },\n  }\n\n  const plotType = ['line', 'spline', 'area', 'areaspline']\n  plotType.forEach(type => {\n    plotOptions[type] = {\n      lineWidth: rendering.lineWidth || 1,\n      stacking: rendering.stacking || undefined,\n      dashStyle: rendering.dashStyle || 'Solid',\n      dataGrouping: {\n        enabled: rendering.dataGroupingEnabled || true,\n        approximation: rendering.dataGroupingApproximation || 'sum',\n        groupPixelWidth: rendering.dataGroupingFactor * seriesLength || 30,\n        dateTimeLabelFormats: {\n          millisecond: ['%A, %b %e, %l:%M:%S.%L %p', '%A, %b %e, %l:%M:%S.%L %p', ' - %l:%M:%S.%L %p'],\n          second: ['%A, %b %e, %l:%M:%S %p', '%A, %b %e, %l:%M:%S %p', ' - %l:%M:%S %p'],\n          minute: ['%A, %b %e, %l:%M %p', '%A, %b %e, %l:%M %p', ' - %l:%M %p'],\n          hour: ['%A, %b %e, %l:%M %p', '%A, %b %e, %l:%M %p', ' - %l:%M %p'],\n          day: ['%A, %b %e, %Y', '%A, %b %e', ' - %A, %b %e, %Y'],\n          week: ['Week from %A, %b %e, %Y', '%A, %b %e', ' - %A, %b %e, %Y'],\n          month: ['%B %Y', '%B', ' - %B %Y'],\n          year: ['%Y', '%Y', ' - %Y'],\n        },\n      },\n    }\n  })\n\n  return {\n    chart: {\n      type: rendering.type,\n      zoomType: 'x',\n      marginBottom: undefined,\n    },\n    plotOptions,\n    legend: {\n      layout: 'horizontal',\n      floating: true,\n      align: 'center',\n      y: 10,\n    },\n    xAxis: {\n      style: { fontFamily },\n      categories: undefined,\n      dateTimeLabelFormats: {\n        second: '%l:%M:%S %p',\n        minute: '%l:%M %p',\n        hour: '%l:%M %p',\n        day: '%Y-%m-%d',\n        week: '%e. %b',\n        month: \"%b '%y\",\n        year: '%Y',\n      },\n      labels: {\n        style: { fontFamily },\n        autoRotation: false,\n      },\n    },\n    yAxis: {\n      title: { text: i18n.t(rendering.units) || '' },\n      labels: {\n        style: { fontFamily },\n        formatter() {\n          return rendering.units === 'bytes' || rendering.units === 'bytes/s'\n            ? renderer.bytesRenderer(this.value)\n            : this.value\n        },\n      },\n    },\n  }\n}\n\n/**\n * Get the highcharts options for a 'categories' report type.\n * @param {Object} report - report config\n * @param {Object} report.rendering - rendering options\n * @returns {Object}\n */\nconst getCategoriesChartOptions = ({ rendering }) => ({\n  chart: {\n    type: rendering.type,\n    zoomType: undefined,\n  },\n  plotOptions: {\n    pie: {\n      innerSize: (rendering.donutInnerSize || 0) + '%',\n      borderWidth: rendering.borderWidth || 1,\n      edgeColor: '#fafafa',\n      edgeWidth: rendering.borderWidth || 1,\n      size: '100%',\n      dataLabels: {\n        style: { fontFamily },\n        distance: 10,\n        formatter() {\n          if (rendering.column === 'web_filter_catid') {\n            // show web filter category name instead of category ID\n            this.point.name = renderer.webfilterCategory(this.point.name)\n          }\n          return renderer.shortenText(this.point.name)\n        },\n      },\n    },\n    column: { colorByPoint: true },\n  },\n  legend: {\n    layout: 'vertical',\n    align: 'left',\n    verticalAlign: 'top',\n    floating: true,\n    labelFormatter() {\n      return `<strong>${renderer.shortenText(this.name)}</strong>`\n    },\n  },\n  xAxis: {\n    labels: {\n      style: { fontFamily },\n    },\n    visible: rendering.type === 'column',\n  },\n  yAxis: {\n    labels: {\n      style: { fontFamily },\n    },\n    visible: rendering.type === 'column',\n  },\n})\n\nexport default { baseChartOptions, getChartOptions }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}