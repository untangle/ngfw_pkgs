{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { captureException } from '@sentry/vue';\nimport { VForm, VOverlay, VProgressCircular } from 'vuetify/lib';\nimport util from '../../plugins/util';\nimport UMfaDialog from '../UMfaDialog';\nimport UTextField from '../UTextField';\nimport UErrorsTooltip from '../UErrorsTooltip';\nexport default {\n  components: {\n    UMfaDialog: UMfaDialog,\n    UTextField: UTextField,\n    UErrorsTooltip: UErrorsTooltip,\n    VForm: VForm,\n    VOverlay: VOverlay,\n    VProgressCircular: VProgressCircular\n  },\n  props: {\n    // prop to display a login with google button and do google sso, will emit 'oauth-login' even when complete\n    googleSso: {\n      type: Boolean,\n      required: false,\n      \"default\": true\n    },\n    // prop to display a login with microsoft button and do microsoft sso, will emit 'oauth-login' even when complete\n    microsoftSso: {\n      type: Boolean,\n      required: false,\n      \"default\": true\n    },\n    organizationSso: {\n      type: Boolean,\n      required: false,\n      \"default\": true\n    },\n    // prop to display a sign up section, will emit 'create-account' when clicked\n    signupSection: {\n      type: Boolean,\n      required: false,\n      \"default\": false\n    },\n    // prop to display a forgot password link, will emit 'forgot-password' when clicked\n    forgotPassword: {\n      type: Boolean,\n      required: false,\n      \"default\": true\n    },\n    // boolean to show an overlay and disable buttons while fetching data, the fetch is initiated in parent\n    fetching: {\n      type: Boolean,\n      \"default\": false\n    },\n    // used to show popup for Mfa code\n    showMfa: {\n      type: Boolean,\n      required: false,\n      \"default\": false\n    },\n    mfaInstructions: {\n      type: String,\n      required: false,\n      \"default\": ''\n    },\n    // this is used for an iframe login where you can attach the mfa dialog to the form instead of the whole page\n    mfaAttach: {\n      type: String,\n      required: false,\n      \"default\": ''\n    },\n    // an email prop may be filled in to automatically enter their email address, like coming from an verification link\n    email: {\n      type: String,\n      required: false,\n      \"default\": ''\n    },\n    // flag to show password field if SSO is not configured\n    showPassword: {\n      type: Boolean,\n      required: false,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      /**\n       * these are credentials posted when login in\n       * they are reactive on changes made in the fields via v-model prop\n       */\n      credentials: {\n        userLogin: this.email,\n        password: ''\n      },\n      // hold the last login method in case mfa is required\n      loginMethod: {\n        type: 'login',\n        idToken: null\n      },\n      // used to manage pop up checkbox, to not display it for Arista/Untangle user\n      showBypassMfa: true,\n      // boolean used to reveal password field\n      passwordReveal: false,\n      googleLoginEnabled: true,\n      /**\n       * Workaround for email/password autocomplete overlapping vuetify label/placeholder behavior.  Once\n       * the field has had focus the vuetify label behavior will work like normal.\n       */\n      userLoginHadFocus: false,\n      passwordHadFocus: false\n    };\n  },\n  computed: {\n    userLoginLabel: function userLoginLabel(_ref) {\n      var $vuntangle = _ref.$vuntangle,\n        organizationSso = _ref.organizationSso;\n      return $vuntangle.$t(organizationSso ? 'email_address_or_organization' : 'email_address');\n    }\n  },\n  /**\n   * Called in 'mounted' instead of 'created' as globals (document.head) should not be called in 'created' lifecycle.\n   */\n  mounted: function mounted() {\n    // inject google api for SSO login if the google prop is sent\n    if (this.googleSso) {\n      this.setGoogleApi();\n    }\n  },\n  created: function created() {\n    // check if microsoft single sign on passed a token back for login\n    var idToken = util.getUrlParameterByName('code');\n    if (idToken) {\n      this.handleMicrosoftLoginResponse(idToken);\n    }\n  },\n  methods: {\n    /**\n     * Try the login again based on the previous login method, this time sending Mfa information.\n     *\n     * @param {string}  mfaCode\n     * @param {boolean} bypassMfa\n     */\n    submitMfaCode: function submitMfaCode(mfaCode, bypassMfa) {\n      if (this.loginMethod.type === 'handleMicrosoftLoginResponse') {\n        this.$emit('oauth-login', 'Microsoft', this.credentials.userLogin, this.loginMethod.idToken, mfaCode, bypassMfa);\n      } else if (this.loginMethod.type === 'handleGoogleLoginResponse') {\n        this.$emit('oauth-login', 'Google', this.credentials.userLogin, this.loginMethod.idToken, mfaCode, bypassMfa);\n      } else {\n        this.login(mfaCode, bypassMfa);\n      }\n    },\n    /**\n     * Inject the external google api javascript into the head tag.\n     */\n    setGoogleApi: function setGoogleApi() {\n      var _this = this;\n      var gapiScript = document.createElement('script');\n      gapiScript.setAttribute('src', 'https://accounts.google.com/gsi/client');\n      gapiScript.async = true;\n      gapiScript.defer = true;\n      // determine if the google api loaded\n      gapiScript.onload = function () {\n        _this.googleLoginEnabled = window.google !== undefined;\n        _this.googleLogin();\n      };\n      document.head.appendChild(gapiScript);\n    },\n    /**\n     * Login with google single sign on.\n     */\n    googleLogin: function googleLogin() {\n      var _this2 = this;\n      // authorize from google api\n      window.google.accounts.id.initialize({\n        client_id: '1091873417511-s8mjl92mst5n2i6ku8je0nekj3eqsroi.apps.googleusercontent.com',\n        callback: function callback(response) {\n          // return if error response\n          if (response.error && response.error !== 'popup_closed_by_user') {\n            captureException(response);\n          }\n          if (!response.error) {\n            _this2.handleGoogleLoginResponse(response.credential);\n          }\n        }\n      });\n      // get width of the Microsoft button and set it to the Google button as well\n      var buttonWidth = document.getElementById('googleLoginDiv').parentElement.offsetWidth;\n      window.google.accounts.id.renderButton(document.getElementById('googleLoginDiv'), {\n        theme: 'outline',\n        size: 'large',\n        logo_alignment: 'center',\n        width: buttonWidth\n      } // customization attributes\n      );\n    },\n    handleGoogleLoginResponse: function handleGoogleLoginResponse(idToken) {\n      var mfaCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var bypassMfa = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.loginMethod = {\n        type: 'handleGoogleLoginResponse',\n        idToken: idToken\n      };\n      this.$emit('oauth-login', 'Google', this.credentials.userLogin, idToken, mfaCode, bypassMfa);\n    },\n    /**\n     * Login with microsoft single sign on.\n     */\n    microsoftLogin: function microsoftLogin() {\n      var urlParts = window.location.href.split('?');\n      var embedLogin = window.location.search.includes('embed');\n      var redirectUrl = encodeURI(urlParts[0]);\n      var state = '';\n      if (urlParts.length > 1) {\n        // strip embed directive, since we'll be in a new window\n        state = '&state=' + encodeURIComponent(urlParts[1].replace('embed&', ''));\n      }\n\n      // remove any hash items\n      redirectUrl = redirectUrl.replace('#', '');\n      var url = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=dbee89a4-4f85-4d5c-a013-f532c5d49d4a&response_type=code&prompt=select_account&redirect_uri=' + redirectUrl + '&response_mode=query&scope=user.read' + state;\n      if (embedLogin) {\n        window.open(url); // we have to open a popup if the login form is embedded\n      } else {\n        window.location.href = url;\n      }\n    },\n    /**\n     * Handle a possible login response back from the microsoft single sign on.\n     */\n    handleMicrosoftLoginResponse: function handleMicrosoftLoginResponse(idToken) {\n      var mfaCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var bypassMfa = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // remove microsoft's \"code=\" query from the URL, change it to the original params which is in \"state=\"\n      var state = util.getUrlParameterByName('state');\n      state = state ? \"?\".concat(state) : '';\n      var currentUrl = new URL(window.location.href);\n      window.history.replaceState({}, null, \"\".concat(currentUrl.origin).concat(currentUrl.pathname).concat(state));\n\n      // login to command center via oAuth\n      this.loginMethod = {\n        type: 'handleMicrosoftLoginResponse',\n        idToken: idToken\n      };\n      this.$emit('oauth-login', 'Microsoft', this.credentials.userLogin, idToken, mfaCode, bypassMfa);\n    },\n    /**\n     * makes the login call with the credentials\n     */\n    login: function login() {\n      var mfaCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var bypassMfa = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // checks is user is from Arista or Untangle for updating Mfa Dialog\n      this.checkIfAristaOrUntangleUser();\n      this.loginMethod = {\n        type: 'login',\n        idToken: null\n      };\n      this.$emit('login', this.credentials.userLogin, this.credentials.password, mfaCode, bypassMfa);\n    },\n    /*\n     * If \"organizationSso\" prop is true, emit an event to check their sso.  If not, just display the\n     * password field.\n     */\n    checkSso: function checkSso() {\n      this.$refs.obs.reset();\n      if (this.organizationSso) {\n        this.$emit('check-sso', this.credentials.userLogin);\n      } else {\n        this.$emit('update:showPassword', true);\n      }\n    },\n    checkIfAristaOrUntangleUser: function checkIfAristaOrUntangleUser() {\n      // arista and untangle users should not see the checkbox, unless the email string contains a + (default value is true)\n      this.showBypassMfa = !['arista.com', 'untangle.com'].includes(this.credentials.userLogin.split('@')[1]) || this.credentials.userLogin.split('@')[0].includes('+');\n    }\n  }\n};","map":{"version":3,"names":["captureException","VForm","VOverlay","VProgressCircular","util","UMfaDialog","UTextField","UErrorsTooltip","components","props","googleSso","type","Boolean","required","microsoftSso","organizationSso","signupSection","forgotPassword","fetching","showMfa","mfaInstructions","String","mfaAttach","email","showPassword","data","credentials","userLogin","password","loginMethod","idToken","showBypassMfa","passwordReveal","googleLoginEnabled","userLoginHadFocus","passwordHadFocus","computed","userLoginLabel","_ref","$vuntangle","$t","mounted","setGoogleApi","created","getUrlParameterByName","handleMicrosoftLoginResponse","methods","submitMfaCode","mfaCode","bypassMfa","$emit","login","_this","gapiScript","document","createElement","setAttribute","async","defer","onload","window","google","undefined","googleLogin","head","appendChild","_this2","accounts","id","initialize","client_id","callback","response","error","handleGoogleLoginResponse","credential","buttonWidth","getElementById","parentElement","offsetWidth","renderButton","theme","size","logo_alignment","width","arguments","length","microsoftLogin","urlParts","location","href","split","embedLogin","search","includes","redirectUrl","encodeURI","state","encodeURIComponent","replace","url","open","concat","currentUrl","URL","history","replaceState","origin","pathname","checkIfAristaOrUntangleUser","checkSso","$refs","obs","reset"],"sources":["node_modules/vuntangle/src/components/ULogin/ULogin.vue"],"sourcesContent":["<template>\n  <div id=\"form-wrapper\">\n    <!-- this slot can be used by the host app to display any login messages, responses, etc -->\n    <slot name=\"loginMessage\" />\n    <!-- for validation rules definitions see plugins/vee-validate.js -->\n    <ValidationObserver ref=\"obs\" v-slot=\"{ passes }\">\n      <!-- Log In section (form) -->\n      <v-form id=\"u-login-form\" @submit.prevent>\n        <!-- userLogin field -->\n        <ValidationProvider v-slot=\"{ errors }\" name=\"userLogin\" :rules=\"`required${!organizationSso ? '|email' : ''}`\">\n          <u-text-field\n            id=\"u-login-email\"\n            v-model=\"credentials.userLogin\"\n            name=\"email\"\n            type=\"email\"\n            class=\"mb-4\"\n            :label=\"userLoginHadFocus ? userLoginLabel : ''\"\n            prepend-inner-icon=\"mdi-account\"\n            :error-messages=\"errors\"\n            :disabled=\"fetching\"\n            :dense=\"false\"\n            :placeholder=\"userLoginLabel\"\n            @keyup=\"$event.keyCode === 13 ? passes(checkSso) : null\"\n            @focus=\"userLoginHadFocus = true\"\n            @change=\"$emit('update:showPassword', false)\"\n          >\n            <template v-if=\"errors.length\" #append>\n              <u-errors-tooltip :errors=\"errors\" />\n            </template>\n          </u-text-field>\n        </ValidationProvider>\n        <div :hidden=\"!showPassword\">\n          <!-- password field -->\n          <ValidationProvider v-slot=\"{ errors }\" name=\"password\" :rules=\"showPassword ? 'required' : ''\">\n            <u-text-field\n              id=\"u-login-password\"\n              v-model=\"credentials.password\"\n              :append-icon=\"passwordReveal ? 'mdi-eye' : 'mdi-eye-off'\"\n              :type=\"passwordReveal ? 'text' : 'password'\"\n              :label=\"passwordHadFocus ? $vuntangle.$t('password') : ''\"\n              :disabled=\"fetching\"\n              :error-messages=\"errors\"\n              :dense=\"false\"\n              class=\"mb-4\"\n              prepend-inner-icon=\"mdi-lock\"\n              :placeholder=\"$vuntangle.$t('password')\"\n              @click:append=\"passwordReveal = !passwordReveal\"\n              @keyup=\"$event.keyCode === 13 ? passes(login) : null\"\n              @focus=\"passwordHadFocus = true\"\n            >\n              <template v-if=\"errors.length\" #append>\n                <u-errors-tooltip :errors=\"errors\" />\n              </template>\n            </u-text-field>\n          </ValidationProvider>\n\n          <!-- forgot password link -->\n          <v-card-text v-if=\"forgotPassword\" class=\"px-0 pb-0 text-right pt-0 mb-4\">\n            <a class=\"link-btn\" @click=\"$emit('forgot-password')\"> {{ $vuntangle.$t('forgot_your_password') }}</a>\n          </v-card-text>\n          <!-- Login button -->\n          <v-btn large block depressed color=\"primary\" :disabled=\"fetching\" @click=\"passes(login)\">\n            {{ $vuntangle.$t('log_in') }}\n          </v-btn>\n        </div>\n        <!-- Continue button -->\n        <v-btn v-if=\"!showPassword\" large block depressed color=\"primary\" @click=\"passes(checkSso)\">\n          {{ $vuntangle.$t('continue') }}\n        </v-btn>\n        <div class=\"d-flex flex-wrap\" style=\"column-gap: 8px\">\n          <div v-if=\"googleSso\" id=\"googleLoginDiv\" class=\"sso-login-button mt-4\"></div>\n          <v-btn\n            v-if=\"microsoftSso\"\n            id=\"microsoftLogin\"\n            small\n            depressed\n            class=\"sso-login-button mt-4\"\n            :dark=\"!fetching\"\n            :disabled=\"fetching\"\n            @click=\"microsoftLogin\"\n          >\n            <img :src=\"require('../../static/icons/sso/microsoft_logo.png')\" class=\"mr-2 sso-login-img\" />{{\n              $vuntangle.$t('sign_in_with_microsoft')\n            }}\n          </v-btn>\n        </div>\n      </v-form>\n    </ValidationObserver>\n    <!-- SIGN UP section -->\n    <div v-if=\"signupSection\">\n      <v-divider class=\"my-4\"></v-divider>\n      <v-card-title class=\"px-0 pt-0\">{{ $vuntangle.$t('sign_up') }}</v-card-title>\n      <v-card-subtitle class=\"px-0 pt-0\">\n        {{ $vuntangle.$t('sign_up_msg') }}\n        <a class=\"link-btn\" @click=\"$emit('create-account')\">\n          {{ $vuntangle.$t('create_an_account') }}\n        </a>\n      </v-card-subtitle>\n    </div>\n    <!-- loading overlay while pending calls -->\n    <v-overlay absolute :value=\"fetching\" opacity=\"0.6\">\n      <v-progress-circular indeterminate color=\"aristaMediumBlue\"></v-progress-circular>\n    </v-overlay>\n    <!-- Mfa Dialog -->\n    <u-mfa-dialog\n      :attach=\"mfaAttach\"\n      :show-mfa=\"showMfa\"\n      :show-bypass-mfa=\"showBypassMfa\"\n      :instructions=\"mfaInstructions\"\n      @update:showMfa=\"val => $emit('update:showMfa', val)\"\n      @submit-mfa=\"submitMfaCode\"\n    />\n  </div>\n</template>\n\n<script>\n  import { captureException } from '@sentry/vue'\n  import { VForm, VOverlay, VProgressCircular } from 'vuetify/lib'\n  import util from '../../plugins/util'\n  import UMfaDialog from '../UMfaDialog'\n  import UTextField from '../UTextField'\n  import UErrorsTooltip from '../UErrorsTooltip'\n\n  export default {\n    components: { UMfaDialog, UTextField, UErrorsTooltip, VForm, VOverlay, VProgressCircular },\n    props: {\n      // prop to display a login with google button and do google sso, will emit 'oauth-login' even when complete\n      googleSso: { type: Boolean, required: false, default: true },\n\n      // prop to display a login with microsoft button and do microsoft sso, will emit 'oauth-login' even when complete\n      microsoftSso: { type: Boolean, required: false, default: true },\n\n      organizationSso: { type: Boolean, required: false, default: true },\n\n      // prop to display a sign up section, will emit 'create-account' when clicked\n      signupSection: { type: Boolean, required: false, default: false },\n\n      // prop to display a forgot password link, will emit 'forgot-password' when clicked\n      forgotPassword: { type: Boolean, required: false, default: true },\n\n      // boolean to show an overlay and disable buttons while fetching data, the fetch is initiated in parent\n      fetching: { type: Boolean, default: false },\n\n      // used to show popup for Mfa code\n      showMfa: { type: Boolean, required: false, default: false },\n      mfaInstructions: { type: String, required: false, default: '' },\n\n      // this is used for an iframe login where you can attach the mfa dialog to the form instead of the whole page\n      mfaAttach: { type: String, required: false, default: '' },\n\n      // an email prop may be filled in to automatically enter their email address, like coming from an verification link\n      email: { type: String, required: false, default: '' },\n\n      // flag to show password field if SSO is not configured\n      showPassword: { type: Boolean, required: false, default: false },\n    },\n    data() {\n      return {\n        /**\n         * these are credentials posted when login in\n         * they are reactive on changes made in the fields via v-model prop\n         */\n        credentials: {\n          userLogin: this.email,\n          password: '',\n        },\n\n        // hold the last login method in case mfa is required\n        loginMethod: {\n          type: 'login',\n          idToken: null,\n        },\n\n        // used to manage pop up checkbox, to not display it for Arista/Untangle user\n        showBypassMfa: true,\n\n        // boolean used to reveal password field\n        passwordReveal: false,\n\n        googleLoginEnabled: true,\n        /**\n         * Workaround for email/password autocomplete overlapping vuetify label/placeholder behavior.  Once\n         * the field has had focus the vuetify label behavior will work like normal.\n         */\n        userLoginHadFocus: false,\n        passwordHadFocus: false,\n      }\n    },\n    computed: {\n      userLoginLabel: ({ $vuntangle, organizationSso }) =>\n        $vuntangle.$t(organizationSso ? 'email_address_or_organization' : 'email_address'),\n    },\n    /**\n     * Called in 'mounted' instead of 'created' as globals (document.head) should not be called in 'created' lifecycle.\n     */\n    mounted() {\n      // inject google api for SSO login if the google prop is sent\n      if (this.googleSso) {\n        this.setGoogleApi()\n      }\n    },\n    created() {\n      // check if microsoft single sign on passed a token back for login\n      const idToken = util.getUrlParameterByName('code')\n      if (idToken) {\n        this.handleMicrosoftLoginResponse(idToken)\n      }\n    },\n    methods: {\n      /**\n       * Try the login again based on the previous login method, this time sending Mfa information.\n       *\n       * @param {string}  mfaCode\n       * @param {boolean} bypassMfa\n       */\n      submitMfaCode(mfaCode, bypassMfa) {\n        if (this.loginMethod.type === 'handleMicrosoftLoginResponse') {\n          this.$emit(\n            'oauth-login',\n            'Microsoft',\n            this.credentials.userLogin,\n            this.loginMethod.idToken,\n            mfaCode,\n            bypassMfa,\n          )\n        } else if (this.loginMethod.type === 'handleGoogleLoginResponse') {\n          this.$emit('oauth-login', 'Google', this.credentials.userLogin, this.loginMethod.idToken, mfaCode, bypassMfa)\n        } else {\n          this.login(mfaCode, bypassMfa)\n        }\n      },\n      /**\n       * Inject the external google api javascript into the head tag.\n       */\n      setGoogleApi() {\n        const gapiScript = document.createElement('script')\n        gapiScript.setAttribute('src', 'https://accounts.google.com/gsi/client')\n        gapiScript.async = true\n        gapiScript.defer = true\n        // determine if the google api loaded\n        gapiScript.onload = () => {\n          this.googleLoginEnabled = window.google !== undefined\n          this.googleLogin()\n        }\n        document.head.appendChild(gapiScript)\n      },\n      /**\n       * Login with google single sign on.\n       */\n      googleLogin() {\n        // authorize from google api\n        window.google.accounts.id.initialize({\n          client_id: '1091873417511-s8mjl92mst5n2i6ku8je0nekj3eqsroi.apps.googleusercontent.com',\n          callback: response => {\n            // return if error response\n            if (response.error && response.error !== 'popup_closed_by_user') {\n              captureException(response)\n            }\n            if (!response.error) {\n              this.handleGoogleLoginResponse(response.credential)\n            }\n          },\n        })\n        // get width of the Microsoft button and set it to the Google button as well\n        const buttonWidth = document.getElementById('googleLoginDiv').parentElement.offsetWidth\n        window.google.accounts.id.renderButton(\n          document.getElementById('googleLoginDiv'),\n          { theme: 'outline', size: 'large', logo_alignment: 'center', width: buttonWidth }, // customization attributes\n        )\n      },\n      handleGoogleLoginResponse(idToken, mfaCode = '', bypassMfa = false) {\n        this.loginMethod = { type: 'handleGoogleLoginResponse', idToken }\n        this.$emit('oauth-login', 'Google', this.credentials.userLogin, idToken, mfaCode, bypassMfa)\n      },\n      /**\n       * Login with microsoft single sign on.\n       */\n      microsoftLogin() {\n        const urlParts = window.location.href.split('?')\n        const embedLogin = window.location.search.includes('embed')\n        let redirectUrl = encodeURI(urlParts[0])\n        let state = ''\n        if (urlParts.length > 1) {\n          // strip embed directive, since we'll be in a new window\n          state = '&state=' + encodeURIComponent(urlParts[1].replace('embed&', ''))\n        }\n\n        // remove any hash items\n        redirectUrl = redirectUrl.replace('#', '')\n\n        const url =\n          'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=dbee89a4-4f85-4d5c-a013-f532c5d49d4a&response_type=code&prompt=select_account&redirect_uri=' +\n          redirectUrl +\n          '&response_mode=query&scope=user.read' +\n          state\n        if (embedLogin) {\n          window.open(url) // we have to open a popup if the login form is embedded\n        } else {\n          window.location.href = url\n        }\n      },\n      /**\n       * Handle a possible login response back from the microsoft single sign on.\n       */\n      handleMicrosoftLoginResponse(idToken, mfaCode = '', bypassMfa = false) {\n        // remove microsoft's \"code=\" query from the URL, change it to the original params which is in \"state=\"\n        let state = util.getUrlParameterByName('state')\n        state = state ? `?${state}` : ''\n\n        const currentUrl = new URL(window.location.href)\n        window.history.replaceState({}, null, `${currentUrl.origin}${currentUrl.pathname}${state}`)\n\n        // login to command center via oAuth\n        this.loginMethod = { type: 'handleMicrosoftLoginResponse', idToken }\n        this.$emit('oauth-login', 'Microsoft', this.credentials.userLogin, idToken, mfaCode, bypassMfa)\n      },\n      /**\n       * makes the login call with the credentials\n       */\n      login(mfaCode = '', bypassMfa = false) {\n        // checks is user is from Arista or Untangle for updating Mfa Dialog\n        this.checkIfAristaOrUntangleUser()\n\n        this.loginMethod = { type: 'login', idToken: null }\n        this.$emit('login', this.credentials.userLogin, this.credentials.password, mfaCode, bypassMfa)\n      },\n\n      /*\n       * If \"organizationSso\" prop is true, emit an event to check their sso.  If not, just display the\n       * password field.\n       */\n      checkSso() {\n        this.$refs.obs.reset()\n\n        if (this.organizationSso) {\n          this.$emit('check-sso', this.credentials.userLogin)\n        } else {\n          this.$emit('update:showPassword', true)\n        }\n      },\n\n      checkIfAristaOrUntangleUser() {\n        // arista and untangle users should not see the checkbox, unless the email string contains a + (default value is true)\n        this.showBypassMfa =\n          !['arista.com', 'untangle.com'].includes(this.credentials.userLogin.split('@')[1]) ||\n          this.credentials.userLogin.split('@')[0].includes('+')\n      },\n    },\n  }\n</script>\n<style lang=\"scss\">\n  @import '../../scss/variables';\n  #custom-disabled.v-btn--disabled {\n    color: #b3b3b2 !important;\n  }\n  .sso-login-button {\n    color: #5e5e5e !important;\n    background-color: #ffffff !important;\n    border: 1px #8c8c8c solid !important;\n    border-radius: 0px;\n    flex-grow: 1;\n    display: flex;\n    min-height: 41px;\n    text-transform: none !important;\n    .sso-login-img {\n      width: 18px;\n      height: 18px;\n    }\n  }\n  .link-btn {\n    color: $aristaMediumBlue !important;\n  }\n  #form-wrapper .v-dialog__content {\n    position: absolute;\n  }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}