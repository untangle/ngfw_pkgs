{"ast":null,"code":"import _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.from-entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { VCard, VCardTitle, VList, VListGroup, VListItem, VListItemContent, VListItemTitle, VListItemSubtitle } from 'vuetify/lib';\nimport NoLicense from '../NoLicense/Main.vue';\nimport renderer from '../../plugins/renderer';\nimport util from '../../plugins/util';\nimport ListItem from './ListItem.vue';\nexport default {\n  components: {\n    VCard: VCard,\n    VCardTitle: VCardTitle,\n    VList: VList,\n    VListGroup: VListGroup,\n    VListItem: VListItem,\n    VListItemContent: VListItemContent,\n    VListItemTitle: VListItemTitle,\n    VListItemSubtitle: VListItemSubtitle,\n    ListItem: ListItem,\n    NoLicense: NoLicense\n  },\n  props: {\n    boxSettings: {\n      type: Object,\n      \"default\": function _default() {}\n    },\n    // the actual devices data\n    devices: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    fetching: {\n      type: Boolean,\n      \"default\": false\n    },\n    showGrid: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      selection: []\n    };\n  },\n  computed: {\n    // return a map like {\"eth0\":\"internal\" , \"eth1\":\"WAN0\", \"ma1_1\":\"MGMT1\"}\n    deviceMap: function deviceMap() {\n      var interfaces = this.boxSettings.network.interfaces;\n      return Object.fromEntries(interfaces.map(function (i) {\n        return [i.device, i.name];\n      }));\n    },\n    // return selected device\n    selectedDevice: function selectedDevice() {\n      return this.selection[0];\n    },\n    // return a sorted array with all the collectors associated\n    selectedDeviceCollectors: function selectedDeviceCollectors() {\n      if (!this.selectedDevice) return;\n      return this.orderedCollectors(this.selectedDevice).sorted;\n    },\n    columnDefs: function columnDefs() {\n      return [{\n        colId: 'mac_address',\n        headerName: this.$t('mac_address'),\n        field: 'macAddress',\n        cellRenderer: function cellRenderer(_ref) {\n          var value = _ref.value;\n          return \"<strong>\".concat(value, \"</strong>\");\n        }\n      }, {\n        colId: 'last_seen',\n        headerName: this.$t('last_seen'),\n        sort: 'desc',\n        autoHeight: true,\n        cellRenderer: this.cellRenderer,\n        valueGetter: this.formatValuesForColumn\n      }, {\n        colId: 'client_address',\n        field: 'client_address',\n        headerName: this.$t('client_address'),\n        autoHeight: true,\n        cellRenderer: this.cellRenderer,\n        valueGetter: this.formatValuesForColumn,\n        // values (a/b) are arrays, first one being the emphasized one (latest)\n        comparator: function comparator(a, b) {\n          return util.compareIpAny(a[0], b[0]);\n        }\n      }, {\n        colId: 'client_interface',\n        headerName: this.$t('client_interface_id'),\n        autoHeight: true,\n        cellRenderer: this.cellRenderer,\n        valueGetter: this.formatValuesForColumn\n      }, {\n        colId: 'system_info',\n        headerName: this.$t('system_info'),\n        autoHeight: true,\n        cellRenderer: this.cellRenderer,\n        valueGetter: this.formatValuesForColumn\n      }, {\n        colId: 'host_name',\n        headerName: this.$t('host_name'),\n        autoHeight: true,\n        cellRenderer: this.cellRenderer,\n        valueGetter: this.formatValuesForColumn\n      }, {\n        headerName: this.$t('data_usage'),\n        field: 'dataUsage',\n        valueGetter: function valueGetter(_ref2) {\n          var data = _ref2.data;\n          var sessionDetail = data.sessionDetail;\n          if (sessionDetail && sessionDetail.dataUsage) return renderer.bytesRenderer(sessionDetail.dataUsage).replace(/<\\/?b>/g, '');\n        }\n      }, {\n        headerName: this.$t('active_sessions'),\n        field: 'numSessions',\n        valueGetter: function valueGetter(_ref3) {\n          var data = _ref3.data;\n          var sessionDetail = data.sessionDetail;\n          if (sessionDetail && sessionDetail.numSessions) return sessionDetail.numSessions;\n        }\n      }, {\n        headerName: this.$t('active_transfer_rate'),\n        field: 'byteTransferRate',\n        valueGetter: function valueGetter(_ref4) {\n          var data = _ref4.data;\n          var sessionDetail = data.sessionDetail;\n          if (sessionDetail && sessionDetail.byteTransferRate) return renderer.bytesSecRenderer(sessionDetail.byteTransferRate).replace(/<\\/?b>/g, '');\n        }\n      }];\n    }\n  },\n  methods: {\n    /**\n     * Returns an array with all the collectors associated with a mac\n     * + an ip based rolledup values\n     * Supposing an entry like\n     * {\n     *   macAddress: '9C:C9:EB:0A:D1:65'\n     *   {\n     *     nmap: {\n     *       '1.2.3.4': { LastUpdate: xxx, ... }, <- array[0]\n     *     },\n     *     lldp: {\n     *       '1.2.3.4': { LastUpdate: xxx, ... }, <- array[1]\n     *     }\n     *     neigh: {\n     *       '1.2.3.4': { LastUpdate: xxx, ... }, <- array[2]\n     *       '2.3.4.5': { LastUpdate: xxx, ... }, <- array[3]\n     *     },\n     *   }\n     * }\n     * It also adds a `type` for each array item, to know from which collector came\n     * Then it sorts the elements by `LastUpdate` descending\n     * Last collector being shown first\n     */\n    orderedCollectors: function orderedCollectors(entry) {\n      var sorted = [];\n      if (entry.nmap) sorted = [].concat(_toConsumableArray(sorted), _toConsumableArray(Object.values(entry.nmap).map(function (el) {\n        return _objectSpread(_objectSpread({}, el), {}, {\n          type: 'nmap'\n        });\n      })));\n      if (entry.lldp) sorted = [].concat(_toConsumableArray(sorted), _toConsumableArray(Object.values(entry.lldp).map(function (el) {\n        return _objectSpread(_objectSpread({}, el), {}, {\n          type: 'lldp'\n        });\n      })));\n      if (entry.neigh) sorted = [].concat(_toConsumableArray(sorted), _toConsumableArray(Object.values(entry.neigh).map(function (el) {\n        return _objectSpread(_objectSpread({}, el), {}, {\n          type: 'neigh'\n        });\n      })));\n      sorted.sort(function (a, b) {\n        if (a.LastUpdate > b.LastUpdate) return -1;\n        if (a.LastUpdate < b.LastUpdate) return 1;\n        return 0;\n      });\n\n      // ip based data rollup\n      var rolledUp = {};\n      sorted.forEach(function (el) {\n        if (!el.ip) return; // this excludes LLDP which does not return an IP\n        if (!rolledUp[el.ip]) {\n          rolledUp[el.ip] = {\n            lastUpdate: el.LastUpdate\n          };\n        }\n        rolledUp[el.ip].ip = el.ip;\n        if (el[\"interface\"] && !rolledUp[el.ip][\"interface\"]) rolledUp[el.ip][\"interface\"] = el[\"interface\"];\n        if ((el.os || el.sysName) && !rolledUp[el.ip].sys) rolledUp[el.ip].sys = el.os || el.sysName;\n        if (el.hostname && !rolledUp[el.ip].hostname) rolledUp[el.ip].hostname = el.hostname;\n      });\n      return {\n        sorted: sorted,\n        rolledUp: Object.values(rolledUp)\n      };\n    },\n    /**\n     * Format values for specific column types\n     */\n    formatValuesForColumn: function formatValuesForColumn(_ref5) {\n      var _this = this;\n      var colDef = _ref5.colDef,\n        data = _ref5.data;\n      var rolledData = this.orderedCollectors(data).rolledUp;\n      var values = [];\n      switch (colDef.colId) {\n        case 'last_seen':\n          values = rolledData.map(function (val) {\n            return _this.$vuntangle.dates.formatLocaleDate(val.lastUpdate * 1000);\n          });\n          break;\n        case 'client_address':\n          values = rolledData.map(function (val) {\n            return val.ip || '-';\n          });\n          break;\n        case 'client_interface':\n          values = rolledData.map(function (val) {\n            return _this.deviceMap[val[\"interface\"]] || '-';\n          });\n          break;\n        case 'system_info':\n          values = rolledData.map(function (val) {\n            return val.sys || '-';\n          });\n          break;\n        case 'host_name':\n          values = rolledData.map(function (val) {\n            return val.hostname || '-';\n          });\n          break;\n      }\n      return values;\n    },\n    /**\n     * renders the above array value in it's auto-height cell as a list\n     * first element (last info from a collector) being emphasized\n     */\n    cellRenderer: function cellRenderer(_ref6) {\n      var value = _ref6.value;\n      return \"<strong>\".concat(value[0], \"</strong><br/> \").concat(value.join('<br/>'));\n    },\n    // rendering helpers\n    renderDataUsage: function renderDataUsage(value) {\n      return value ? renderer.bytesRenderer(value) : '';\n    },\n    renderActiveTransferRate: function renderActiveTransferRate(value) {\n      return value ? renderer.bytesSecRenderer(value) : '';\n    },\n    renderUptime: function renderUptime(value) {\n      return value ? util.formatUptime(value) : '';\n    },\n    renderOpenPorts: function renderOpenPorts(value) {\n      if (!value || !Array.isArray(value)) {\n        return;\n      }\n      var out = [];\n      value.forEach(function (v) {\n        out.push(\"\".concat(v.port, \" (\").concat(v.protocol, \")\"));\n      });\n      return out.join(', ');\n    }\n  }\n};","map":{"version":3,"names":["VCard","VCardTitle","VList","VListGroup","VListItem","VListItemContent","VListItemTitle","VListItemSubtitle","NoLicense","renderer","util","ListItem","components","props","boxSettings","type","Object","default","devices","Array","fetching","Boolean","showGrid","data","selection","computed","deviceMap","interfaces","network","fromEntries","map","i","device","name","selectedDevice","selectedDeviceCollectors","orderedCollectors","sorted","columnDefs","colId","headerName","$t","field","cellRenderer","_ref","value","concat","sort","autoHeight","valueGetter","formatValuesForColumn","comparator","a","b","compareIpAny","_ref2","sessionDetail","dataUsage","bytesRenderer","replace","_ref3","numSessions","_ref4","byteTransferRate","bytesSecRenderer","methods","entry","nmap","_toConsumableArray","values","el","_objectSpread","lldp","neigh","LastUpdate","rolledUp","forEach","ip","lastUpdate","os","sysName","sys","hostname","_ref5","_this","colDef","rolledData","val","$vuntangle","dates","formatLocaleDate","_ref6","join","renderDataUsage","renderActiveTransferRate","renderUptime","formatUptime","renderOpenPorts","isArray","out","v","push","port","protocol"],"sources":["node_modules/vuntangle/src/shared/Clients/Main.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex flex-column fill-height pa-4\">\n    <h1 class=\"headline mb-2\">{{ $t('clients') }}</h1>\n    <div v-if=\"showGrid\" class=\"d-flex flex-grow-1\" outlined>\n      <u-grid\n        id=\"devices\"\n        :no-data-message=\"$vuntangle.$t('no_data_available')\"\n        :row-data=\"devices\"\n        :column-defs=\"columnDefs\"\n        :fetching=\"fetching\"\n        selection-type=\"single\"\n        :selection.sync=\"selection\"\n        :use-condensed-toggle=\"false\"\n        @refresh=\"$emit('refresh')\"\n      />\n\n      <v-card\n        v-if=\"selectedDevice\"\n        :color=\"!$vuetify.theme.isDark ? 'grey lighten-3' : ''\"\n        class=\"d-flex flex-column flex-grow-1\"\n        flat\n        outlined\n        width=\"300\"\n      >\n        <v-card-title>\n          <span>{{ $t('mac') }}: {{ selectedDevice.macAddress }}</span>\n          <v-spacer />\n          <u-btn icon :min-width=\"null\" @click=\"selection = []\"><v-icon>mdi-close</v-icon></u-btn>\n        </v-card-title>\n\n        <v-list dense color=\"transparent\">\n          <v-list-group v-for=\"(item, index) in selectedDeviceCollectors\" :key=\"index\">\n            <template #activator>\n              <v-list-item class=\"pl-0\">\n                <v-list-item-content>\n                  <v-list-item-title> {{ $t('ip') }}: {{ item.ip }} </v-list-item-title>\n                  <v-list-item-subtitle>\n                    <span class=\"text-uppercase\">{{ item.type }}</span> -\n                    {{ $vuntangle.dates.formatLocaleDate(item.LastUpdate * 1000) }}\n                  </v-list-item-subtitle>\n                </v-list-item-content>\n              </v-list-item>\n            </template>\n            <!-- NMAP -->\n            <list-item v-if=\"item.hostname\" :name=\"$t('hostname')\" :value=\"item.hostname\" />\n            <list-item v-if=\"item.os\" :name=\"$t('os')\" :value=\"item.os\" />\n            <list-item v-if=\"item.macVendor\" :name=\"$t('mac_vendor')\" :value=\"item.macVendor\" />\n            <list-item v-if=\"item.uptime\" :name=\"$t('up_time')\" :value=\"renderUptime(item.uptime)\" />\n            <list-item v-if=\"item.lastBoot\" :name=\"$t('last_boot')\" :value=\"item.lastBoot\" />\n            <list-item v-if=\"item.openPorts\" :name=\"$t('open_ports')\" :value=\"renderOpenPorts(item.openPorts)\" />\n            <!-- LLDP -->\n            <list-item v-if=\"item.sysName\" :name=\"$t('sys_name')\" :value=\"item.sysName\" />\n            <list-item v-if=\"item.sysDesc\" :name=\"$t('sys_desc')\" :value=\"item.sysDesc\" />\n            <list-item v-if=\"item.deviceType\" :name=\"$t('device_type')\" :value=\"item.deviceType\" />\n            <list-item v-if=\"item.inventoryHWRev\" :name=\"$t('inventory_hw_rev')\" :value=\"item.inventoryHWRev\" />\n            <list-item v-if=\"item.inventorySoftRev\" :name=\"$t('inventory_soft_rev')\" :value=\"item.inventorySoftRev\" />\n            <list-item v-if=\"item.inventorySerial\" :name=\"$t('inventory_serial')\" :value=\"item.inventorySerial\" />\n            <list-item\n              v-if=\"item.inventoryAssetTag\"\n              :name=\"$t('inventory_asset_tag')\"\n              :value=\"item.inventoryAssetTag\"\n            />\n            <list-item v-if=\"item.inventoryModel\" :name=\"$t('inventory_model')\" :value=\"item.inventoryModel\" />\n            <list-item v-if=\"item.inventoryVendor\" :name=\"$t('inventory_vendor')\" :value=\"item.inventoryVendor\" />\n            <list-item\n              v-if=\"item.chassisCapabilities && Array.isArray(item.chassisCapabilities)\"\n              :name=\"$t('chassis_capabilities')\"\n              :value=\"item.chassisCapabilities.map(cap => cap.capability).join(', ')\"\n            />\n            <!-- NEIGH -->\n            <list-item v-if=\"item.state\" :name=\"$t('state')\" :value=\"item.state\" />\n            <list-item v-if=\"item.interface\" :name=\"$t('interface')\" :value=\"item.interface\" />\n            <list-item v-if=\"item.family\" :name=\"$t('family')\" :value=\"item.family\" />\n            <list-item v-if=\"item.vlan\" :name=\"$t('vlan')\" :value=\"item.vlan\" />\n            <list-item\n              :name=\"$t('last_seen')\"\n              :value=\"$vuntangle.dates.formatLocaleDate(selectedDevice.LastUpdate * 1000)\"\n            />\n            <v-divider />\n          </v-list-group>\n\n          <list-item\n            :name=\"$t('data_usage')\"\n            :value=\"renderDataUsage(selectedDevice.sessionDetail.dataUsage)\"\n            :indent=\"false\"\n          />\n          <list-item :name=\"$t('active_sessions')\" :value=\"selectedDevice.sessionDetail.numSessions\" :indent=\"false\" />\n          <list-item\n            :name=\"$t('active_transfer_rate')\"\n            :value=\"renderActiveTransferRate(selectedDevice.sessionDetail.byteTransferRate)\"\n            :indent=\"false\"\n          />\n        </v-list>\n      </v-card>\n    </div>\n    <div v-else-if=\"showGrid === false\">\n      <v-container>\n        <no-license class=\"mt-8\">\n          {{ $t('discovery_license_required') }}\n        </no-license>\n      </v-container>\n    </div>\n  </div>\n</template>\n\n<script>\n  import {\n    VCard,\n    VCardTitle,\n    VList,\n    VListGroup,\n    VListItem,\n    VListItemContent,\n    VListItemTitle,\n    VListItemSubtitle,\n  } from 'vuetify/lib'\n  import NoLicense from '../NoLicense/Main.vue'\n  import renderer from '../../plugins/renderer'\n  import util from '../../plugins/util'\n  import ListItem from './ListItem.vue'\n\n  export default {\n    components: {\n      VCard,\n      VCardTitle,\n      VList,\n      VListGroup,\n      VListItem,\n      VListItemContent,\n      VListItemTitle,\n      VListItemSubtitle,\n      ListItem,\n      NoLicense,\n    },\n    props: {\n      boxSettings: { type: Object, default: () => {} },\n      // the actual devices data\n      devices: { type: Array, default: () => [] },\n      fetching: { type: Boolean, default: false },\n      showGrid: { type: Boolean, default: false },\n    },\n    data: () => ({\n      selection: [],\n    }),\n\n    computed: {\n      // return a map like {\"eth0\":\"internal\" , \"eth1\":\"WAN0\", \"ma1_1\":\"MGMT1\"}\n      deviceMap() {\n        const interfaces = this.boxSettings.network.interfaces\n        return Object.fromEntries(interfaces.map(i => [i.device, i.name]))\n      },\n      // return selected device\n      selectedDevice() {\n        return this.selection[0]\n      },\n\n      // return a sorted array with all the collectors associated\n      selectedDeviceCollectors() {\n        if (!this.selectedDevice) return\n        return this.orderedCollectors(this.selectedDevice).sorted\n      },\n\n      columnDefs() {\n        return [\n          {\n            colId: 'mac_address',\n            headerName: this.$t('mac_address'),\n            field: 'macAddress',\n            cellRenderer: ({ value }) => `<strong>${value}</strong>`,\n          },\n          {\n            colId: 'last_seen',\n            headerName: this.$t('last_seen'),\n            sort: 'desc',\n            autoHeight: true,\n            cellRenderer: this.cellRenderer,\n            valueGetter: this.formatValuesForColumn,\n          },\n          {\n            colId: 'client_address',\n            field: 'client_address',\n            headerName: this.$t('client_address'),\n            autoHeight: true,\n            cellRenderer: this.cellRenderer,\n            valueGetter: this.formatValuesForColumn,\n            // values (a/b) are arrays, first one being the emphasized one (latest)\n            comparator: (a, b) => util.compareIpAny(a[0], b[0]),\n          },\n          {\n            colId: 'client_interface',\n            headerName: this.$t('client_interface_id'),\n            autoHeight: true,\n            cellRenderer: this.cellRenderer,\n            valueGetter: this.formatValuesForColumn,\n          },\n          {\n            colId: 'system_info',\n            headerName: this.$t('system_info'),\n            autoHeight: true,\n            cellRenderer: this.cellRenderer,\n            valueGetter: this.formatValuesForColumn,\n          },\n          {\n            colId: 'host_name',\n            headerName: this.$t('host_name'),\n            autoHeight: true,\n            cellRenderer: this.cellRenderer,\n            valueGetter: this.formatValuesForColumn,\n          },\n          {\n            headerName: this.$t('data_usage'),\n            field: 'dataUsage',\n            valueGetter: ({ data }) => {\n              const { sessionDetail } = data\n              if (sessionDetail && sessionDetail.dataUsage)\n                return renderer.bytesRenderer(sessionDetail.dataUsage).replace(/<\\/?b>/g, '')\n            },\n          },\n          {\n            headerName: this.$t('active_sessions'),\n            field: 'numSessions',\n            valueGetter: ({ data }) => {\n              const { sessionDetail } = data\n              if (sessionDetail && sessionDetail.numSessions) return sessionDetail.numSessions\n            },\n          },\n          {\n            headerName: this.$t('active_transfer_rate'),\n            field: 'byteTransferRate',\n            valueGetter: ({ data }) => {\n              const { sessionDetail } = data\n              if (sessionDetail && sessionDetail.byteTransferRate)\n                return renderer.bytesSecRenderer(sessionDetail.byteTransferRate).replace(/<\\/?b>/g, '')\n            },\n          },\n        ]\n      },\n    },\n\n    methods: {\n      /**\n       * Returns an array with all the collectors associated with a mac\n       * + an ip based rolledup values\n       * Supposing an entry like\n       * {\n       *   macAddress: '9C:C9:EB:0A:D1:65'\n       *   {\n       *     nmap: {\n       *       '1.2.3.4': { LastUpdate: xxx, ... }, <- array[0]\n       *     },\n       *     lldp: {\n       *       '1.2.3.4': { LastUpdate: xxx, ... }, <- array[1]\n       *     }\n       *     neigh: {\n       *       '1.2.3.4': { LastUpdate: xxx, ... }, <- array[2]\n       *       '2.3.4.5': { LastUpdate: xxx, ... }, <- array[3]\n       *     },\n       *   }\n       * }\n       * It also adds a `type` for each array item, to know from which collector came\n       * Then it sorts the elements by `LastUpdate` descending\n       * Last collector being shown first\n       */\n      orderedCollectors(entry) {\n        let sorted = []\n        if (entry.nmap) sorted = [...sorted, ...Object.values(entry.nmap).map(el => ({ ...el, type: 'nmap' }))]\n        if (entry.lldp) sorted = [...sorted, ...Object.values(entry.lldp).map(el => ({ ...el, type: 'lldp' }))]\n        if (entry.neigh) sorted = [...sorted, ...Object.values(entry.neigh).map(el => ({ ...el, type: 'neigh' }))]\n\n        sorted.sort((a, b) => {\n          if (a.LastUpdate > b.LastUpdate) return -1\n          if (a.LastUpdate < b.LastUpdate) return 1\n          return 0\n        })\n\n        // ip based data rollup\n        const rolledUp = {}\n\n        sorted.forEach(el => {\n          if (!el.ip) return // this excludes LLDP which does not return an IP\n          if (!rolledUp[el.ip]) {\n            rolledUp[el.ip] = {\n              lastUpdate: el.LastUpdate,\n            }\n          }\n          rolledUp[el.ip].ip = el.ip\n          if (el.interface && !rolledUp[el.ip].interface) rolledUp[el.ip].interface = el.interface\n          if ((el.os || el.sysName) && !rolledUp[el.ip].sys) rolledUp[el.ip].sys = el.os || el.sysName\n          if (el.hostname && !rolledUp[el.ip].hostname) rolledUp[el.ip].hostname = el.hostname\n        })\n\n        return { sorted, rolledUp: Object.values(rolledUp) }\n      },\n\n      /**\n       * Format values for specific column types\n       */\n      formatValuesForColumn({ colDef, data }) {\n        const rolledData = this.orderedCollectors(data).rolledUp\n        let values = []\n        switch (colDef.colId) {\n          case 'last_seen':\n            values = rolledData.map(val => this.$vuntangle.dates.formatLocaleDate(val.lastUpdate * 1000))\n            break\n          case 'client_address':\n            values = rolledData.map(val => val.ip || '-')\n            break\n          case 'client_interface':\n            values = rolledData.map(val => this.deviceMap[val.interface] || '-')\n            break\n          case 'system_info':\n            values = rolledData.map(val => val.sys || '-')\n            break\n          case 'host_name':\n            values = rolledData.map(val => val.hostname || '-')\n            break\n        }\n        return values\n      },\n\n      /**\n       * renders the above array value in it's auto-height cell as a list\n       * first element (last info from a collector) being emphasized\n       */\n      cellRenderer({ value }) {\n        return `<strong>${value[0]}</strong><br/> ${value.join('<br/>')}`\n      },\n\n      // rendering helpers\n      renderDataUsage(value) {\n        return value ? renderer.bytesRenderer(value) : ''\n      },\n      renderActiveTransferRate(value) {\n        return value ? renderer.bytesSecRenderer(value) : ''\n      },\n      renderUptime(value) {\n        return value ? util.formatUptime(value) : ''\n      },\n      renderOpenPorts(value) {\n        if (!value || !Array.isArray(value)) {\n          return\n        }\n        const out = []\n        value.forEach(v => {\n          out.push(`${v.port} (${v.protocol})`)\n        })\n        return out.join(', ')\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}