{"ast":null,"code":"import _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport cloneDeep from 'lodash/cloneDeep';\n\n// import vuetify components\nimport { VSlideYReverseTransition } from 'vuetify/lib';\nimport AgGridVue from '../AgGridVue';\nimport util from '../../plugins/util';\nimport props from './props';\n\n// import ag-grid\n// import custom framework components\nimport LoadingOverlay from './components/LoadingOverlay';\nimport NoRowsOverlay from './components/NoRowsOverlay';\nimport Pagination from './components/Pagination.vue';\n\n// import custom filters\nimport DefaultFilter from './filters/DefaultFilter';\nimport DefaultFloatingFilter from './filters/DefaultFloatingFilter.vue';\nimport BooleanFilter from './filters/BooleanFilter';\nimport CollectionFilter from './filters/CollectionFilter';\nimport CountryFilter from './filters/CountryFilter';\nimport CountryFloatingFilter from './filters/CountryFloatingFilter';\nimport RangeFilter from './filters/RangeFilter';\n\n// import renderers\nimport ActionButton from './renderers/ActionButton.vue';\nimport CheckboxRenderer from './renderers/CheckboxRenderer.vue';\nimport CellWithTooltip from './renderers/CellWithTooltip.vue';\nimport RowActions from './renderers/RowActions.vue';\nimport Ordering from './renderers/Ordering.vue';\n\n// import toolbar\nimport Toolbar from './components/Toolbar';\n\n// import features\nimport useValueFormatter from './features/useValueFormatter';\nimport State from './features/State';\nexport default {\n  components: {\n    AgGridVue: AgGridVue,\n    Toolbar: Toolbar,\n    Pagination: Pagination,\n    VSlideYReverseTransition: VSlideYReverseTransition\n  },\n  props: _objectSpread(_objectSpread({}, props), {}, {\n    enableQuickFilter: {\n      type: Boolean,\n      \"default\": true\n    },\n    showMultipleSelectionText: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoFilter: {\n      type: Boolean,\n      \"default\": true\n    },\n    // other props\n    fetching: {\n      type: Boolean,\n      \"default\": false\n    },\n    // boolean showing progress while fetching data, the fetch is initiated in parent\n\n    /**\n     * floating row actions shown at the right\n     * an action must be defined like:\n     * {\n     *    icon: 'mdi-some-icon', // required\n     *    handler: ({ data, node, index}) => {}, // required - method handling the click action\n     *    tooltip: 'some localized tooltip', // optional - tooltip to display on museover\n     * }\n     */\n    rowActions: {\n      type: Array,\n      \"default\": function _default() {\n        return undefined;\n      }\n    },\n    /**\n     * weather the row actions should be floating (default)\n     * or always visible for each row (non floating)\n     */\n    rowActionsFloating: {\n      type: Boolean,\n      \"default\": true\n    },\n    /**\n     * weather to use condensed/expand rows for columns with `autoHeight` feature\n     * for appliance/clients this must be false even if those do have `autoHeight`\n     */\n    useCondensedToggle: {\n      type: Boolean,\n      \"default\": true\n    }\n  }),\n  data: function data() {\n    var _this = this;\n    return {\n      // the components used in the grid\n      agFrameworkComponents: _objectSpread({\n        customLoadingOverlay: LoadingOverlay,\n        customNoRowsOverlay: NoRowsOverlay,\n        ActionButton: ActionButton,\n        CellWithTooltip: CellWithTooltip,\n        Ordering: Ordering,\n        CheckboxRenderer: CheckboxRenderer,\n        defaultFilter: DefaultFilter,\n        booleanFilter: BooleanFilter,\n        collectionFilter: CollectionFilter,\n        rangeFilter: RangeFilter,\n        countryFilter: CountryFilter,\n        countryFloatingFilter: CountryFloatingFilter,\n        defaultFloatingFilter: DefaultFloatingFilter,\n        RowActions: RowActions\n      }, this.frameworkComponents),\n      agColumnDefs: [],\n      rowSelection: null,\n      selectedNumber: 0,\n      filteredNumber: 0,\n      filteredTotal: 0,\n      // global grid options\n      gridOptions: _objectSpread(_objectSpread({\n        suppressCellSelection: true,\n        suppressColumnMoveAnimation: true,\n        animateRows: false,\n        rowBuffer: 50,\n        enableCellTextSelection: true,\n        rowMultiSelectWithClick: true,\n        postProcessPopup: this.alignPopup,\n        floatingFiltersHeight: 50\n      }, this.rowNodeId ? {\n        getRowNodeId: function getRowNodeId(data) {\n          return data[_this.rowNodeId];\n        }\n      } : {}), this.customGridOptions),\n      // column props applied to all columns by default\n      defaultColDef: _objectSpread({\n        sortable: true,\n        resizable: true,\n        suppressMenu: false,\n        filter: 'defaultFilter',\n        // equivalent by default as `agTextColumnFilter`\n        floatingFilterComponent: 'defaultFloatingFilter',\n        floatingFilter: false,\n        floatingFilterComponentParams: {\n          suppressFilterButton: true\n        },\n        sortingOrder: ['asc', 'desc'],\n        minWidth: 150,\n        flex: 1,\n        filterParams: {\n          enableRefresh: this.enableRefresh,\n          enableExportCsv: this.enableExportCsv,\n          showMultipleSelectionText: this.showMultipleSelectionText,\n          // update toolbar position\n          setToolbar: function setToolbar(position) {\n            return _this.toolbarPosition = position;\n          },\n          pinColumn: function pinColumn(colId, position) {\n            _this.columnApi.setColumnPinned(colId, position);\n          },\n          refresh: function refresh() {\n            return _this.onRefresh();\n          },\n          exportCsv: function exportCsv() {\n            return _this.onExportCsv();\n          },\n          resetColumns: function resetColumns() {\n            return _this.onResetColumns();\n          }\n        },\n        // change ag-grids default sort to be case insensitive\n        comparator: function comparator(valueA, valueB, accentedCompare) {\n          var a = valueA || '';\n          var b = valueB || '';\n          return util.sortAlphaNumerically(a, b, _this.$vuntangle.locale, accentedCompare);\n        },\n        /**\n         * By default use a columns 'valueFormatter' for filtering when available.  This is used so the filtering\n         * will match the data on screen.  This may be overridden for advanced filtering like checking\n         * greater than or less than with numerical values.\n         */\n        filterValueGetter: function filterValueGetter(params) {\n          return useValueFormatter(params);\n        }\n      }, this.customDefaultColOptions),\n      // the actual data shown in the grid\n      toolbarPosition: this.toolbar,\n      toolbarFloat: false,\n      // show/hide floating toolbar on mouse enter/leave\n      selectedText: null,\n      quickFilterText: '',\n      quickFilterChanged: false,\n      setQuickFilterText: null,\n      popupParent: document.querySelector('body'),\n      noRowOverlayParams: {\n        noDataMessage: this.noDataMessage\n      },\n      // flag storing the condensed state of the grid, by default being condensed\n      condensedGrid: true,\n      // flag telling if any column filter is applied to the grid\n      isColumnFiltered: false\n    };\n  },\n  computed: {\n    // all classes needed for root grid container\n    classes: function classes() {\n      var classes = this.$vuntangle.theme === 'dark' ? 'ag-theme-alpine-dark' : 'ag-theme-alpine';\n      classes += ' d-flex flex-column align-stretch flex-grow-1';\n      return classes;\n    },\n    isRemoteGrid: function isRemoteGrid() {\n      return this.gridOptions.rowModelType === 'infinite';\n    },\n    // do not try to display data until fetching is done\n    computedRowData: function computedRowData() {\n      return this.fetching ? [] : this.rowData;\n    },\n    /**\n     * Passed to the toolbar so it shows the condensed toggle button only for grids\n     * having at least one colum definition with `autoHeight` set and true\n     */\n    enableCondensedToggle: function enableCondensedToggle(_ref) {\n      var useCondensedToggle = _ref.useCondensedToggle,\n        columnDefs = _ref.columnDefs;\n      return useCondensedToggle && (columnDefs === null || columnDefs === void 0 ? void 0 : columnDefs.some(function (col) {\n        return col.autoHeight;\n      }));\n    }\n  },\n  watch: {\n    noDataMessage: function noDataMessage(value) {\n      this.noRowOverlayParams.noDataMessage = value;\n    },\n    // deselect all rows if parent selectedRows turns into empty array\n    selection: function selection(value) {\n      if (value.length === 0 && this.gridApi.getSelectedRows().length > 0) {\n        this.gridApi.deselectAll();\n      }\n    },\n    // whenever row data changes, filter the selection array\n    // so any record not in data gets filtered out of selection as well\n    rowData: function rowData(data) {\n      var _this2 = this;\n      // not sure how to do this if rowNodeId doesn't exist\n      if (this.rowNodeId && !this.fetching) {\n        var selection = this.selection.filter(function (selectedItem) {\n          return !!data.find(function (dataItem) {\n            var _selectedItem$_this2$;\n            return dataItem[_this2.rowNodeId] === ((_selectedItem$_this2$ = selectedItem[_this2.rowNodeId]) !== null && _selectedItem$_this2$ !== void 0 ? _selectedItem$_this2$ : selectedItem);\n          });\n        });\n        this.$emit('update:selection', selection);\n      }\n    },\n    /**\n     * Intercept the quick filtering to show a loader if non-automatic filtering is being used, this would be\n     * used for larger datasets where automatic filtering temporarily freezes the browser.\n     */\n    quickFilterText: function quickFilterText(newQuickFilterText) {\n      var _this3 = this;\n      if (this.autoFilter) {\n        this.setQuickFilterText = newQuickFilterText;\n      } else {\n        this.quickFilterChanged = true;\n        this.gridApi.showLoadingOverlay();\n\n        // timeout is needed or the overlay is never shown\n        setTimeout(function () {\n          return _this3.setQuickFilterText = newQuickFilterText;\n        }, 300);\n      }\n    },\n    // watch fetching to trigger grid loading overlay\n    fetching: {\n      immediate: true,\n      handler: function handler(value) {\n        if (this.gridApi) {\n          value ? this.gridApi.showLoadingOverlay() : this.gridApi.hideOverlay();\n        }\n      }\n    },\n    columnDefs: {\n      deep: true,\n      handler: function handler(newColumnDefs) {\n        // make sure grid was found\n        if (!this.gridApi) {\n          return;\n        }\n\n        // set new headers only, so to not change any other column state\n        var columnDefs = this.gridApi.getColumnDefs();\n        columnDefs.forEach(function (colDef, i) {\n          var _newColumnDefs$i;\n          if ((_newColumnDefs$i = newColumnDefs[i]) !== null && _newColumnDefs$i !== void 0 && _newColumnDefs$i.headerName) {\n            colDef.headerName = newColumnDefs[i].headerName;\n\n            // column size will change if flex is not set to 0\n            if (colDef.width) {\n              colDef.flex = 0;\n            }\n          }\n        });\n\n        // update the column definitions, refresh data in case locale changed\n        this.agColumnDefs = columnDefs;\n        this.gridApi.redrawRows();\n      }\n    },\n    /**\n     * Watch for prop event to auto resize the columns.  Used in widgets.\n     *\n     * @param {bool} resizeColumns\n     *\n     * @return {void}\n     */\n    resizeColumns: function resizeColumns(_resizeColumns) {\n      if (_resizeColumns) {\n        this.gridApi.sizeColumnsToFit();\n        // set the prop back in the parent so it can be resized again\n        this.$emit('update:resizeColumns', false);\n      }\n    },\n    // used if dynamically changing the selection type, like in appliances list\n    selectionType: function selectionType() {\n      this.setColumnDefs();\n    },\n    // when toggling the condensed state of the grid, update grid columndefs\n    condensedGrid: function condensedGrid() {\n      this.setCondensedGrid();\n    },\n    /**\n     * CD-3660 upon locale change, column defs have to be\n     * updated for grids having first column a selection column\n     * otherwise the column names are shifted left 1 place\n     */\n    '$vuntangle.locale': function $vuntangleLocale() {\n      this.setColumnDefs();\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.setColumnDefs();\n  },\n  mounted: function mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.columnApi = this.gridOptions.columnApi;\n    this.$emit('gridApiReady', this.gridApi);\n\n    // state management, do not use if using the webpack dev server\n    if (this.$vuntangle.env !== 'devServer') {\n      this.state = new State(this.id, this.gridApi, this.columnApi);\n      this.state.load();\n    }\n\n    // show loader, the initial 'fetching' watch may not fire if the grid is not loaded yet\n    if (this.fetching) {\n      this.gridApi.showLoadingOverlay();\n    }\n  },\n  updated: function updated() {\n    if (this.fetching) {\n      this.gridApi.showLoadingOverlay();\n    } else if (this.gridApi.getDisplayedRowCount()) {\n      this.gridApi.hideOverlay();\n    } else {\n      this.gridApi.showNoRowsOverlay();\n    }\n  },\n  methods: {\n    /**\n     * Fire when the row data changes. This is the only place to hook into after the row-data prop\n     * has been updated in the grid, changing the prop is an asynchronous event.  Therefore,\n     * after new data is possibly added, run the 'syncSelection' check to see if any new\n     * rows need to be selected.\n     */\n    onRowDataChanged: function onRowDataChanged() {\n      this.syncSelection();\n      this.setFilterText();\n      this.quickFilterText = '';\n      this.selectedNumber = this.gridApi.getSelectedRows().length;\n    },\n    onSelectionChanged: function onSelectionChanged() {\n      this.$emit('update:selection', this.gridApi.getSelectedRows());\n      this.selectedNumber = this.gridApi.getSelectedRows().length;\n    },\n    /**\n     * Resets column heights upon column resize, needed to accommodate content for autoHeight columns\n     * @param {Object} context\n     * @param {Array} context.columns - columns affected by the resize event\n     * @param {Boolean} context.finished - weather the resize action ended so is not firing endlessly\n     * @param {Object} context.api - the grid api\n     */\n    onColumnResized: function onColumnResized(_ref2) {\n      var columns = _ref2.columns,\n        finished = _ref2.finished,\n        api = _ref2.api,\n        useCondensedToggle = _ref2.useCondensedToggle;\n      // call reset only when resize finished and any of the affected columns has autoHeight prop\n      if (finished && useCondensedToggle && columns.some(function (col) {\n        return col.colDef.autoHeight;\n      })) {\n        api.resetRowHeights();\n      }\n    },\n    /**\n     * Resets column heights upon condensed state toggle\n     * @param {Object} context\n     * @param {Object} context.api - the grid api\n     */\n    onGridColumnsChanged: function onGridColumnsChanged(_ref3) {\n      var api = _ref3.api;\n      api.resetRowHeights();\n    },\n    // sets the filtered string\n    setFilterText: function setFilterText() {\n      if (this.isRemoteGrid) return;\n      this.isColumnFiltered = this.gridApi.isColumnFilterPresent();\n      this.filteredTotal = Object.keys(this.gridApi.getModel().nodeManager.allNodesMap).length;\n      this.filteredNumber = this.gridApi.getDisplayedRowCount();\n      if (this.quickFilterChanged) {\n        this.gridApi.hideOverlay();\n        this.quickFilterChanged = false;\n      }\n    },\n    // enables up/down key row navigation by overriding default cell keyboard nav\n    keyRowNav: function keyRowNav(params) {\n      var suggestedNextCell = params.nextCellPosition;\n      this.gridApi.forEachNode(function (node) {\n        if (node.rowIndex === suggestedNextCell.rowIndex) {\n          node.setSelected(true);\n        }\n      });\n      return suggestedNextCell;\n    },\n    /**\n     * Augments the grid with\n     * - checkbox/radio selection column (pinned left)\n     * - and/or row actions column (pinned right)\n     * This may be called multiple times during a grid lifetime so we need to make sure that\n     * this columns are not duplicated (added multiple times)\n     */\n    setColumnDefs: function setColumnDefs() {\n      var _this4 = this,\n        _this$selectionType;\n      this.agColumnDefs = cloneDeep(this.columnDefs); // to avoid mutation issue\n\n      // if grid is condensed, set `autoHeight` & `wordWrap` columns props as false\n      // on columns which originally have those props set on them\n      if (this.condensedGrid && this.useCondensedToggle) {\n        this.agColumnDefs.forEach(function (colDef) {\n          if (colDef.autoHeight) colDef.autoHeight = false;\n          if (colDef.wrapText) colDef.wrapText = false;\n        });\n      }\n      this.disableSortIfDraggable();\n      var colIds = this.agColumnDefs.map(function (col) {\n        return col.colId;\n      }); // keep a map of colIds to check against\n\n      /**\n       * add order column based on `customOrdering` prop\n       * the column is named Order and allows for drag/drop\n       */\n      if (this.customOrdering) {\n        this.agColumnDefs.unshift({\n          headerName: this.$vuntangle.$t('order'),\n          flex: 0,\n          colId: 'col-ordering',\n          maxWidth: 80,\n          rowDrag: true,\n          pinned: 'left',\n          lockPosition: 'left',\n          lockPinned: true,\n          cellRenderer: 'Ordering',\n          valueGetter: function valueGetter(params) {\n            return params.node.rowIndex + 1;\n          }\n        });\n        // update so all columns have the following props\n        this.defaultColDef.sortable = false;\n        this.defaultColDef.filter = false;\n        this.defaultColDef.suppressMenu = true;\n        // update gridOptions for behavior on row dragging\n        this.gridOptions.suppressRowClickSelection = true;\n        this.gridOptions.rowDragManaged = true;\n        this.gridOptions.rowClass = 'ag-unselectable';\n      }\n      // used to keep grids from having a white space to the side when columns are resized\n      this.gridOptions.rowClass = this.gridOptions.rowClass ? \"\".concat(this.gridOptions.rowClass, \" ag-center-cols-container\") : 'ag-center-cols-container';\n      /**\n       * adds floating/non-floating row actions column based on `rowActions`/`rowActionsFloating` props\n       * `col-actions` class needed only for floating buttons\n       */\n      if (this.rowActions && !colIds.includes('col-actions')) {\n        this.agColumnDefs.push({\n          colId: 'col-actions',\n          headerName: !this.rowActionsFloating ? this.$vuntangle.$t('actions') : undefined,\n          pinned: 'right',\n          lockPosition: true,\n          lockPinned: true,\n          // maxWidth is needed so the right pinned panel is not hidden by ag-grid\n          maxWidth: this.rowActionsFloating ? 1 : this.rowActions.length === 1 ? 60 : this.rowActions.length * 40,\n          resizable: false,\n          filter: false,\n          sortable: false,\n          suppressMenu: true,\n          headerClass: this.rowActionsFloating ? 'col-actions' : '',\n          cellClass: this.rowActionsFloating ? 'col-actions' : '',\n          cellRenderer: 'RowActions',\n          cellRendererParams: function cellRendererParams() {\n            return {\n              actions: _this4.rowActions\n            };\n          }\n        });\n      }\n\n      /**\n       * set the ag-grid `rowSelection` and add checkbox/radio selection column if it's the case,\n       * based on UGrid `selectionType` prop having following possible values:\n       * - `single`       - single selection without radio/checkbox column, selects on row click\n       * - `singleAction` - single selection with radio button column selector\n       * - `multiAction`  - multiple selection with checkbox column selector\n       * - none           - no selection column\n       */\n\n      // first set the ag-grid `rowSelection` prop; ag-grid acceptable values are `single` and `multiple`\n      if ((_this$selectionType = this.selectionType) !== null && _this$selectionType !== void 0 && _this$selectionType.includes('single')) this.rowSelection = 'single';else if (this.selectionType === 'multiAction') this.rowSelection = 'multiple';else return;\n\n      // add the selection column only when having `singleAction` or `multiAction` and is not yet attached to the grid\n      if (!['singleAction', 'multiAction'].includes(this.selectionType) || colIds.includes('sel-column')) return;\n      this.agColumnDefs.unshift({\n        colId: 'sel-column',\n        resizable: false,\n        filter: false,\n        sortable: false,\n        suppressMenu: true,\n        suppressSizeToFit: true,\n        pinned: 'left',\n        lockPosition: true,\n        lockPinned: true,\n        checkboxSelection: true,\n        headerCheckboxSelection: this.selectionType === 'multiAction',\n        headerCheckboxSelectionFilteredOnly: true,\n        minWidth: 50,\n        width: 50,\n        cellStyle: {\n          padding: 0,\n          justifyContent: 'center',\n          display: 'flex'\n        },\n        cellClass: this.selectionType === 'singleAction' ? 'ag-radio' : ''\n      });\n    },\n    /**\n     * Disables sort on all columns\n     * if row reordering is enabled for any column\n     */\n    disableSortIfDraggable: function disableSortIfDraggable() {\n      // check if re ordering is enabled for any column\n      if (this.agColumnDefs.some(function (_ref4) {\n        var rowDrag = _ref4.rowDrag;\n        return rowDrag;\n      })) {\n        // disable sort on all columns\n        this.agColumnDefs.forEach(function (col) {\n          return col.sortable = false;\n        });\n      }\n    },\n    onRefresh: function onRefresh() {\n      this.$emit('refresh');\n\n      // if the rowData is refreshed, make sure the selection is also updated\n      this.$emit('update:selection', []);\n    },\n    onExportCsv: function onExportCsv() {\n      // only get columns that are visible and do not have checkbox selection\n      var columnKeys = [];\n      this.columnApi.getAllGridColumns().forEach(function (column) {\n        if (column.visible && !column.getColDef().checkboxSelection && column.colId !== 'sel-column') {\n          columnKeys.push(column.colId);\n        }\n      });\n      this.gridApi.exportDataAsCsv({\n        fileName: \"export-\".concat(this.id, \".csv\"),\n        columnKeys: columnKeys,\n        processCellCallback: useValueFormatter\n      });\n    },\n    onResetColumns: function onResetColumns() {\n      // important to be called first\n      this.gridApi.setFilterModel(null);\n\n      // reset\n      this.gridApi.setColumnDefs([]);\n      this.setColumnDefs();\n\n      // in case of auto height columns reset heights\n      if (this.agColumnDefs.some(function (def) {\n        return def.autoHeight;\n      })) this.gridApi.resetRowHeights();\n    },\n    /**\n     * Programmatically passes the selection to grid,\n     * This method is called whenever row data is modified\n     */\n    syncSelection: function syncSelection() {\n      var _this5 = this;\n      this.selection.forEach(function (data) {\n        /*\n         * initially the 'selection' prop is just ids, but gets synced to be the whole row object\n         * later on by 'selection-changed' event.  So check for an object with the id prop,\n         * or if not then assume 'data' is just the id\n         */\n        var nodeId = _this5.rowNodeId && data[_this5.rowNodeId] ? data[_this5.rowNodeId] : data;\n        var rowNode = _this5.gridApi.getRowNode(nodeId);\n        if (rowNode) {\n          rowNode.setSelected(true);\n        }\n      });\n    },\n    /**\n     * Makes the column menu visible when it falls outside the scrolling window\n     * (grid columns at the bottom/right of the page, without enough space to show it as default)\n     * The popup will be aligned with the bottom of the window\n     */\n    alignPopup: function alignPopup(params) {\n      var popup = params.ePopup;\n      // timeout needed because of the computations made for menu items\n      setTimeout(function () {\n        if (popup.offsetTop + popup.offsetHeight > window.innerHeight + window.scrollY) {\n          popup.style.top = \"\".concat(window.innerHeight + window.scrollY - popup.offsetHeight, \"px\");\n        }\n      }, 10);\n    },\n    /**\n     * Toggles the condensed/not condensed display of the grid\n     * using the columns from grid api (not the original columnDefs)\n     */\n    setCondensedGrid: function setCondensedGrid() {\n      if (!this.useCondensedToggle) return;\n      var columnDefs = this.gridApi.getColumnDefs();\n      columnDefs.forEach(function (colDef) {\n        if ('autoHeight' in colDef) colDef.autoHeight = !colDef.autoHeight;\n        if ('wrapText' in colDef) colDef.wrapText = !colDef.wrapText;\n      });\n      this.agColumnDefs = columnDefs;\n    },\n    /**\n     * Clears global & all existing column filters\n     */\n    onClearAllFilters: function onClearAllFilters() {\n      this.gridApi.setFilterModel(null);\n      this.quickFilterText = '';\n    }\n  }\n};","map":{"version":3,"names":["cloneDeep","VSlideYReverseTransition","AgGridVue","util","props","LoadingOverlay","NoRowsOverlay","Pagination","DefaultFilter","DefaultFloatingFilter","BooleanFilter","CollectionFilter","CountryFilter","CountryFloatingFilter","RangeFilter","ActionButton","CheckboxRenderer","CellWithTooltip","RowActions","Ordering","Toolbar","useValueFormatter","State","components","_objectSpread","enableQuickFilter","type","Boolean","showMultipleSelectionText","autoFilter","fetching","rowActions","Array","default","undefined","rowActionsFloating","useCondensedToggle","data","_this","agFrameworkComponents","customLoadingOverlay","customNoRowsOverlay","defaultFilter","booleanFilter","collectionFilter","rangeFilter","countryFilter","countryFloatingFilter","defaultFloatingFilter","frameworkComponents","agColumnDefs","rowSelection","selectedNumber","filteredNumber","filteredTotal","gridOptions","suppressCellSelection","suppressColumnMoveAnimation","animateRows","rowBuffer","enableCellTextSelection","rowMultiSelectWithClick","postProcessPopup","alignPopup","floatingFiltersHeight","rowNodeId","getRowNodeId","customGridOptions","defaultColDef","sortable","resizable","suppressMenu","filter","floatingFilterComponent","floatingFilter","floatingFilterComponentParams","suppressFilterButton","sortingOrder","minWidth","flex","filterParams","enableRefresh","enableExportCsv","setToolbar","position","toolbarPosition","pinColumn","colId","columnApi","setColumnPinned","refresh","onRefresh","exportCsv","onExportCsv","resetColumns","onResetColumns","comparator","valueA","valueB","accentedCompare","a","b","sortAlphaNumerically","$vuntangle","locale","filterValueGetter","params","customDefaultColOptions","toolbar","toolbarFloat","selectedText","quickFilterText","quickFilterChanged","setQuickFilterText","popupParent","document","querySelector","noRowOverlayParams","noDataMessage","condensedGrid","isColumnFiltered","computed","classes","theme","isRemoteGrid","rowModelType","computedRowData","rowData","enableCondensedToggle","_ref","columnDefs","some","col","autoHeight","watch","value","selection","length","gridApi","getSelectedRows","deselectAll","_this2","selectedItem","find","dataItem","_selectedItem$_this2$","$emit","newQuickFilterText","_this3","showLoadingOverlay","setTimeout","immediate","handler","hideOverlay","deep","newColumnDefs","getColumnDefs","forEach","colDef","i","_newColumnDefs$i","headerName","width","redrawRows","resizeColumns","sizeColumnsToFit","selectionType","setColumnDefs","setCondensedGrid","$vuntangleLocale","beforeMount","mounted","api","env","state","id","load","updated","getDisplayedRowCount","showNoRowsOverlay","methods","onRowDataChanged","syncSelection","setFilterText","onSelectionChanged","onColumnResized","_ref2","columns","finished","resetRowHeights","onGridColumnsChanged","_ref3","isColumnFilterPresent","Object","keys","getModel","nodeManager","allNodesMap","keyRowNav","suggestedNextCell","nextCellPosition","forEachNode","node","rowIndex","setSelected","_this4","_this$selectionType","wrapText","disableSortIfDraggable","colIds","map","customOrdering","unshift","$t","maxWidth","rowDrag","pinned","lockPosition","lockPinned","cellRenderer","valueGetter","suppressRowClickSelection","rowDragManaged","rowClass","concat","includes","push","headerClass","cellClass","cellRendererParams","actions","suppressSizeToFit","checkboxSelection","headerCheckboxSelection","headerCheckboxSelectionFilteredOnly","cellStyle","padding","justifyContent","display","_ref4","columnKeys","getAllGridColumns","column","visible","getColDef","exportDataAsCsv","fileName","processCellCallback","setFilterModel","def","_this5","nodeId","rowNode","getRowNode","popup","ePopup","offsetTop","offsetHeight","window","innerHeight","scrollY","style","top","onClearAllFilters"],"sources":["node_modules/vuntangle/src/components/UGrid/UGrid.vue"],"sourcesContent":["<template>\n  <v-card\n    :outlined=\"!noBorder\"\n    flat\n    :class=\"classes\"\n    style=\"position: relative; overflow: hidden\"\n    @mouseenter=\"toolbarFloat = true\"\n    @mouseleave=\"toolbarFloat = false\"\n  >\n    <toolbar\n      v-if=\"toolbarPosition === 'top'\"\n      :auto-filter=\"autoFilter\"\n      :quick-filter-text.sync=\"quickFilterText\"\n      :toolbar=\"toolbarPosition\"\n      :filtered-number=\"filteredNumber\"\n      :filtered-total=\"filteredTotal\"\n      :selected-text=\"selectedText\"\n      :selected-number=\"selectedNumber\"\n      :enable-refresh=\"enableRefresh\"\n      :enable-export-csv=\"enableExportCsv\"\n      :enable-quick-filter=\"enableQuickFilter\"\n      :enable-condensed-toggle=\"enableCondensedToggle\"\n      :condensed-grid.sync=\"condensedGrid\"\n      :show-clear=\"isColumnFiltered\"\n      :show-multiple-selection-text=\"selectionType === 'multiAction'\"\n      :fetching=\"fetching\"\n      @export-csv=\"onExportCsv\"\n      @refresh=\"onRefresh\"\n      @clear-all-filters=\"onClearAllFilters\"\n    >\n      <template #toolbarActions>\n        <slot name=\"toolbarActions\"></slot>\n      </template>\n    </toolbar>\n    <!-- UI-772 added an extra div and used `flex-grow` instead of `fill-height` to fix the Safari issue -->\n    <div class=\"d-flex flex-column flex-grow-1\">\n      <ag-grid-vue\n        :id=\"id\"\n        class=\"u-grid flex-grow-1\"\n        :framework-components=\"agFrameworkComponents\"\n        loading-overlay-component=\"customLoadingOverlay\"\n        no-rows-overlay-component=\"customNoRowsOverlay\"\n        :no-rows-overlay-component-params=\"noRowOverlayParams\"\n        :grid-options=\"gridOptions\"\n        :default-col-def=\"defaultColDef\"\n        :row-height=\"28\"\n        :column-defs=\"agColumnDefs\"\n        :row-data=\"computedRowData\"\n        :quick-filter-text=\"setQuickFilterText\"\n        :row-selection=\"rowSelection\"\n        :navigate-to-next-cell=\"keyRowNav\"\n        :popup-parent=\"popupParent\"\n        :modules=\"modules\"\n        @selection-changed=\"onSelectionChanged\"\n        @filter-changed=\"setFilterText\"\n        @row-data-changed=\"onRowDataChanged\"\n        @row-data-updated=\"setFilterText\"\n        @column-resized=\"onColumnResized\"\n        @grid-columns-changed=\"onGridColumnsChanged\"\n        v-on=\"$listeners\"\n      />\n      <pagination :fetching=\"fetching\" v-on=\"$listeners\" />\n    </div>\n    <v-slide-y-reverse-transition>\n      <toolbar\n        v-if=\"toolbarPosition === 'bottom' || (toolbarPosition === 'float' && toolbarFloat)\"\n        :auto-filter=\"autoFilter\"\n        :quick-filter-text.sync=\"quickFilterText\"\n        :toolbar=\"toolbarPosition\"\n        :filtered-number=\"filteredNumber\"\n        :filtered-total=\"filteredTotal\"\n        :selected-text=\"selectedText\"\n        :selected-number=\"selectedNumber\"\n        :enable-refresh=\"enableRefresh\"\n        :enable-export-csv=\"enableExportCsv\"\n        :enable-quick-filter=\"enableQuickFilter\"\n        :enable-condensed-toggle=\"enableCondensedToggle\"\n        :condensed-grid.sync=\"condensedGrid\"\n        :show-multiple-selection-text=\"selectionType === 'multiAction'\"\n        :fetching=\"fetching\"\n        @export-csv=\"onExportCsv\"\n        @refresh=\"onRefresh\"\n      />\n    </v-slide-y-reverse-transition>\n  </v-card>\n</template>\n<script>\n  import cloneDeep from 'lodash/cloneDeep'\n\n  // import vuetify components\n  import { VSlideYReverseTransition } from 'vuetify/lib'\n\n  import AgGridVue from '../AgGridVue'\n  import util from '../../plugins/util'\n  import props from './props'\n\n  // import ag-grid\n  // import custom framework components\n  import LoadingOverlay from './components/LoadingOverlay'\n  import NoRowsOverlay from './components/NoRowsOverlay'\n  import Pagination from './components/Pagination.vue'\n\n  // import custom filters\n  import DefaultFilter from './filters/DefaultFilter'\n  import DefaultFloatingFilter from './filters/DefaultFloatingFilter.vue'\n  import BooleanFilter from './filters/BooleanFilter'\n  import CollectionFilter from './filters/CollectionFilter'\n  import CountryFilter from './filters/CountryFilter'\n  import CountryFloatingFilter from './filters/CountryFloatingFilter'\n  import RangeFilter from './filters/RangeFilter'\n\n  // import renderers\n  import ActionButton from './renderers/ActionButton.vue'\n  import CheckboxRenderer from './renderers/CheckboxRenderer.vue'\n  import CellWithTooltip from './renderers/CellWithTooltip.vue'\n  import RowActions from './renderers/RowActions.vue'\n  import Ordering from './renderers/Ordering.vue'\n\n  // import toolbar\n  import Toolbar from './components/Toolbar'\n\n  // import features\n  import useValueFormatter from './features/useValueFormatter'\n  import State from './features/State'\n\n  export default {\n    components: {\n      AgGridVue,\n      Toolbar,\n      Pagination,\n      VSlideYReverseTransition,\n    },\n\n    props: {\n      ...props,\n\n      enableQuickFilter: { type: Boolean, default: true },\n\n      showMultipleSelectionText: { type: Boolean, default: false },\n\n      autoFilter: { type: Boolean, default: true },\n\n      // other props\n      fetching: { type: Boolean, default: false }, // boolean showing progress while fetching data, the fetch is initiated in parent\n\n      /**\n       * floating row actions shown at the right\n       * an action must be defined like:\n       * {\n       *    icon: 'mdi-some-icon', // required\n       *    handler: ({ data, node, index}) => {}, // required - method handling the click action\n       *    tooltip: 'some localized tooltip', // optional - tooltip to display on museover\n       * }\n       */\n      rowActions: { type: Array, default: () => undefined },\n      /**\n       * weather the row actions should be floating (default)\n       * or always visible for each row (non floating)\n       */\n      rowActionsFloating: { type: Boolean, default: true },\n\n      /**\n       * weather to use condensed/expand rows for columns with `autoHeight` feature\n       * for appliance/clients this must be false even if those do have `autoHeight`\n       */\n      useCondensedToggle: { type: Boolean, default: true },\n    },\n\n    data() {\n      return {\n        // the components used in the grid\n        agFrameworkComponents: {\n          customLoadingOverlay: LoadingOverlay,\n          customNoRowsOverlay: NoRowsOverlay,\n          ActionButton,\n          CellWithTooltip,\n          Ordering,\n          CheckboxRenderer,\n          defaultFilter: DefaultFilter,\n          booleanFilter: BooleanFilter,\n          collectionFilter: CollectionFilter,\n          rangeFilter: RangeFilter,\n          countryFilter: CountryFilter,\n          countryFloatingFilter: CountryFloatingFilter,\n          defaultFloatingFilter: DefaultFloatingFilter,\n          RowActions,\n          ...this.frameworkComponents,\n        },\n        agColumnDefs: [],\n        rowSelection: null,\n        selectedNumber: 0,\n        filteredNumber: 0,\n        filteredTotal: 0,\n\n        // global grid options\n        gridOptions: {\n          suppressCellSelection: true,\n          suppressColumnMoveAnimation: true,\n          animateRows: false,\n          rowBuffer: 50,\n          enableCellTextSelection: true,\n          rowMultiSelectWithClick: true,\n          postProcessPopup: this.alignPopup,\n          floatingFiltersHeight: 50,\n          ...(this.rowNodeId ? { getRowNodeId: data => data[this.rowNodeId] } : {}),\n          ...this.customGridOptions,\n        },\n\n        // column props applied to all columns by default\n        defaultColDef: {\n          sortable: true,\n          resizable: true,\n          suppressMenu: false,\n          filter: 'defaultFilter', // equivalent by default as `agTextColumnFilter`\n          floatingFilterComponent: 'defaultFloatingFilter',\n          floatingFilter: false,\n          floatingFilterComponentParams: {\n            suppressFilterButton: true,\n          },\n          sortingOrder: ['asc', 'desc'],\n          minWidth: 150,\n          flex: 1,\n          filterParams: {\n            enableRefresh: this.enableRefresh,\n            enableExportCsv: this.enableExportCsv,\n            showMultipleSelectionText: this.showMultipleSelectionText,\n            // update toolbar position\n            setToolbar: position => (this.toolbarPosition = position),\n            pinColumn: (colId, position) => {\n              this.columnApi.setColumnPinned(colId, position)\n            },\n            refresh: () => this.onRefresh(),\n            exportCsv: () => this.onExportCsv(),\n            resetColumns: () => this.onResetColumns(),\n          },\n\n          // change ag-grids default sort to be case insensitive\n          comparator: (valueA, valueB, accentedCompare) => {\n            const a = valueA || ''\n            const b = valueB || ''\n            return util.sortAlphaNumerically(a, b, this.$vuntangle.locale, accentedCompare)\n          },\n\n          /**\n           * By default use a columns 'valueFormatter' for filtering when available.  This is used so the filtering\n           * will match the data on screen.  This may be overridden for advanced filtering like checking\n           * greater than or less than with numerical values.\n           */\n          filterValueGetter: params => useValueFormatter(params),\n          ...this.customDefaultColOptions,\n        },\n\n        // the actual data shown in the grid\n        toolbarPosition: this.toolbar,\n        toolbarFloat: false, // show/hide floating toolbar on mouse enter/leave\n        selectedText: null,\n        quickFilterText: '',\n        quickFilterChanged: false,\n        setQuickFilterText: null,\n        popupParent: document.querySelector('body'),\n        noRowOverlayParams: {\n          noDataMessage: this.noDataMessage,\n        },\n        // flag storing the condensed state of the grid, by default being condensed\n        condensedGrid: true,\n        // flag telling if any column filter is applied to the grid\n        isColumnFiltered: false,\n      }\n    },\n    computed: {\n      // all classes needed for root grid container\n      classes() {\n        let classes = this.$vuntangle.theme === 'dark' ? 'ag-theme-alpine-dark' : 'ag-theme-alpine'\n        classes += ' d-flex flex-column align-stretch flex-grow-1'\n        return classes\n      },\n      isRemoteGrid() {\n        return this.gridOptions.rowModelType === 'infinite'\n      },\n      // do not try to display data until fetching is done\n      computedRowData() {\n        return this.fetching ? [] : this.rowData\n      },\n\n      /**\n       * Passed to the toolbar so it shows the condensed toggle button only for grids\n       * having at least one colum definition with `autoHeight` set and true\n       */\n      enableCondensedToggle: ({ useCondensedToggle, columnDefs }) => {\n        return useCondensedToggle && columnDefs?.some(col => col.autoHeight)\n      },\n    },\n    watch: {\n      noDataMessage(value) {\n        this.noRowOverlayParams.noDataMessage = value\n      },\n      // deselect all rows if parent selectedRows turns into empty array\n      selection(value) {\n        if (value.length === 0 && this.gridApi.getSelectedRows().length > 0) {\n          this.gridApi.deselectAll()\n        }\n      },\n\n      // whenever row data changes, filter the selection array\n      // so any record not in data gets filtered out of selection as well\n      rowData(data) {\n        // not sure how to do this if rowNodeId doesn't exist\n        if (this.rowNodeId && !this.fetching) {\n          const selection = this.selection.filter(\n            selectedItem =>\n              !!data.find(dataItem => dataItem[this.rowNodeId] === (selectedItem[this.rowNodeId] ?? selectedItem)),\n          )\n          this.$emit('update:selection', selection)\n        }\n      },\n\n      /**\n       * Intercept the quick filtering to show a loader if non-automatic filtering is being used, this would be\n       * used for larger datasets where automatic filtering temporarily freezes the browser.\n       */\n      quickFilterText(newQuickFilterText) {\n        if (this.autoFilter) {\n          this.setQuickFilterText = newQuickFilterText\n        } else {\n          this.quickFilterChanged = true\n          this.gridApi.showLoadingOverlay()\n\n          // timeout is needed or the overlay is never shown\n          setTimeout(() => (this.setQuickFilterText = newQuickFilterText), 300)\n        }\n      },\n\n      // watch fetching to trigger grid loading overlay\n      fetching: {\n        immediate: true,\n        handler(value) {\n          if (this.gridApi) {\n            value ? this.gridApi.showLoadingOverlay() : this.gridApi.hideOverlay()\n          }\n        },\n      },\n      columnDefs: {\n        deep: true,\n        handler(newColumnDefs) {\n          // make sure grid was found\n          if (!this.gridApi) {\n            return\n          }\n\n          // set new headers only, so to not change any other column state\n          const columnDefs = this.gridApi.getColumnDefs()\n          columnDefs.forEach((colDef, i) => {\n            if (newColumnDefs[i]?.headerName) {\n              colDef.headerName = newColumnDefs[i].headerName\n\n              // column size will change if flex is not set to 0\n              if (colDef.width) {\n                colDef.flex = 0\n              }\n            }\n          })\n\n          // update the column definitions, refresh data in case locale changed\n          this.agColumnDefs = columnDefs\n          this.gridApi.redrawRows()\n        },\n      },\n\n      /**\n       * Watch for prop event to auto resize the columns.  Used in widgets.\n       *\n       * @param {bool} resizeColumns\n       *\n       * @return {void}\n       */\n      resizeColumns(resizeColumns) {\n        if (resizeColumns) {\n          this.gridApi.sizeColumnsToFit()\n          // set the prop back in the parent so it can be resized again\n          this.$emit('update:resizeColumns', false)\n        }\n      },\n\n      // used if dynamically changing the selection type, like in appliances list\n      selectionType() {\n        this.setColumnDefs()\n      },\n\n      // when toggling the condensed state of the grid, update grid columndefs\n      condensedGrid() {\n        this.setCondensedGrid()\n      },\n\n      /**\n       * CD-3660 upon locale change, column defs have to be\n       * updated for grids having first column a selection column\n       * otherwise the column names are shifted left 1 place\n       */\n      '$vuntangle.locale'() {\n        this.setColumnDefs()\n      },\n    },\n\n    beforeMount() {\n      this.setColumnDefs()\n    },\n\n    mounted() {\n      this.gridApi = this.gridOptions.api\n      this.columnApi = this.gridOptions.columnApi\n      this.$emit('gridApiReady', this.gridApi)\n\n      // state management, do not use if using the webpack dev server\n      if (this.$vuntangle.env !== 'devServer') {\n        this.state = new State(this.id, this.gridApi, this.columnApi)\n        this.state.load()\n      }\n\n      // show loader, the initial 'fetching' watch may not fire if the grid is not loaded yet\n      if (this.fetching) {\n        this.gridApi.showLoadingOverlay()\n      }\n    },\n\n    updated() {\n      if (this.fetching) {\n        this.gridApi.showLoadingOverlay()\n      } else if (this.gridApi.getDisplayedRowCount()) {\n        this.gridApi.hideOverlay()\n      } else {\n        this.gridApi.showNoRowsOverlay()\n      }\n    },\n\n    methods: {\n      /**\n       * Fire when the row data changes. This is the only place to hook into after the row-data prop\n       * has been updated in the grid, changing the prop is an asynchronous event.  Therefore,\n       * after new data is possibly added, run the 'syncSelection' check to see if any new\n       * rows need to be selected.\n       */\n      onRowDataChanged() {\n        this.syncSelection()\n        this.setFilterText()\n        this.quickFilterText = ''\n        this.selectedNumber = this.gridApi.getSelectedRows().length\n      },\n\n      onSelectionChanged() {\n        this.$emit('update:selection', this.gridApi.getSelectedRows())\n\n        this.selectedNumber = this.gridApi.getSelectedRows().length\n      },\n\n      /**\n       * Resets column heights upon column resize, needed to accommodate content for autoHeight columns\n       * @param {Object} context\n       * @param {Array} context.columns - columns affected by the resize event\n       * @param {Boolean} context.finished - weather the resize action ended so is not firing endlessly\n       * @param {Object} context.api - the grid api\n       */\n      onColumnResized({ columns, finished, api, useCondensedToggle }) {\n        // call reset only when resize finished and any of the affected columns has autoHeight prop\n        if (finished && useCondensedToggle && columns.some(col => col.colDef.autoHeight)) {\n          api.resetRowHeights()\n        }\n      },\n\n      /**\n       * Resets column heights upon condensed state toggle\n       * @param {Object} context\n       * @param {Object} context.api - the grid api\n       */\n      onGridColumnsChanged({ api }) {\n        api.resetRowHeights()\n      },\n\n      // sets the filtered string\n      setFilterText() {\n        if (this.isRemoteGrid) return\n\n        this.isColumnFiltered = this.gridApi.isColumnFilterPresent()\n\n        this.filteredTotal = Object.keys(this.gridApi.getModel().nodeManager.allNodesMap).length\n        this.filteredNumber = this.gridApi.getDisplayedRowCount()\n\n        if (this.quickFilterChanged) {\n          this.gridApi.hideOverlay()\n          this.quickFilterChanged = false\n        }\n      },\n\n      // enables up/down key row navigation by overriding default cell keyboard nav\n      keyRowNav(params) {\n        const suggestedNextCell = params.nextCellPosition\n        this.gridApi.forEachNode(node => {\n          if (node.rowIndex === suggestedNextCell.rowIndex) {\n            node.setSelected(true)\n          }\n        })\n        return suggestedNextCell\n      },\n\n      /**\n       * Augments the grid with\n       * - checkbox/radio selection column (pinned left)\n       * - and/or row actions column (pinned right)\n       * This may be called multiple times during a grid lifetime so we need to make sure that\n       * this columns are not duplicated (added multiple times)\n       */\n      setColumnDefs() {\n        this.agColumnDefs = cloneDeep(this.columnDefs) // to avoid mutation issue\n\n        // if grid is condensed, set `autoHeight` & `wordWrap` columns props as false\n        // on columns which originally have those props set on them\n        if (this.condensedGrid && this.useCondensedToggle) {\n          this.agColumnDefs.forEach(colDef => {\n            if (colDef.autoHeight) colDef.autoHeight = false\n            if (colDef.wrapText) colDef.wrapText = false\n          })\n        }\n\n        this.disableSortIfDraggable()\n        const colIds = this.agColumnDefs.map(col => col.colId) // keep a map of colIds to check against\n\n        /**\n         * add order column based on `customOrdering` prop\n         * the column is named Order and allows for drag/drop\n         */\n        if (this.customOrdering) {\n          this.agColumnDefs.unshift({\n            headerName: this.$vuntangle.$t('order'),\n            flex: 0,\n            colId: 'col-ordering',\n            maxWidth: 80,\n            rowDrag: true,\n            pinned: 'left',\n            lockPosition: 'left',\n            lockPinned: true,\n            cellRenderer: 'Ordering',\n            valueGetter: params => params.node.rowIndex + 1,\n          })\n          // update so all columns have the following props\n          this.defaultColDef.sortable = false\n          this.defaultColDef.filter = false\n          this.defaultColDef.suppressMenu = true\n          // update gridOptions for behavior on row dragging\n          this.gridOptions.suppressRowClickSelection = true\n          this.gridOptions.rowDragManaged = true\n          this.gridOptions.rowClass = 'ag-unselectable'\n        }\n        // used to keep grids from having a white space to the side when columns are resized\n        this.gridOptions.rowClass = this.gridOptions.rowClass\n          ? `${this.gridOptions.rowClass} ag-center-cols-container`\n          : 'ag-center-cols-container'\n        /**\n         * adds floating/non-floating row actions column based on `rowActions`/`rowActionsFloating` props\n         * `col-actions` class needed only for floating buttons\n         */\n        if (this.rowActions && !colIds.includes('col-actions')) {\n          this.agColumnDefs.push({\n            colId: 'col-actions',\n            headerName: !this.rowActionsFloating ? this.$vuntangle.$t('actions') : undefined,\n            pinned: 'right',\n            lockPosition: true,\n            lockPinned: true,\n            // maxWidth is needed so the right pinned panel is not hidden by ag-grid\n            maxWidth: this.rowActionsFloating ? 1 : this.rowActions.length === 1 ? 60 : this.rowActions.length * 40,\n            resizable: false,\n            filter: false,\n            sortable: false,\n            suppressMenu: true,\n            headerClass: this.rowActionsFloating ? 'col-actions' : '',\n            cellClass: this.rowActionsFloating ? 'col-actions' : '',\n            cellRenderer: 'RowActions',\n            cellRendererParams: () => ({ actions: this.rowActions }),\n          })\n        }\n\n        /**\n         * set the ag-grid `rowSelection` and add checkbox/radio selection column if it's the case,\n         * based on UGrid `selectionType` prop having following possible values:\n         * - `single`       - single selection without radio/checkbox column, selects on row click\n         * - `singleAction` - single selection with radio button column selector\n         * - `multiAction`  - multiple selection with checkbox column selector\n         * - none           - no selection column\n         */\n\n        // first set the ag-grid `rowSelection` prop; ag-grid acceptable values are `single` and `multiple`\n        if (this.selectionType?.includes('single')) this.rowSelection = 'single'\n        else if (this.selectionType === 'multiAction') this.rowSelection = 'multiple'\n        else return\n\n        // add the selection column only when having `singleAction` or `multiAction` and is not yet attached to the grid\n        if (!['singleAction', 'multiAction'].includes(this.selectionType) || colIds.includes('sel-column')) return\n\n        this.agColumnDefs.unshift({\n          colId: 'sel-column',\n          resizable: false,\n          filter: false,\n          sortable: false,\n          suppressMenu: true,\n          suppressSizeToFit: true,\n          pinned: 'left',\n          lockPosition: true,\n          lockPinned: true,\n          checkboxSelection: true,\n          headerCheckboxSelection: this.selectionType === 'multiAction',\n          headerCheckboxSelectionFilteredOnly: true,\n          minWidth: 50,\n          width: 50,\n          cellStyle: { padding: 0, justifyContent: 'center', display: 'flex' },\n          cellClass: this.selectionType === 'singleAction' ? 'ag-radio' : '',\n        })\n      },\n\n      /**\n       * Disables sort on all columns\n       * if row reordering is enabled for any column\n       */\n      disableSortIfDraggable() {\n        // check if re ordering is enabled for any column\n        if (this.agColumnDefs.some(({ rowDrag }) => rowDrag)) {\n          // disable sort on all columns\n          this.agColumnDefs.forEach(col => (col.sortable = false))\n        }\n      },\n\n      onRefresh() {\n        this.$emit('refresh')\n\n        // if the rowData is refreshed, make sure the selection is also updated\n        this.$emit('update:selection', [])\n      },\n\n      onExportCsv() {\n        // only get columns that are visible and do not have checkbox selection\n        const columnKeys = []\n\n        this.columnApi.getAllGridColumns().forEach(column => {\n          if (column.visible && !column.getColDef().checkboxSelection && column.colId !== 'sel-column') {\n            columnKeys.push(column.colId)\n          }\n        })\n\n        this.gridApi.exportDataAsCsv({\n          fileName: `export-${this.id}.csv`,\n          columnKeys,\n          processCellCallback: useValueFormatter,\n        })\n      },\n\n      onResetColumns() {\n        // important to be called first\n        this.gridApi.setFilterModel(null)\n\n        // reset\n        this.gridApi.setColumnDefs([])\n        this.setColumnDefs()\n\n        // in case of auto height columns reset heights\n        if (this.agColumnDefs.some(def => def.autoHeight)) this.gridApi.resetRowHeights()\n      },\n\n      /**\n       * Programmatically passes the selection to grid,\n       * This method is called whenever row data is modified\n       */\n      syncSelection() {\n        this.selection.forEach(data => {\n          /*\n           * initially the 'selection' prop is just ids, but gets synced to be the whole row object\n           * later on by 'selection-changed' event.  So check for an object with the id prop,\n           * or if not then assume 'data' is just the id\n           */\n          const nodeId = this.rowNodeId && data[this.rowNodeId] ? data[this.rowNodeId] : data\n          const rowNode = this.gridApi.getRowNode(nodeId)\n          if (rowNode) {\n            rowNode.setSelected(true)\n          }\n        })\n      },\n\n      /**\n       * Makes the column menu visible when it falls outside the scrolling window\n       * (grid columns at the bottom/right of the page, without enough space to show it as default)\n       * The popup will be aligned with the bottom of the window\n       */\n      alignPopup(params) {\n        const popup = params.ePopup\n        // timeout needed because of the computations made for menu items\n        setTimeout(() => {\n          if (popup.offsetTop + popup.offsetHeight > window.innerHeight + window.scrollY) {\n            popup.style.top = `${window.innerHeight + window.scrollY - popup.offsetHeight}px`\n          }\n        }, 10)\n      },\n\n      /**\n       * Toggles the condensed/not condensed display of the grid\n       * using the columns from grid api (not the original columnDefs)\n       */\n      setCondensedGrid() {\n        if (!this.useCondensedToggle) return\n\n        const columnDefs = this.gridApi.getColumnDefs()\n\n        columnDefs.forEach(colDef => {\n          if ('autoHeight' in colDef) colDef.autoHeight = !colDef.autoHeight\n          if ('wrapText' in colDef) colDef.wrapText = !colDef.wrapText\n        })\n        this.agColumnDefs = columnDefs\n      },\n\n      /**\n       * Clears global & all existing column filters\n       */\n      onClearAllFilters() {\n        this.gridApi.setFilterModel(null)\n        this.quickFilterText = ''\n      },\n    },\n  }\n</script>\n<!--used to keep grids from having a white space to the side when columns are resized -->\n<style>\n  .ag-center-cols-container {\n    min-width: 100% !important;\n  }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}