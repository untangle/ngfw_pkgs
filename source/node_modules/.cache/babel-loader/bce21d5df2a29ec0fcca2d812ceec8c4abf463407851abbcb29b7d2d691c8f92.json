{"ast":null,"code":"import _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { VRow, VCol, VListItem, VListItemAction, VListItemContent, VCheckbox, VRadioGroup, VRadio } from 'vuetify/lib';\nimport { ValidationProvider, extend } from 'vee-validate';\nimport cloneDeep from 'lodash/cloneDeep';\nimport UAutocomplete from '../../components/UAutocomplete';\nimport { isOperatorOptions, portProtocolOptions, limitRateUnitOptions, limitBurstUnitOptions } from '../../constants';\nimport { conditionDefs } from './data/conditionsDefinitions';\nimport { ruleDefs } from './data/rulesDefinitions';\nimport { addConditionHeaders } from './util/addConditionHeaders';\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    VListItem: VListItem,\n    VListItemAction: VListItemAction,\n    VListItemContent: VListItemContent,\n    VCheckbox: VCheckbox,\n    VRadioGroup: VRadioGroup,\n    VRadio: VRadio,\n    ValidationProvider: ValidationProvider,\n    UAutocomplete: UAutocomplete\n  },\n  props: {\n    condition: {\n      type: Object,\n      \"default\": function _default() {}\n    },\n    index: {\n      type: Number,\n      \"default\": undefined\n    },\n    excludedConditions: {\n      type: Array,\n      \"default\": null\n    },\n    allConditions: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    // the settings applied on the box\n    boxSettings: {\n      type: Object,\n      \"default\": null\n    },\n    features: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      conditionCopy: undefined,\n      portProtocolOptions: portProtocolOptions,\n      isOperatorOptions: isOperatorOptions,\n      limitRateUnitOptions: limitRateUnitOptions,\n      limitBurstUnitOptions: limitBurstUnitOptions\n    };\n  },\n  computed: {\n    ruleType: function ruleType(_ref) {\n      var $attrs = _ref.$attrs;\n      return $attrs.ruleType;\n    },\n    remoteData: function remoteData(_ref2) {\n      var $attrs = _ref2.$attrs;\n      return $attrs.remoteData;\n    },\n    remoteFetching: function remoteFetching(_ref3) {\n      var $attrs = _ref3.$attrs;\n      return $attrs.remoteFetching;\n    },\n    isObsolete: function isObsolete(_ref4) {\n      var conditionCopy = _ref4.conditionCopy,\n        $attrs = _ref4.$attrs;\n      return conditionCopy.type && !ruleDefs[$attrs.ruleType].conditions.includes(conditionCopy.type.replace(/_INFERRED/, ''));\n    },\n    conditionTypes: function conditionTypes() {\n      var _this = this;\n      var extractedConditionTypes = this.allConditions.map(function (cond) {\n        var _cond$type;\n        return (_cond$type = cond.type) === null || _cond$type === void 0 ? void 0 : _cond$type.replace(/_INFERRED/, '');\n      });\n      var types = ruleDefs[this.ruleType].conditions;\n\n      // filter out condition types above Layer 3 (for EOS)\n      if (this.features.hasAboveLayer3Conditions === false && ['filter', 'port-forward', 'nat', 'shaping'].includes(this.ruleType)) {\n        types = types.filter(function (type) {\n          return conditionDefs[type].layer3;\n        });\n      }\n      if (this.excludedConditions && Array.isArray(this.excludedConditions)) {\n        types = types.filter(function (el) {\n          return !_this.excludedConditions.includes(el);\n        });\n      }\n\n      // remove already selected conditions types\n      types = types.filter(function (el) {\n        return !extractedConditionTypes.includes(el);\n      });\n      // include existing condition type if selected\n      var conditionType = '';\n      if (this.condition.type !== undefined && this.condition.type !== null) {\n        conditionType = this.condition.type.replace(/_INFERRED/, ''); // removing inferred to match rule list\n      }\n      return addConditionHeaders(ruleDefs[this.ruleType].headers, types, conditionType);\n    },\n    conditionDef: function conditionDef() {\n      var _this$conditionCopy$t, _this$conditionCopy$t2;\n      var allCond = conditionDefs[(_this$conditionCopy$t = this.conditionCopy.type) === null || _this$conditionCopy$t === void 0 ? void 0 : _this$conditionCopy$t.replace(/_INFERRED/, '')] || {};\n      if (this.features && this.features.hasManagementIntf === false && (_this$conditionCopy$t2 = this.conditionCopy.type) !== null && _this$conditionCopy$t2 !== void 0 && _this$conditionCopy$t2.includes('INTERFACE_TYPE')) {\n        var mgmtIndex = allCond.selectItems.findIndex(function (i) {\n          return (i === null || i === void 0 ? void 0 : i.text) === 'management';\n        });\n        if (mgmtIndex !== -1) {\n          delete allCond.selectItems[mgmtIndex];\n        }\n      }\n      return allCond;\n    },\n    useInferred: function useInferred(_ref5) {\n      var _conditionCopy$type;\n      var conditionCopy = _ref5.conditionCopy;\n      return (_conditionCopy$type = conditionCopy.type) === null || _conditionCopy$type === void 0 ? void 0 : _conditionCopy$type.startsWith('APPLICATION');\n    },\n    valueValidationRules: function valueValidationRules(_ref6) {\n      var type = _ref6.type,\n        conditionDef = _ref6.conditionDef;\n      return type ? \"required|\".concat(conditionDef.extraRules || '') : '';\n    },\n    inferred: {\n      get: function get(_ref7) {\n        var _conditionCopy$type2;\n        var conditionCopy = _ref7.conditionCopy;\n        return (_conditionCopy$type2 = conditionCopy.type) === null || _conditionCopy$type2 === void 0 ? void 0 : _conditionCopy$type2.includes('_INFERRED');\n      },\n      set: function set(value) {\n        var _this$conditionCopy$t3;\n        value ? this.conditionCopy.type = this.conditionCopy.type + '_INFERRED' : this.conditionCopy.type = (_this$conditionCopy$t3 = this.conditionCopy.type) === null || _this$conditionCopy$t3 === void 0 ? void 0 : _this$conditionCopy$t3.replace(/_INFERRED/, '');\n      }\n    },\n    limitRateUnits: {\n      get: function get(_ref8) {\n        var conditionCopy = _ref8.conditionCopy;\n        return conditionCopy === null || conditionCopy === void 0 ? void 0 : conditionCopy.rate_unit;\n      },\n      set: function set(value) {\n        this.conditionCopy.rate_unit = value;\n      }\n    },\n    limitBurstUnits: {\n      get: function get(_ref9) {\n        var conditionCopy = _ref9.conditionCopy;\n        return conditionCopy === null || conditionCopy === void 0 ? void 0 : conditionCopy.burst_unit;\n      },\n      set: function set(value) {\n        this.conditionCopy.burst_unit = value;\n      }\n    },\n    /**\n     * condition type computed based on it's name and inferred flag\n     * it also set's some condition defaults upon new value\n     */\n    type: {\n      get: function get(_ref10) {\n        var _conditionCopy$type3;\n        var conditionCopy = _ref10.conditionCopy;\n        return (_conditionCopy$type3 = conditionCopy.type) !== null && _conditionCopy$type3 !== void 0 && _conditionCopy$type3.includes('_INFERRED') ? conditionCopy.type.replace(/_INFERRED/, '') : conditionCopy.type;\n      },\n      set: function set(type) {\n        // adds or removes the `_INFERRED` flag for applications based conditions\n        if (type !== null && type !== void 0 && type.startsWith('APPLICATION')) {\n          if (this.ruleType === 'wan-rules' || this.inferred) {\n            this.conditionCopy.type = type + '_INFERRED';\n          } else this.conditionCopy.type = type;\n        } else this.conditionCopy.type = type;\n        // reset the value to be blank\n        this.conditionCopy.value = null;\n        // set condition defaults upon new type value\n        if (this.conditionDef.defaults) {\n          this.conditionCopy = _objectSpread(_objectSpread({}, {\n            type: this.conditionCopy.type\n          }), this.conditionDef.defaults);\n        } else {\n          this.conditionCopy = {\n            type: this.conditionCopy.type,\n            op: '==',\n            value: ''\n          };\n        }\n        // for SOURCE_PORT and DESTINATION_PORT it adds the extra `port_protocol` default\n        if (type === 'SOURCE_PORT' || type === 'DESTINATION_PORT') {\n          this.conditionCopy.port_protocol = [];\n        }\n      }\n    },\n    /**\n     * computed condition value needed to treat a special case for IP_PROTOCOL condition\n     * settings.json accepts for IP_PROTOCOL a comma separated string with values\n     * the autocomplete field returns an array of string values\n     * so it has to do this get/set conversion for the condition value\n     */\n    value: {\n      get: function get(_ref11) {\n        var type = _ref11.type,\n          conditionCopy = _ref11.conditionCopy;\n        return conditionCopy.value && type === 'IP_PROTOCOL' ? (conditionCopy.value + '').split(',') : conditionCopy.value;\n      },\n      set: function set(value) {\n        if (this.type === 'IP_PROTOCOL') this.conditionCopy.value = value.join() || null;else this.conditionCopy.value = value;\n      }\n    },\n    /**\n     * returns items for autocomplete/select fields conditions\n     * retrieved from remote (host app)\n     */\n    remoteItems: function remoteItems(_ref12) {\n      var remoteData = _ref12.remoteData,\n        type = _ref12.type;\n      switch (type) {\n        case 'APPLICATION_NAME':\n          return remoteData.apps ? remoteData.apps.map(function (app) {\n            return app.name;\n          }) : undefined;\n        case 'APPLICATION_CATEGORY':\n          return remoteData.apps ? remoteData.apps.map(function (app) {\n            return app.category;\n          }) : undefined;\n        case 'SOURCE_INTERFACE_ZONE':\n        case 'DESTINATION_INTERFACE_ZONE':\n        case 'CLIENT_INTERFACE_ZONE':\n        case 'SERVER_INTERFACE_ZONE':\n          return remoteData.zoneInterfaces ? remoteData.zoneInterfaces : undefined;\n        default:\n          return undefined;\n      }\n    },\n    /**\n     * sets the port protocol for DESTINATION or SOURCE port\n     * for some reason the port protocol value can be a plain number or an array of numbers\n     * so we have to switch between array or not depending of the single/multiple selection\n     */\n    portProtocols: {\n      get: function get(_ref13) {\n        var conditionCopy = _ref13.conditionCopy;\n        return !Array.isArray(conditionCopy === null || conditionCopy === void 0 ? void 0 : conditionCopy.port_protocol) ? [conditionCopy === null || conditionCopy === void 0 ? void 0 : conditionCopy.port_protocol] : conditionCopy === null || conditionCopy === void 0 ? void 0 : conditionCopy.port_protocol;\n      },\n      set: function set(value) {\n        if (value.length === 1) this.conditionCopy.port_protocol = value[0];else this.conditionCopy.port_protocol = value;\n      }\n    },\n    // validation rules for the condition type field\n    conditionTypeRules: function conditionTypeRules(_ref14) {\n      var boxSettings = _ref14.boxSettings;\n      return boxSettings ? 'required|validate_service' : 'required';\n    }\n  },\n  watch: {\n    condition: {\n      handler: function handler(newCond, oldCond) {\n        if (newCond.type === 'BURST_SIZE') {\n          this.$emit('add-limit-rate');\n        }\n        // TODO better handling of set/update conditionCopy\n        if (JSON.stringify(newCond) === JSON.stringify(oldCond)) return;\n        this.conditionCopy = cloneDeep(newCond);\n      },\n      immediate: true\n    },\n    /**\n     * for some conditions data is retrieved from the host app\n     * so an event is triggered to fetch that data\n     */\n    'conditionCopy.type': {\n      handler: function handler(type) {\n        if (!type) return;\n        if (!this.$attrs.remoteData.apps && (type.startsWith('APPLICATION_NAME') || type.startsWith('APPLICATION_CATEGORY') || type.startsWith('APPLICATION_ID'))) {\n          this.$emit('get-remote-data', 'apps');\n        }\n        if (!this.$attrs.remoteData.zoneInterfaces && type.includes('_ZONE')) {\n          this.$emit('get-remote-data', 'zone-interfaces');\n        }\n      },\n      immediate: true\n    },\n    conditionCopy: {\n      handler: function handler(cond) {\n        this.$emit('update:condition', cond);\n      },\n      deep: true\n    }\n  },\n  created: function created() {\n    extend('validate_service', this.validateService);\n  },\n  methods: {\n    validateService: function validateService(value) {\n      // checks if the selected condition has the requied service enabled.\n      // e.g: for selecting condition: \"Application Category\", service: \"Application Control\" should be enabled\n      if (value.includes('APPLICATION') && !this.boxSettings.application_control.enabled) {\n        return this.$t('service_x_is_disabled', [this.$t('application_control')]);\n      }\n      if (value === 'GEOIP' && !this.boxSettings.geoip.enabled) {\n        return this.$t('service_x_is_disabled', [this.$t('geoip')]);\n      }\n      return true;\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","VListItem","VListItemAction","VListItemContent","VCheckbox","VRadioGroup","VRadio","ValidationProvider","extend","cloneDeep","UAutocomplete","isOperatorOptions","portProtocolOptions","limitRateUnitOptions","limitBurstUnitOptions","conditionDefs","ruleDefs","addConditionHeaders","components","props","condition","type","Object","default","index","Number","undefined","excludedConditions","Array","allConditions","boxSettings","features","data","conditionCopy","computed","ruleType","_ref","$attrs","remoteData","_ref2","remoteFetching","_ref3","isObsolete","_ref4","conditions","includes","replace","conditionTypes","_this","extractedConditionTypes","map","cond","_cond$type","types","hasAboveLayer3Conditions","filter","layer3","isArray","el","conditionType","headers","conditionDef","_this$conditionCopy$t","_this$conditionCopy$t2","allCond","hasManagementIntf","mgmtIndex","selectItems","findIndex","i","text","useInferred","_ref5","_conditionCopy$type","startsWith","valueValidationRules","_ref6","concat","extraRules","inferred","get","_ref7","_conditionCopy$type2","set","value","_this$conditionCopy$t3","limitRateUnits","_ref8","rate_unit","limitBurstUnits","_ref9","burst_unit","_ref10","_conditionCopy$type3","defaults","_objectSpread","op","port_protocol","_ref11","split","join","remoteItems","_ref12","apps","app","name","category","zoneInterfaces","portProtocols","_ref13","length","conditionTypeRules","_ref14","watch","handler","newCond","oldCond","$emit","JSON","stringify","immediate","deep","created","validateService","methods","application_control","enabled","$t","geoip"],"sources":["node_modules/vuntangle/src/shared/Conditions/RuleCondition.vue"],"sourcesContent":["<template>\n  <v-row dense align=\"center\">\n    <!-- CONDITION TYPE\n      type selector computed based on condition type and inferred option\n      e.g. if type is APPLICATION_NAME and inferred is TRUE\n      than the actual condition type settings is APPLICATION_NAME_INFERRED\n      basically it adds/removes _INFERRED in type name\n    -->\n    <v-col cols=\"4\">\n      <ValidationProvider v-slot=\"{ errors }\" :rules=\"conditionTypeRules\">\n        <u-autocomplete\n          v-if=\"!isObsolete\"\n          v-model=\"type\"\n          :items=\"conditionTypes\"\n          :placeholder=\"$vuntangle.$t('condition')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-autocomplete>\n        <u-text-field v-if=\"isObsolete\" v-model=\"type\" disabled></u-text-field>\n      </ValidationProvider>\n    </v-col>\n\n    <!-- OPERATORS\n      Operator selector behaving as follows:\n      - using is, is not (==, !=) for string values of a given condition type (default)\n      - using all operators (==, !=, >, <, >=, <=) for numeric values of a specific condition type\n      - disabled if type is not set\n      - not shown if field is boolean\n      Does not need a validator as the value is always set to a default\n    -->\n    <v-col v-if=\"conditionDef.field !== 'boolean'\" cols=\"2\">\n      <u-select\n        v-model=\"conditionCopy.op\"\n        :items=\"conditionDef.ops || isOperatorOptions\"\n        :disabled=\"!type || isObsolete\"\n      >\n        <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n        <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n      </u-select>\n    </v-col>\n\n    <!-- VALUE\n      the condition value that can be entered using different input fields depending on the condition type\n      - by default it's a simple textfield\n      - in case of application names/categories/ids it's an autocomplete field\n      - in case of application productivity/risk it's a select field\n      see data/defs.js for each condition type definition, the type of input field\n\n      SOURCE_PORT and DESTINATION_PORT conditions have an extra field `portProtocols`\n      based on that, the value field size is shorter to make space for port protocols selector\n    -->\n    <v-col :cols=\"type === 'SOURCE_PORT' || type === 'DESTINATION_PORT' || type === 'LIMIT_RATE' ? 2 : undefined\">\n      <!--\n        default input text for string value of condition types\n        used for conditions that does not have a specific field defined\n        see (data/defs.js)\n        - disabled if condition type is not set\n        - using default `required` validation rule, along with other rules if specified in condition definition\n      -->\n      <template v-if=\"!conditionDef.field\">\n        <ValidationProvider v-slot=\"{ errors }\" :rules=\"valueValidationRules\">\n          <u-text-field\n            v-model=\"value\"\n            :disabled=\"!type || isObsolete\"\n            :placeholder=\"$vuntangle.$t('value')\"\n            :error-messages=\"errors\"\n          >\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-text-field>\n        </ValidationProvider>\n      </template>\n\n      <!-- select field\n        used for conditions types that have defined the value field being `select`\n        - using the `selectItems` from the condition definition as the possible values for the condition value\n        - disabled if condition type not set\n        see (data/defs.js)\n      -->\n      <template v-if=\"conditionDef.field === 'select'\">\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-select\n            v-model=\"value\"\n            :items=\"conditionDef.selectItems || remoteItems\"\n            :disabled=\"!type || isObsolete\"\n            :placeholder=\"$vuntangle.$t('value')\"\n            :loading=\"remoteFetching\"\n            :error-messages=\"errors\"\n          >\n            <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) || item }}</template>\n            <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) || item }}</template>\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-select>\n        </ValidationProvider>\n      </template>\n\n      <!-- autocomplete field\n        used for conditions types that have defined the value field being `autocomplete`\n        the `autocompleteItems` are set via an event captured by the host app, triggering an API call than passes via props the values\n        this field applies for APPLICATION_NAME, APPLICATION_CATEGORY and APPLICATION_ID condition types\n      -->\n      <template v-if=\"conditionDef.field === 'autocomplete'\">\n        <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n          <u-autocomplete\n            v-model=\"value\"\n            :items=\"conditionDef.autocompleteItems || remoteItems\"\n            :multiple=\"conditionDef.multiple\"\n            :placeholder=\"$vuntangle.$t('value')\"\n            :loading=\"remoteFetching\"\n            :error-messages=\"errors\"\n            :disabled=\"isObsolete\"\n          >\n            <template v-if=\"type === 'APPLICATION_CATEGORY'\" #selection=\"{ item }\">\n              {{ $vuntangle.$t(item.replace(/ /g, '_').toLowerCase()) }}\n            </template>\n            <template #item=\"{ item, attrs, on }\">\n              <v-list-item v-slot=\"{ active }\" v-bind=\"attrs\" dense class=\"px-2\" v-on=\"on\">\n                <v-list-item-action v-if=\"conditionDef.multiple\" class=\"my-0 mr-2\">\n                  <v-checkbox :input-value=\"active\" dense :ripple=\"false\" />\n                </v-list-item-action>\n                <v-list-item-content v-if=\"type === 'APPLICATION_CATEGORY'\">\n                  {{ $vuntangle.$t(item.replace(/ /g, '_').toLowerCase()) }}\n                </v-list-item-content>\n                <v-list-item-content v-else> {{ item.text || item }} </v-list-item-content>\n              </v-list-item>\n            </template>\n            <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n          </u-autocomplete>\n        </ValidationProvider>\n      </template>\n\n      <template v-if=\"conditionDef.field === 'boolean'\">\n        <v-radio-group v-model=\"value\" row class=\"ma-0 pa-0\" hide-details>\n          <v-radio :label=\"$vuntangle.$t('yes')\" :value=\"true\"></v-radio>\n          <v-radio :label=\"$vuntangle.$t('no')\" :value=\"false\"></v-radio>\n        </v-radio-group>\n      </template>\n    </v-col>\n\n    <!--\n      SOURCE_PORT and DESTINATION_PORT conditions have an extra field `portProtocols`\n      the below select field is used only for this specific case\n    -->\n    <v-col v-if=\"type === 'SOURCE_PORT' || type === 'DESTINATION_PORT'\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-select\n          v-model=\"portProtocols\"\n          :placeholder=\"$vuntangle.$t('select_protocol')\"\n          :items=\"portProtocolOptions\"\n          :menu-props=\"{ offsetY: true }\"\n          :error-messages=\"errors\"\n          multiple\n          :disabled=\"isObsolete\"\n        >\n          <template #item=\"{ item, attrs, on }\">\n            <v-list-item v-slot=\"{ active }\" dense v-bind=\"attrs\" class=\"px-2\" v-on=\"on\">\n              <v-list-item-action class=\"my-0 mr-2\">\n                <v-checkbox :input-value=\"active\" dense :ripple=\"false\" />\n              </v-list-item-action>\n              <v-list-item-content> {{ item.text }} </v-list-item-content>\n            </v-list-item>\n          </template>\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-select>\n      </ValidationProvider>\n    </v-col>\n\n    <!-- inferred checkbox flag\n      this is used only for APPLICATION condition types\n      and it is disabled for wan-rules having only INFERRED application types\n      -->\n    <v-col v-if=\"useInferred\" cols=\"1\">\n      <v-checkbox\n        v-model=\"inferred\"\n        label=\"Inferred\"\n        :disabled=\"ruleType === 'wan-rules' || isObsolete\"\n        class=\"my-0 py-0\"\n        hide-details\n      />\n    </v-col>\n    <v-col v-if=\"type === 'LIMIT_RATE'\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-select\n          v-model=\"limitRateUnits\"\n          :placeholder=\"$vuntangle.$t('select_unit')\"\n          :items=\"limitRateUnitOptions\"\n          :error-messages=\"errors\"\n        >\n          <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-select>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"type === 'BURST_SIZE'\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-select\n          v-model=\"limitBurstUnits\"\n          :placeholder=\"$vuntangle.$t('select_unit')\"\n          :items=\"limitBurstUnitOptions\"\n          :error-messages=\"errors\"\n        >\n          <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-select>\n      </ValidationProvider>\n    </v-col>\n  </v-row>\n</template>\n<script>\n  import { VRow, VCol, VListItem, VListItemAction, VListItemContent, VCheckbox, VRadioGroup, VRadio } from 'vuetify/lib'\n  import { ValidationProvider, extend } from 'vee-validate'\n\n  import cloneDeep from 'lodash/cloneDeep'\n  import UAutocomplete from '../../components/UAutocomplete'\n  import { isOperatorOptions, portProtocolOptions, limitRateUnitOptions, limitBurstUnitOptions } from '../../constants'\n  import { conditionDefs } from './data/conditionsDefinitions'\n  import { ruleDefs } from './data/rulesDefinitions'\n  import { addConditionHeaders } from './util/addConditionHeaders'\n\n  export default {\n    components: {\n      VRow,\n      VCol,\n      VListItem,\n      VListItemAction,\n      VListItemContent,\n      VCheckbox,\n      VRadioGroup,\n      VRadio,\n      ValidationProvider,\n      UAutocomplete,\n    },\n    props: {\n      condition: { type: Object, default: () => {} },\n      index: { type: Number, default: undefined },\n      excludedConditions: { type: Array, default: null },\n      allConditions: { type: Array, default: () => [] },\n      // the settings applied on the box\n      boxSettings: { type: Object, default: null },\n      features: { type: Object, default: null },\n    },\n    data() {\n      return {\n        conditionCopy: undefined,\n        portProtocolOptions,\n        isOperatorOptions,\n        limitRateUnitOptions,\n        limitBurstUnitOptions,\n      }\n    },\n    computed: {\n      ruleType: ({ $attrs }) => $attrs.ruleType,\n      remoteData: ({ $attrs }) => $attrs.remoteData,\n      remoteFetching: ({ $attrs }) => $attrs.remoteFetching,\n      isObsolete: ({ conditionCopy, $attrs }) =>\n        conditionCopy.type &&\n        !ruleDefs[$attrs.ruleType].conditions.includes(conditionCopy.type.replace(/_INFERRED/, '')),\n\n      conditionTypes() {\n        const extractedConditionTypes = this.allConditions.map(cond => cond.type?.replace(/_INFERRED/, ''))\n        let types = ruleDefs[this.ruleType].conditions\n\n        // filter out condition types above Layer 3 (for EOS)\n        if (\n          this.features.hasAboveLayer3Conditions === false &&\n          ['filter', 'port-forward', 'nat', 'shaping'].includes(this.ruleType)\n        ) {\n          types = types.filter(type => conditionDefs[type].layer3)\n        }\n\n        if (this.excludedConditions && Array.isArray(this.excludedConditions)) {\n          types = types.filter(el => !this.excludedConditions.includes(el))\n        }\n\n        // remove already selected conditions types\n        types = types.filter(el => !extractedConditionTypes.includes(el))\n        // include existing condition type if selected\n        let conditionType = ''\n        if (this.condition.type !== undefined && this.condition.type !== null) {\n          conditionType = this.condition.type.replace(/_INFERRED/, '') // removing inferred to match rule list\n        }\n\n        return addConditionHeaders(ruleDefs[this.ruleType].headers, types, conditionType)\n      },\n\n      conditionDef() {\n        const allCond = conditionDefs[this.conditionCopy.type?.replace(/_INFERRED/, '')] || {}\n        if (\n          this.features &&\n          this.features.hasManagementIntf === false &&\n          this.conditionCopy.type?.includes('INTERFACE_TYPE')\n        ) {\n          const mgmtIndex = allCond.selectItems.findIndex(i => i?.text === 'management')\n          if (mgmtIndex !== -1) {\n            delete allCond.selectItems[mgmtIndex]\n          }\n        }\n        return allCond\n      },\n\n      useInferred: ({ conditionCopy }) => conditionCopy.type?.startsWith('APPLICATION'),\n\n      valueValidationRules: ({ type, conditionDef }) => (type ? `required|${conditionDef.extraRules || ''}` : ''),\n\n      inferred: {\n        get: ({ conditionCopy }) => {\n          return conditionCopy.type?.includes('_INFERRED')\n        },\n        set(value) {\n          value\n            ? (this.conditionCopy.type = this.conditionCopy.type + '_INFERRED')\n            : (this.conditionCopy.type = this.conditionCopy.type?.replace(/_INFERRED/, ''))\n        },\n      },\n\n      limitRateUnits: {\n        get: ({ conditionCopy }) => {\n          return conditionCopy?.rate_unit\n        },\n        set(value) {\n          this.conditionCopy.rate_unit = value\n        },\n      },\n      limitBurstUnits: {\n        get: ({ conditionCopy }) => {\n          return conditionCopy?.burst_unit\n        },\n        set(value) {\n          this.conditionCopy.burst_unit = value\n        },\n      },\n      /**\n       * condition type computed based on it's name and inferred flag\n       * it also set's some condition defaults upon new value\n       */\n      type: {\n        get: ({ conditionCopy }) => {\n          return conditionCopy.type?.includes('_INFERRED')\n            ? conditionCopy.type.replace(/_INFERRED/, '')\n            : conditionCopy.type\n        },\n        set(type) {\n          // adds or removes the `_INFERRED` flag for applications based conditions\n          if (type?.startsWith('APPLICATION')) {\n            if (this.ruleType === 'wan-rules' || this.inferred) {\n              this.conditionCopy.type = type + '_INFERRED'\n            } else this.conditionCopy.type = type\n          } else this.conditionCopy.type = type\n          // reset the value to be blank\n          this.conditionCopy.value = null\n          // set condition defaults upon new type value\n          if (this.conditionDef.defaults) {\n            this.conditionCopy = { ...{ type: this.conditionCopy.type }, ...this.conditionDef.defaults }\n          } else {\n            this.conditionCopy = { type: this.conditionCopy.type, op: '==', value: '' }\n          }\n          // for SOURCE_PORT and DESTINATION_PORT it adds the extra `port_protocol` default\n          if (type === 'SOURCE_PORT' || type === 'DESTINATION_PORT') {\n            this.conditionCopy.port_protocol = []\n          }\n        },\n      },\n\n      /**\n       * computed condition value needed to treat a special case for IP_PROTOCOL condition\n       * settings.json accepts for IP_PROTOCOL a comma separated string with values\n       * the autocomplete field returns an array of string values\n       * so it has to do this get/set conversion for the condition value\n       */\n      value: {\n        get: ({ type, conditionCopy }) =>\n          conditionCopy.value && type === 'IP_PROTOCOL' ? (conditionCopy.value + '').split(',') : conditionCopy.value,\n        set(value) {\n          if (this.type === 'IP_PROTOCOL') this.conditionCopy.value = value.join() || null\n          else this.conditionCopy.value = value\n        },\n      },\n\n      /**\n       * returns items for autocomplete/select fields conditions\n       * retrieved from remote (host app)\n       */\n      remoteItems: ({ remoteData, type }) => {\n        switch (type) {\n          case 'APPLICATION_NAME':\n            return remoteData.apps ? remoteData.apps.map(app => app.name) : undefined\n          case 'APPLICATION_CATEGORY':\n            return remoteData.apps ? remoteData.apps.map(app => app.category) : undefined\n          case 'SOURCE_INTERFACE_ZONE':\n          case 'DESTINATION_INTERFACE_ZONE':\n          case 'CLIENT_INTERFACE_ZONE':\n          case 'SERVER_INTERFACE_ZONE':\n            return remoteData.zoneInterfaces ? remoteData.zoneInterfaces : undefined\n          default:\n            return undefined\n        }\n      },\n\n      /**\n       * sets the port protocol for DESTINATION or SOURCE port\n       * for some reason the port protocol value can be a plain number or an array of numbers\n       * so we have to switch between array or not depending of the single/multiple selection\n       */\n      portProtocols: {\n        get: ({ conditionCopy }) =>\n          !Array.isArray(conditionCopy?.port_protocol) ? [conditionCopy?.port_protocol] : conditionCopy?.port_protocol,\n        set(value) {\n          if (value.length === 1) this.conditionCopy.port_protocol = value[0]\n          else this.conditionCopy.port_protocol = value\n        },\n      },\n      // validation rules for the condition type field\n      conditionTypeRules: ({ boxSettings }) => (boxSettings ? 'required|validate_service' : 'required'),\n    },\n    watch: {\n      condition: {\n        handler(newCond, oldCond) {\n          if (newCond.type === 'BURST_SIZE') {\n            this.$emit('add-limit-rate')\n          }\n          // TODO better handling of set/update conditionCopy\n          if (JSON.stringify(newCond) === JSON.stringify(oldCond)) return\n          this.conditionCopy = cloneDeep(newCond)\n        },\n        immediate: true,\n      },\n\n      /**\n       * for some conditions data is retrieved from the host app\n       * so an event is triggered to fetch that data\n       */\n      'conditionCopy.type': {\n        handler(type) {\n          if (!type) return\n          if (\n            !this.$attrs.remoteData.apps &&\n            (type.startsWith('APPLICATION_NAME') ||\n              type.startsWith('APPLICATION_CATEGORY') ||\n              type.startsWith('APPLICATION_ID'))\n          ) {\n            this.$emit('get-remote-data', 'apps')\n          }\n          if (!this.$attrs.remoteData.zoneInterfaces && type.includes('_ZONE')) {\n            this.$emit('get-remote-data', 'zone-interfaces')\n          }\n        },\n        immediate: true,\n      },\n      conditionCopy: {\n        handler(cond) {\n          this.$emit('update:condition', cond)\n        },\n        deep: true,\n      },\n    },\n    created() {\n      extend('validate_service', this.validateService)\n    },\n    methods: {\n      validateService(value) {\n        // checks if the selected condition has the requied service enabled.\n        // e.g: for selecting condition: \"Application Category\", service: \"Application Control\" should be enabled\n        if (value.includes('APPLICATION') && !this.boxSettings.application_control.enabled) {\n          return this.$t('service_x_is_disabled', [this.$t('application_control')])\n        }\n        if (value === 'GEOIP' && !this.boxSettings.geoip.enabled) {\n          return this.$t('service_x_is_disabled', [this.$t('geoip')])\n        }\n        return true\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}