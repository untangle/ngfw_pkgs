{"ast":null,"code":"import _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\n/**\n * Use an ag-grid columns 'valueFormatter' in another function.  Used in filtering and export CSV.\n *\n * @param {Object} params\n *\n * @returns {any}\n */\nexport default (function (params) {\n  /**\n   * The params object may be different depending on what ag-grid method is calling it.  Try to use 'params.value'\n   * otherwise use 'params.getValue'\n   */\n  var value = params.value !== undefined || params.getValue === undefined ? params.value : params.getValue(params.column.colId);\n\n  // prevent CSV injections escaping following characters: +, -, =, @, 'tab'\n  if ((typeof value === 'string' || value instanceof String) && ['=', '+', '-', '@', ' '].includes(value.charAt(0))) {\n    value = \"'\" + value;\n  }\n\n  // check if this cell is in a column that uses a valueFormatter\n  var colDef = params.column.getColDef();\n  if (colDef.valueFormatter) {\n    var valueFormatterParams = _objectSpread(_objectSpread({}, params), {}, {\n      data: params.node.data,\n      node: params.node,\n      colDef: colDef,\n      value: value\n    });\n\n    // run the value formatter\n    return colDef.valueFormatter(valueFormatterParams);\n  }\n  return value;\n});","map":{"version":3,"names":["params","value","undefined","getValue","column","colId","String","includes","charAt","colDef","getColDef","valueFormatter","valueFormatterParams","_objectSpread","data","node"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/components/UGrid/features/useValueFormatter.js"],"sourcesContent":["/**\n * Use an ag-grid columns 'valueFormatter' in another function.  Used in filtering and export CSV.\n *\n * @param {Object} params\n *\n * @returns {any}\n */\nexport default params => {\n  /**\n   * The params object may be different depending on what ag-grid method is calling it.  Try to use 'params.value'\n   * otherwise use 'params.getValue'\n   */\n  let value =\n    params.value !== undefined || params.getValue === undefined ? params.value : params.getValue(params.column.colId)\n\n  // prevent CSV injections escaping following characters: +, -, =, @, 'tab'\n  if ((typeof value === 'string' || value instanceof String) && ['=', '+', '-', '@', ' '].includes(value.charAt(0))) {\n    value = \"'\" + value\n  }\n\n  // check if this cell is in a column that uses a valueFormatter\n  const colDef = params.column.getColDef()\n  if (colDef.valueFormatter) {\n    const valueFormatterParams = {\n      ...params,\n      data: params.node.data,\n      node: params.node,\n      colDef,\n      value,\n    }\n\n    // run the value formatter\n    return colDef.valueFormatter(valueFormatterParams)\n  }\n\n  return value\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,UAAAA,MAAM,EAAI;EACvB;AACF;AACA;AACA;EACE,IAAIC,KAAK,GACPD,MAAM,CAACC,KAAK,KAAKC,SAAS,IAAIF,MAAM,CAACG,QAAQ,KAAKD,SAAS,GAAGF,MAAM,CAACC,KAAK,GAAGD,MAAM,CAACG,QAAQ,CAACH,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC;;EAEnH;EACA,IAAI,CAAC,OAAOJ,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYK,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IACjHP,KAAK,GAAG,GAAG,GAAGA,KAAK;EACrB;;EAEA;EACA,IAAMQ,MAAM,GAAGT,MAAM,CAACI,MAAM,CAACM,SAAS,CAAC,CAAC;EACxC,IAAID,MAAM,CAACE,cAAc,EAAE;IACzB,IAAMC,oBAAoB,GAAAC,aAAA,CAAAA,aAAA,KACrBb,MAAM;MACTc,IAAI,EAAEd,MAAM,CAACe,IAAI,CAACD,IAAI;MACtBC,IAAI,EAAEf,MAAM,CAACe,IAAI;MACjBN,MAAM,EAANA,MAAM;MACNR,KAAK,EAALA;IAAK,EACN;;IAED;IACA,OAAOQ,MAAM,CAACE,cAAc,CAACC,oBAAoB,CAAC;EACpD;EAEA,OAAOX,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}