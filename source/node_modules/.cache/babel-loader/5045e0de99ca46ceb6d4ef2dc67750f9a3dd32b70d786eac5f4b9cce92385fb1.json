{"ast":null,"code":"import \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { VRow, VCol } from 'vuetify/lib';\nimport { ValidationProvider } from 'vee-validate';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { criteriaTypes, metricOperatorOptions } from './data/options';\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    criteria: {\n      type: Object,\n      \"default\": function _default() {}\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      criteriaCopy: null,\n      criteriaTypes: criteriaTypes,\n      metricOperatorOptions: metricOperatorOptions,\n      failureThresholdOptions: Array.from({\n        length: 10\n      }, function (_, i) {\n        return i + 1;\n      }).map(function (i) {\n        return {\n          text: _this.$tc('failures', i, [i]),\n          value: i\n        };\n      })\n    };\n  },\n  computed: {\n    /**\n     * placed in computed so header items can also be translated\n     */\n    criteriaTypeOptions: function criteriaTypeOptions() {\n      return [{\n        text: this.$vuntangle.$t('always_up'),\n        value: 'ALWAYS_UP'\n      }, {\n        divider: true\n      }, {\n        header: this.$vuntangle.$t('attribute')\n      }, {\n        text: this.$vuntangle.$t('is_vpn'),\n        value: 'VPN'\n      }, {\n        text: this.$vuntangle.$t('name_contains'),\n        value: 'NAME'\n      }, {\n        divider: true\n      }, {\n        header: this.$vuntangle.$t('metric')\n      }, {\n        text: this.$vuntangle.$t('latency'),\n        value: 'LATENCY'\n      }, {\n        text: this.$vuntangle.$t('available_bandwidth'),\n        value: 'AVAILABLE_BANDWIDTH'\n      }, {\n        text: this.$vuntangle.$t('jitter'),\n        value: 'JITTER'\n      }, {\n        text: this.$vuntangle.$t('packet_loss'),\n        value: 'PACKET_LOSS'\n      }, {\n        divider: true\n      }, {\n        header: this.$vuntangle.$t('connectivity_test')\n      }, {\n        text: 'PING',\n        value: 'PING'\n      }, {\n        text: 'ARP',\n        value: 'ARP'\n      }, {\n        text: 'DNS',\n        value: 'DNS'\n      }, {\n        text: 'HTTP',\n        value: 'HTTP'\n      }];\n    },\n    criteriaType: {\n      get: function get(_ref) {\n        var criteriaCopy = _ref.criteriaCopy;\n        if (criteriaCopy.type === 'ALWAYS_UP') return criteriaCopy.type;\n        if (criteriaCopy.type === 'ATTRIBUTE') return criteriaCopy.attribute;\n        if (criteriaCopy.type === 'METRIC') return criteriaCopy.metric;\n        if (criteriaCopy.type === 'CONNECTIVITY') return criteriaCopy.connectivityTestType;\n      },\n      set: function set(value) {\n        switch (value) {\n          case 'ALWAYS_UP':\n            this.criteriaCopy = {\n              type: 'ALWAYS_UP'\n            };\n            break;\n          case 'VPN':\n          case 'NAME':\n            this.criteriaCopy = {\n              type: 'ATTRIBUTE',\n              attribute: value\n            };\n            break;\n          case 'LATENCY':\n          case 'AVAILABLE_BANDWIDTH':\n          case 'JITTER':\n          case 'PACKET_LOSS':\n            this.criteriaCopy = {\n              type: 'METRIC',\n              metric_op: '<=',\n              metric: value\n            };\n            break;\n          case 'PING':\n          case 'ARP':\n          case 'DNS':\n          case 'HTTP':\n            if (this.criteriaCopy.type !== 'CONNECTIVITY') {\n              this.criteriaCopy = {\n                type: 'CONNECTIVITY',\n                connectivityTestType: value\n              };\n            } else {\n              this.criteriaCopy.connectivityTestType = value;\n            }\n        }\n      }\n    },\n    metricValueSuffix: function metricValueSuffix(_ref2) {\n      var criteriaCopy = _ref2.criteriaCopy;\n      switch (criteriaCopy.metric) {\n        case 'JITTER':\n        case 'LATENCY':\n          return 'milliseconds';\n        case 'AVAILABLE_BANDWIDTH':\n          return 'percent';\n        case 'PACKET_LOSS':\n          return 'percent';\n      }\n    },\n    metricValueRules: function metricValueRules(_ref3) {\n      var criteriaCopy = _ref3.criteriaCopy;\n      switch (criteriaCopy.metric) {\n        case 'JITTER':\n        case 'LATENCY':\n          return 'required|integer|min_value:1';\n        case 'AVAILABLE_BANDWIDTH':\n          return 'required|integer|min_value:1|max_value:100';\n        case 'PACKET_LOSS':\n          return 'required|integer|min_value:1|max_value:100';\n      }\n    }\n  },\n  watch: {\n    criteria: {\n      handler: function handler(newCriteria, oldCriteria) {\n        if (JSON.stringify(newCriteria) === JSON.stringify(oldCriteria)) return;\n        this.criteriaCopy = cloneDeep(newCriteria);\n      },\n      immediate: true\n    },\n    criteriaCopy: {\n      handler: function handler(criteria) {\n        this.$emit('update:criteria', criteria);\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","ValidationProvider","cloneDeep","criteriaTypes","metricOperatorOptions","components","props","criteria","type","Object","default","data","_this","criteriaCopy","failureThresholdOptions","Array","from","length","_","i","map","text","$tc","value","computed","criteriaTypeOptions","$vuntangle","$t","divider","header","criteriaType","get","_ref","attribute","metric","connectivityTestType","set","metric_op","metricValueSuffix","_ref2","metricValueRules","_ref3","watch","handler","newCriteria","oldCriteria","JSON","stringify","immediate","$emit","deep"],"sources":["node_modules/vuntangle/src/shared/WanPolicies/WanCriteria.vue"],"sourcesContent":["<template>\n  <v-row dense>\n    <v-col cols=\"3\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-select\n          v-model=\"criteriaType\"\n          :items=\"criteriaTypeOptions\"\n          :label=\"$vuntangle.$t(criteriaTypes[criteriaCopy.type] || 'policy_select_criteria_type')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-select>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.attribute === 'NAME'\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-text-field\n          v-model=\"criteriaCopy.name_contains\"\n          :error-messages=\"errors\"\n          :label=\"$vuntangle.$t('enter_value')\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-text-field>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.type === 'METRIC'\" cols=\"2\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-select v-model=\"criteriaCopy.metric_op\" :items=\"metricOperatorOptions\" :error-messages=\"errors\">\n          <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-select>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.type === 'METRIC'\">\n      <ValidationProvider v-slot=\"{ errors }\" :rules=\"metricValueRules\">\n        <u-text-field\n          v-model=\"criteriaCopy.metric_value\"\n          :suffix=\"$vuntangle.$t(metricValueSuffix).toLowerCase()\"\n          :label=\"$vuntangle.$t('enter_value')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-text-field>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.type === 'CONNECTIVITY'\" cols=\"6\" md=\"3\" lg=\"2\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required|integer|min_value:1\">\n        <u-text-field\n          v-model=\"criteriaCopy.connectivityTestInterval\"\n          :suffix=\"$vuntangle.$t('seconds').toLowerCase()\"\n          :label=\"$vuntangle.$t('interval')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-text-field>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.type === 'CONNECTIVITY'\" cols=\"6\" md=\"3\" lg=\"2\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required|integer|min_value:1\">\n        <u-text-field\n          v-model=\"criteriaCopy.connectivityTestTimeout\"\n          :suffix=\"$vuntangle.$t('seconds').toLowerCase()\"\n          :label=\"$vuntangle.$t('timeout_seconds')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-text-field>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.type === 'CONNECTIVITY'\" cols=\"2\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n        <u-select\n          v-model=\"criteriaCopy.connectivityTestFailureThreshold\"\n          :items=\"failureThresholdOptions\"\n          :label=\"$vuntangle.$t('failure_threshold')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-select>\n      </ValidationProvider>\n    </v-col>\n    <v-col v-if=\"criteriaCopy.type === 'CONNECTIVITY'\">\n      <ValidationProvider v-slot=\"{ errors }\" rules=\"required|ip\">\n        <u-text-field\n          v-model=\"criteriaCopy.connectivityTestTarget\"\n          :label=\"$vuntangle.$t('target')\"\n          :placeholder=\"$vuntangle.$t('host_address_to_test')\"\n          :error-messages=\"errors\"\n        >\n          <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n        </u-text-field>\n      </ValidationProvider>\n    </v-col>\n  </v-row>\n</template>\n<script>\n  import { VRow, VCol } from 'vuetify/lib'\n  import { ValidationProvider } from 'vee-validate'\n  import cloneDeep from 'lodash/cloneDeep'\n  import { criteriaTypes, metricOperatorOptions } from './data/options'\n\n  export default {\n    components: { VRow, VCol, ValidationProvider },\n    props: {\n      criteria: { type: Object, default: () => {} },\n    },\n    data() {\n      return {\n        criteriaCopy: null,\n        criteriaTypes,\n        metricOperatorOptions,\n        failureThresholdOptions: Array.from({ length: 10 }, (_, i) => i + 1).map(i => ({\n          text: this.$tc('failures', i, [i]),\n          value: i,\n        })),\n      }\n    },\n    computed: {\n      /**\n       * placed in computed so header items can also be translated\n       */\n      criteriaTypeOptions() {\n        return [\n          { text: this.$vuntangle.$t('always_up'), value: 'ALWAYS_UP' },\n          { divider: true },\n          { header: this.$vuntangle.$t('attribute') },\n          { text: this.$vuntangle.$t('is_vpn'), value: 'VPN' },\n          { text: this.$vuntangle.$t('name_contains'), value: 'NAME' },\n          { divider: true },\n          { header: this.$vuntangle.$t('metric') },\n          { text: this.$vuntangle.$t('latency'), value: 'LATENCY' },\n          { text: this.$vuntangle.$t('available_bandwidth'), value: 'AVAILABLE_BANDWIDTH' },\n          { text: this.$vuntangle.$t('jitter'), value: 'JITTER' },\n          { text: this.$vuntangle.$t('packet_loss'), value: 'PACKET_LOSS' },\n          { divider: true },\n          { header: this.$vuntangle.$t('connectivity_test') },\n          { text: 'PING', value: 'PING' },\n          { text: 'ARP', value: 'ARP' },\n          { text: 'DNS', value: 'DNS' },\n          { text: 'HTTP', value: 'HTTP' },\n        ]\n      },\n\n      criteriaType: {\n        get: ({ criteriaCopy }) => {\n          if (criteriaCopy.type === 'ALWAYS_UP') return criteriaCopy.type\n          if (criteriaCopy.type === 'ATTRIBUTE') return criteriaCopy.attribute\n          if (criteriaCopy.type === 'METRIC') return criteriaCopy.metric\n          if (criteriaCopy.type === 'CONNECTIVITY') return criteriaCopy.connectivityTestType\n        },\n        set(value) {\n          switch (value) {\n            case 'ALWAYS_UP':\n              this.criteriaCopy = {\n                type: 'ALWAYS_UP',\n              }\n              break\n            case 'VPN':\n            case 'NAME':\n              this.criteriaCopy = {\n                type: 'ATTRIBUTE',\n                attribute: value,\n              }\n              break\n            case 'LATENCY':\n            case 'AVAILABLE_BANDWIDTH':\n            case 'JITTER':\n            case 'PACKET_LOSS':\n              this.criteriaCopy = {\n                type: 'METRIC',\n                metric_op: '<=',\n                metric: value,\n              }\n              break\n            case 'PING':\n            case 'ARP':\n            case 'DNS':\n            case 'HTTP':\n              if (this.criteriaCopy.type !== 'CONNECTIVITY') {\n                this.criteriaCopy = {\n                  type: 'CONNECTIVITY',\n                  connectivityTestType: value,\n                }\n              } else {\n                this.criteriaCopy.connectivityTestType = value\n              }\n          }\n        },\n      },\n\n      metricValueSuffix: ({ criteriaCopy }) => {\n        switch (criteriaCopy.metric) {\n          case 'JITTER':\n          case 'LATENCY':\n            return 'milliseconds'\n          case 'AVAILABLE_BANDWIDTH':\n            return 'percent'\n          case 'PACKET_LOSS':\n            return 'percent'\n        }\n      },\n\n      metricValueRules: ({ criteriaCopy }) => {\n        switch (criteriaCopy.metric) {\n          case 'JITTER':\n          case 'LATENCY':\n            return 'required|integer|min_value:1'\n          case 'AVAILABLE_BANDWIDTH':\n            return 'required|integer|min_value:1|max_value:100'\n          case 'PACKET_LOSS':\n            return 'required|integer|min_value:1|max_value:100'\n        }\n      },\n    },\n    watch: {\n      criteria: {\n        handler(newCriteria, oldCriteria) {\n          if (JSON.stringify(newCriteria) === JSON.stringify(oldCriteria)) return\n          this.criteriaCopy = cloneDeep(newCriteria)\n        },\n        immediate: true,\n      },\n      criteriaCopy: {\n        handler(criteria) {\n          this.$emit('update:criteria', criteria)\n        },\n        deep: true,\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}