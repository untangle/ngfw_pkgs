{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport cloneDeep from 'lodash/cloneDeep';\nimport settingsMixin from '../settingsMixin';\nimport Common from './components/Common.vue';\nimport defaults from './defaults';\nexport default {\n  components: {\n    Common: Common\n  },\n  mixins: [settingsMixin],\n  /**\n   * use provide with the reactive data settings\n   * that gets injected into all descendent components\n   */\n  provide: function provide() {\n    var _this = this;\n    return {\n      $isSaving: function $isSaving() {\n        return _this.isSaving;\n      },\n      $intf: function $intf() {\n        return _this.settingsCopy;\n      },\n      $features: function $features() {\n        return _this.features;\n      },\n      $interfaces: function $interfaces() {\n        return _this.interfaces;\n      },\n      $status: function $status() {\n        return _this.status;\n      },\n      $disabled: function $disabled() {\n        return _this.disabled;\n      },\n      $pingAnalyzers: function $pingAnalyzers() {\n        return _this.pingAnalyzers;\n      },\n      $interfaceTrackers: function $interfaceTrackers() {\n        return _this.interfaceTrackers;\n      },\n      $onManageStatusAnalyzers: function $onManageStatusAnalyzers() {\n        return _this.$emit('manage-status-analyzers');\n      },\n      $onDelete: function $onDelete() {\n        return _this.$emit('delete');\n      },\n      $onRenewDhcp: function $onRenewDhcp(device, cb) {\n        return _this.$emit('renew-dhcp', device, function () {\n          return cb();\n        });\n      },\n      $onGetAllInterfaceStatus: function $onGetAllInterfaceStatus(cb) {\n        return _this.$emit('get-all-interface-status', function (res) {\n          return cb(res);\n        });\n      },\n      $onGetStatusHardware: function $onGetStatusHardware(cb) {\n        return _this.$emit('get-status-hardware', function (res) {\n          return cb(res);\n        });\n      },\n      $onGetStatusWanTest: function $onGetStatusWanTest(l3device, cb) {\n        return _this.$emit('get-status-wan-test', l3device, function (res) {\n          return cb(res);\n        });\n      }\n    };\n  },\n  props: {\n    interfaces: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    type: {\n      type: String,\n      \"default\": function _default() {\n        return null;\n      }\n    },\n    status: {\n      type: Object,\n      \"default\": function _default() {\n        return null;\n      }\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": function _default() {\n        return false;\n      }\n    },\n    pingAnalyzers: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    interfaceTrackers: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    isSaving: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  computed: {\n    title: function title() {\n      // when editing existing intf use original settings for title\n      if (this.settings) {\n        return this.$t('edit_interface', [\"\".concat(this.settings.name, \" (\").concat(this.settings.device, \")\")]);\n      }\n      // when adding a new intf use cloned intf type for the title\n      switch (this.settingsCopy.type) {\n        case 'VLAN':\n          return this.$t('add_x_interface', [this.$t('vlan')]);\n        case 'WIREGUARD':\n          return this.$t('add_x_interface', [this.$t('wireguard')]);\n        case 'OPENVPN':\n          return this.$t('add_x_interface', [this.$t('open_vpn')]);\n        case 'IPSEC':\n          return this.$t('add_x_interface', [this.$t('ipsec_tunnel')]);\n        case 'BRIDGE':\n          return this.$t('add_x_interface', [this.$t('bridge')]);\n      }\n      return '';\n    }\n  },\n  created: function created() {\n    // cloning the defaults so they do not get mutated\n    if (this.type && defaults[this.type]) this.settingsCopy = cloneDeep(defaults[this.type]);\n  },\n  methods: {\n    validate: function validate() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var isValid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this2.$refs.common.validate();\n            case 2:\n              isValid = _context.sent;\n              return _context.abrupt(\"return\", isValid);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["cloneDeep","settingsMixin","Common","defaults","components","mixins","provide","_this","$isSaving","isSaving","$intf","settingsCopy","$features","features","$interfaces","interfaces","$status","status","$disabled","disabled","$pingAnalyzers","pingAnalyzers","$interfaceTrackers","interfaceTrackers","$onManageStatusAnalyzers","$emit","$onDelete","$onRenewDhcp","device","cb","$onGetAllInterfaceStatus","res","$onGetStatusHardware","$onGetStatusWanTest","l3device","props","type","Array","default","String","Object","Boolean","computed","title","settings","$t","concat","name","created","methods","validate","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isValid","wrap","_callee$","_context","prev","next","$refs","common","sent","abrupt","stop"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/Main.vue"],"sourcesContent":["<template>\n  <v-container\n    :fluid=\"classicView ? true : false\"\n    :class=\"`${classicView ? 'pa-4 ' : ''}shared-cmp d-flex flex-column flex-grow-1`\"\n  >\n    <slot name=\"no-license\"></slot>\n    <slot name=\"bridged-interface\"></slot>\n    <div class=\"d-flex align-center\">\n      <h1 v-if=\"classicView\" class=\"headline\" v-html=\"title\" />\n      <h2 v-else class=\"font-weight-light\" v-html=\"title\" />\n      <v-spacer />\n      <slot name=\"actions\" :new-settings=\"settingsCopy\" :is-dirty=\"isDirty\" :validate=\"validate\"></slot>\n    </div>\n\n    <v-divider class=\"my-2\" />\n\n    <common ref=\"common\" v-on=\"$listeners\" />\n  </v-container>\n</template>\n<script>\n  import cloneDeep from 'lodash/cloneDeep'\n  import settingsMixin from '../settingsMixin'\n  import Common from './components/Common.vue'\n  import defaults from './defaults'\n\n  export default {\n    components: {\n      Common,\n    },\n    mixins: [settingsMixin],\n    /**\n     * use provide with the reactive data settings\n     * that gets injected into all descendent components\n     */\n    provide() {\n      return {\n        $isSaving: () => this.isSaving,\n        $intf: () => this.settingsCopy,\n        $features: () => this.features,\n        $interfaces: () => this.interfaces,\n        $status: () => this.status,\n        $disabled: () => this.disabled,\n        $pingAnalyzers: () => this.pingAnalyzers,\n        $interfaceTrackers: () => this.interfaceTrackers,\n        $onManageStatusAnalyzers: () => this.$emit('manage-status-analyzers'),\n        $onDelete: () => this.$emit('delete'),\n        $onRenewDhcp: (device, cb) => this.$emit('renew-dhcp', device, () => cb()),\n        $onGetAllInterfaceStatus: cb => this.$emit('get-all-interface-status', res => cb(res)),\n        $onGetStatusHardware: cb => this.$emit('get-status-hardware', res => cb(res)),\n        $onGetStatusWanTest: (l3device, cb) => this.$emit('get-status-wan-test', l3device, res => cb(res)),\n      }\n    },\n    props: {\n      interfaces: { type: Array, default: () => [] },\n      type: { type: String, default: () => null },\n      status: { type: Object, default: () => null },\n      disabled: { type: Boolean, default: () => false },\n      pingAnalyzers: { type: Array, default: () => [] },\n      interfaceTrackers: { type: Array, default: () => [] },\n      isSaving: { type: Boolean, default: false },\n    },\n    computed: {\n      title() {\n        // when editing existing intf use original settings for title\n        if (this.settings) {\n          return this.$t('edit_interface', [`${this.settings.name} (${this.settings.device})`])\n        }\n        // when adding a new intf use cloned intf type for the title\n        switch (this.settingsCopy.type) {\n          case 'VLAN':\n            return this.$t('add_x_interface', [this.$t('vlan')])\n          case 'WIREGUARD':\n            return this.$t('add_x_interface', [this.$t('wireguard')])\n          case 'OPENVPN':\n            return this.$t('add_x_interface', [this.$t('open_vpn')])\n          case 'IPSEC':\n            return this.$t('add_x_interface', [this.$t('ipsec_tunnel')])\n          case 'BRIDGE':\n            return this.$t('add_x_interface', [this.$t('bridge')])\n        }\n        return ''\n      },\n    },\n    created() {\n      // cloning the defaults so they do not get mutated\n      if (this.type && defaults[this.type]) this.settingsCopy = cloneDeep(defaults[this.type])\n    },\n\n    methods: {\n      async validate() {\n        const isValid = await this.$refs.common.validate()\n        return isValid\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}