{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nimport props from '../UGrid/props';\nimport UGrid from '../UGrid';\nexport default {\n  modules: [InfiniteRowModelModule],\n  components: {\n    UGrid: UGrid\n  },\n  props: _objectSpread(_objectSpread({}, props), {}, {\n    // function used to populate the grid\n    getData: {\n      type: Function,\n      required: true\n    }\n  }),\n  data: function data() {\n    var _this = this;\n    return {\n      gridApi: null,\n      // global grid options\n      remoteGridOptions: _objectSpread({\n        pagination: true,\n        rowModelType: 'infinite',\n        infiniteInitialRowCount: 0,\n        cacheBlockSize: 1000,\n        paginationPageSize: 1000\n      }, this.customGridOptions),\n      datasource: {\n        getRows: function () {\n          var _getRows = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n            var _yield$_this$getData, rowData, rowCount;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this.getData(params);\n                case 2:\n                  _yield$_this$getData = _context.sent;\n                  rowData = _yield$_this$getData.rowData;\n                  rowCount = _yield$_this$getData.rowCount;\n                  params.successCallback(rowData, rowCount);\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          function getRows(_x) {\n            return _getRows.apply(this, arguments);\n          }\n          return getRows;\n        }()\n      }\n    };\n  },\n  computed: {\n    // remote selection, wraps prop to prevent direct mutation\n    rSelection: {\n      get: function get() {\n        return this.selection;\n      },\n      set: function set(newSelection) {\n        this.$emit('update:selection', newSelection);\n      }\n    }\n  },\n  methods: {\n    gridApiReady: function gridApiReady(api) {\n      this.gridApi = api;\n      this.gridApi.setDatasource(this.datasource);\n    },\n    onRefresh: function onRefresh() {\n      if (!this.enableRefresh) return;\n      this.$emit('refresh');\n      this.gridApi.purgeInfiniteCache();\n    }\n  }\n};","map":{"version":3,"names":["InfiniteRowModelModule","props","UGrid","modules","components","_objectSpread","getData","type","Function","required","data","_this","gridApi","remoteGridOptions","pagination","rowModelType","infiniteInitialRowCount","cacheBlockSize","paginationPageSize","customGridOptions","datasource","getRows","_getRows","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","_yield$_this$getData","rowData","rowCount","wrap","_callee$","_context","prev","next","sent","successCallback","stop","_x","apply","arguments","computed","rSelection","get","selection","set","newSelection","$emit","methods","gridApiReady","api","setDatasource","onRefresh","enableRefresh","purgeInfiniteCache"],"sources":["node_modules/vuntangle/src/components/URemoteGrid/URemoteGrid.vue"],"sourcesContent":["<template>\n  <u-grid\n    :id=\"id\"\n    :custom-grid-options=\"remoteGridOptions\"\n    :column-defs=\"columnDefs\"\n    :enable-export-csv=\"false\"\n    :row-node-id=\"rowNodeId\"\n    :framework-components=\"frameworkComponents\"\n    :selection-type=\"selectionType\"\n    :selection.sync=\"rSelection\"\n    :resize-columns=\"resizeColumns\"\n    :toolbar=\"toolbar\"\n    :enable-refresh=\"enableRefresh\"\n    :enable-quick-filter=\"false\"\n    :row-data=\"null\"\n    :modules=\"$options.modules\"\n    @gridApiReady=\"gridApiReady\"\n    @refresh=\"onRefresh\"\n  >\n  </u-grid>\n</template>\n<script>\n  import { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model'\n  import props from '../UGrid/props'\n  import UGrid from '../UGrid'\n\n  export default {\n    modules: [InfiniteRowModelModule],\n    components: {\n      UGrid,\n    },\n\n    props: {\n      ...props,\n      // function used to populate the grid\n      getData: {\n        type: Function,\n        required: true,\n      },\n    },\n\n    data() {\n      return {\n        gridApi: null,\n        // global grid options\n        remoteGridOptions: {\n          pagination: true,\n          rowModelType: 'infinite',\n          infiniteInitialRowCount: 0,\n          cacheBlockSize: 1000,\n          paginationPageSize: 1000,\n          ...this.customGridOptions,\n        },\n\n        datasource: {\n          getRows: async params => {\n            const { rowData, rowCount } = await this.getData(params)\n            params.successCallback(rowData, rowCount)\n          },\n        },\n      }\n    },\n\n    computed: {\n      // remote selection, wraps prop to prevent direct mutation\n      rSelection: {\n        get() {\n          return this.selection\n        },\n        set(newSelection) {\n          this.$emit('update:selection', newSelection)\n        },\n      },\n    },\n\n    methods: {\n      gridApiReady(api) {\n        this.gridApi = api\n        this.gridApi.setDatasource(this.datasource)\n      },\n      onRefresh() {\n        if (!this.enableRefresh) return\n        this.$emit('refresh')\n        this.gridApi.purgeInfiniteCache()\n      },\n    },\n  }\n</script>\n"],"mappings":";;;AAsBA,SAAAA,sBAAA;AACA,OAAAC,KAAA;AACA,OAAAC,KAAA;AAEA;EACAC,OAAA,GAAAH,sBAAA;EACAI,UAAA;IACAF,KAAA,EAAAA;EACA;EAEAD,KAAA,EAAAI,aAAA,CAAAA,aAAA,KACAJ,KAAA;IACA;IACAK,OAAA;MACAC,IAAA,EAAAC,QAAA;MACAC,QAAA;IACA;EAAA,EACA;EAEAC,IAAA,WAAAA,KAAA;IAAA,IAAAC,KAAA;IACA;MACAC,OAAA;MACA;MACAC,iBAAA,EAAAR,aAAA;QACAS,UAAA;QACAC,YAAA;QACAC,uBAAA;QACAC,cAAA;QACAC,kBAAA;MAAA,GACA,KAAAC,iBAAA,CACA;MAEAC,UAAA;QACAC,OAAA;UAAA,IAAAC,QAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAAC,MAAA;YAAA,IAAAC,oBAAA,EAAAC,OAAA,EAAAC,QAAA;YAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;cAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;gBAAA;kBAAAF,QAAA,CAAAE,IAAA;kBAAA,OACAxB,KAAA,CAAAL,OAAA,CAAAqB,MAAA;gBAAA;kBAAAC,oBAAA,GAAAK,QAAA,CAAAG,IAAA;kBAAAP,OAAA,GAAAD,oBAAA,CAAAC,OAAA;kBAAAC,QAAA,GAAAF,oBAAA,CAAAE,QAAA;kBACAH,MAAA,CAAAU,eAAA,CAAAR,OAAA,EAAAC,QAAA;gBAAA;gBAAA;kBAAA,OAAAG,QAAA,CAAAK,IAAA;cAAA;YAAA,GAAAZ,OAAA;UAAA,CACA;UAAA,SAHAL,QAAAkB,EAAA;YAAA,OAAAjB,QAAA,CAAAkB,KAAA,OAAAC,SAAA;UAAA;UAAA,OAAApB,OAAA;QAAA;MAIA;IACA;EACA;EAEAqB,QAAA;IACA;IACAC,UAAA;MACAC,GAAA,WAAAA,IAAA;QACA,YAAAC,SAAA;MACA;MACAC,GAAA,WAAAA,IAAAC,YAAA;QACA,KAAAC,KAAA,qBAAAD,YAAA;MACA;IACA;EACA;EAEAE,OAAA;IACAC,YAAA,WAAAA,aAAAC,GAAA;MACA,KAAAvC,OAAA,GAAAuC,GAAA;MACA,KAAAvC,OAAA,CAAAwC,aAAA,MAAAhC,UAAA;IACA;IACAiC,SAAA,WAAAA,UAAA;MACA,UAAAC,aAAA;MACA,KAAAN,KAAA;MACA,KAAApC,OAAA,CAAA2C,kBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}