{"ast":null,"code":"import { VRow, VCol, VCheckbox } from 'vuetify/lib';\nimport Ipv4PrefixAutocomplete from '../../../../components/Ipv4PrefixAutocomplete';\nimport DhcpOptions from './DhcpOptions.vue';\nexport default {\n  components: {\n    VCheckbox: VCheckbox,\n    VRow: VRow,\n    VCol: VCol,\n    DhcpOptions: DhcpOptions,\n    Ipv4PrefixAutocomplete: Ipv4PrefixAutocomplete\n  },\n  inject: ['$intf', '$status'],\n  computed: {\n    intf: function intf(_ref) {\n      var $intf = _ref.$intf;\n      return $intf();\n    },\n    status: function status(_ref2) {\n      var $status = _ref2.$status;\n      return $status();\n    },\n    dhcpType: {\n      get: function get() {\n        if (this.intf.dhcpEnabled) return 'dhcpEnabled';\n        if (this.intf.dhcpRelayEnabled) return 'dhcpRelayEnabled';\n        return null;\n      },\n      set: function set(val) {\n        if (val === 'dhcpEnabled') {\n          this.intf.dhcpEnabled = true;\n          this.intf.dhcpRelayEnabled = false;\n        }\n        if (val === 'dhcpRelayEnabled') {\n          this.intf.dhcpEnabled = false;\n          this.intf.dhcpRelayEnabled = true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","VCheckbox","Ipv4PrefixAutocomplete","DhcpOptions","components","inject","computed","intf","_ref","$intf","status","_ref2","$status","dhcpType","get","dhcpEnabled","dhcpRelayEnabled","set","val"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/dhcp/Dhcp.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- DHCP Serving  -->\n    <v-row>\n      <v-col class=\"d-flex\" style=\"gap: 24px\">\n        <v-checkbox\n          v-model=\"intf.dhcpEnabled\"\n          :label=\"$t('enable_dhcp_serving')\"\n          hide-details\n          class=\"my-0\"\n          @change=\"intf.dhcpEnabled ? (intf.dhcpRelayEnabled = false) : null\"\n        />\n        <v-checkbox\n          v-model=\"intf.dhcpRelayEnabled\"\n          :label=\"$t('enable_dhcp_relaying')\"\n          hide-details\n          class=\"my-0\"\n          @change=\"intf.dhcpRelayEnabled ? (intf.dhcpEnabled = false) : null\"\n        />\n      </v-col>\n    </v-row>\n\n    <template v-if=\"!intf.dhcpRelayEnabled\">\n      <v-row>\n        <v-col>\n          <!-- dhcpRangeStart -->\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"{\n              required: intf.dhcpEnabled === true,\n              ip: true,\n              host_in_range: intf.dhcpEnabled ? { ip: intf.v4StaticAddress, cidr: intf.v4StaticPrefix } : false,\n            }\"\n          >\n            <u-text-field\n              v-model=\"intf.dhcpRangeStart\"\n              :label=\"$t('range_start')\"\n              :disabled=\"!intf.dhcpEnabled\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col>\n          <!-- dhcpRangeEnd -->\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"{\n              required: intf.dhcpEnabled === true,\n              ip: true,\n              host_in_range: intf.dhcpEnabled ? { ip: intf.v4StaticAddress, cidr: intf.v4StaticPrefix } : false,\n            }\"\n          >\n            <u-text-field\n              v-model=\"intf.dhcpRangeEnd\"\n              :label=\"$t('range_end')\"\n              :disabled=\"!intf.dhcpEnabled\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col>\n          <!-- dhcpLeaseDuration (min 120s, max 30 days)-->\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"min_value:120|max_value:2592000\">\n            <u-text-field\n              v-model.number=\"intf.dhcpLeaseDuration\"\n              :label=\"$t('lease_duration')\"\n              :disabled=\"!intf.dhcpEnabled\"\n              :error-messages=\"errors\"\n              suffix=\"sec\"\n              min=\"120\"\n              max=\"2592000\"\n              type=\"number\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <v-row>\n        <v-col>\n          <!-- dhcpGatewayOverride -->\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"ip\">\n            <u-text-field\n              v-model=\"intf.dhcpGatewayOverride\"\n              :label=\"$t('gateway_override')\"\n              :disabled=\"!intf.dhcpEnabled\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col>\n          <!-- dhcpPrefixOverride -->\n          <ipv-4-prefix-autocomplete\n            v-model=\"intf.dhcpPrefixOverride\"\n            :disabled=\"!intf.dhcpEnabled\"\n            :label-tkey=\"$t('netmask_override')\"\n            :min=\"1\"\n            :required=\"false\"\n            :default-value=\"''\"\n          />\n        </v-col>\n      </v-row>\n\n      <v-row>\n        <v-col>\n          <!-- dhcpDNSOverride -->\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"ip\">\n            <u-text-field v-model=\"intf.dhcpDNSOverride\" :label=\"$t('dns_override')\" :disabled=\"!intf.dhcpEnabled\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <dhcp-options v-if=\"intf.dhcpEnabled\" :options.sync=\"intf.dhcpOptions\" />\n    </template>\n\n    <!-- DHCP Relaying -->\n    <template v-if=\"intf.dhcpRelayEnabled\">\n      <v-row>\n        <v-col>\n          <!-- dhcpRelayAddress -->\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"{\n              required: intf.dhcpRelayEnabled === true,\n              ip: true,\n            }\"\n          >\n            <u-text-field\n              v-model=\"intf.dhcpRelayAddress\"\n              :label=\"$t('dhcp_relay_address')\"\n              :disabled=\"!intf.dhcpRelayEnabled\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </template>\n  </div>\n</template>\n<script>\n  import { VRow, VCol, VCheckbox } from 'vuetify/lib'\n  import Ipv4PrefixAutocomplete from '../../../../components/Ipv4PrefixAutocomplete'\n  import DhcpOptions from './DhcpOptions.vue'\n\n  export default {\n    components: { VCheckbox, VRow, VCol, DhcpOptions, Ipv4PrefixAutocomplete },\n\n    inject: ['$intf', '$status'],\n\n    computed: {\n      intf: ({ $intf }) => $intf(),\n      status: ({ $status }) => $status(),\n\n      dhcpType: {\n        get() {\n          if (this.intf.dhcpEnabled) return 'dhcpEnabled'\n          if (this.intf.dhcpRelayEnabled) return 'dhcpRelayEnabled'\n          return null\n        },\n        set(val) {\n          if (val === 'dhcpEnabled') {\n            this.intf.dhcpEnabled = true\n            this.intf.dhcpRelayEnabled = false\n          }\n          if (val === 'dhcpRelayEnabled') {\n            this.intf.dhcpEnabled = false\n            this.intf.dhcpRelayEnabled = true\n          }\n        },\n      },\n    },\n  }\n</script>\n"],"mappings":"AAuJA,SAAAA,IAAA,EAAAC,IAAA,EAAAC,SAAA;AACA,OAAAC,sBAAA;AACA,OAAAC,WAAA;AAEA;EACAC,UAAA;IAAAH,SAAA,EAAAA,SAAA;IAAAF,IAAA,EAAAA,IAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAG,WAAA,EAAAA,WAAA;IAAAD,sBAAA,EAAAA;EAAA;EAEAG,MAAA;EAEAC,QAAA;IACAC,IAAA,WAAAA,KAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MAAA,OAAAA,KAAA;IAAA;IACAC,MAAA,WAAAA,OAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAD,KAAA,CAAAC,OAAA;MAAA,OAAAA,OAAA;IAAA;IAEAC,QAAA;MACAC,GAAA,WAAAA,IAAA;QACA,SAAAP,IAAA,CAAAQ,WAAA;QACA,SAAAR,IAAA,CAAAS,gBAAA;QACA;MACA;MACAC,GAAA,WAAAA,IAAAC,GAAA;QACA,IAAAA,GAAA;UACA,KAAAX,IAAA,CAAAQ,WAAA;UACA,KAAAR,IAAA,CAAAS,gBAAA;QACA;QACA,IAAAE,GAAA;UACA,KAAAX,IAAA,CAAAQ,WAAA;UACA,KAAAR,IAAA,CAAAS,gBAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}