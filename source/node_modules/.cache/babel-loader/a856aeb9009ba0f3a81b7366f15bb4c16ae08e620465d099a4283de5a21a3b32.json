{"ast":null,"code":"import _slicedToArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { VIcon, VCard, VSheet, VSpacer, VDivider, VCheckbox, VVirtualScroll, VListItem, VListItemContent, VListItemTitle, VListItemSubtitle } from 'vuetify/lib';\nimport cloneDeep from 'lodash/cloneDeep';\nimport debounce from 'lodash/debounce';\nexport default {\n  components: {\n    VIcon: VIcon,\n    VCard: VCard,\n    VSheet: VSheet,\n    VSpacer: VSpacer,\n    VDivider: VDivider,\n    VCheckbox: VCheckbox,\n    VVirtualScroll: VVirtualScroll,\n    VListItem: VListItem,\n    VListItemContent: VListItemContent,\n    VListItemTitle: VListItemTitle,\n    VListItemSubtitle: VListItemSubtitle\n  },\n  props: {\n    // all records\n    items: {\n      type: Array,\n      required: true\n    },\n    // modified records\n    selectedItems: {\n      type: Array,\n      required: true\n    },\n    // key in items object array to group items by\n    groupBy: {\n      type: String,\n      \"default\": function _default() {\n        return 'category';\n      }\n    },\n    // key in items object array to uniquely identify item\n    idKey: {\n      type: String,\n      \"default\": function _default() {\n        return 'id';\n      }\n    },\n    // key in items object array to show name from\n    nameKey: {\n      type: String,\n      \"default\": function _default() {\n        return 'name';\n      }\n    },\n    // key in items object array to show description from\n    descKey: {\n      type: String,\n      \"default\": function _default() {\n        return 'description';\n      }\n    },\n    actions: {\n      type: Array,\n      \"default\": function _default() {\n        return [{\n          value: 'enabled',\n          text: 'block',\n          forceEnabledFor: []\n        }, {\n          value: 'flagged',\n          text: 'flag',\n          forceEnabledFor: ['enabled']\n        }];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      filter: {\n        text: null,\n        action: null\n      },\n      groups: [],\n      // items divided into groups\n      allActions: {}\n    };\n  },\n  computed: {\n    // mapped list of items with selection populated\n    allItems: function allItems(_ref) {\n      var items = _ref.items,\n        actions = _ref.actions,\n        selectedItems = _ref.selectedItems,\n        idKey = _ref.idKey;\n      return cloneDeep(items).map(function (item) {\n        // if item is selected populate action keys in item using that\n        var selected = selectedItems.find(function (c) {\n          return c[idKey] === item[idKey];\n        });\n        if (selected) {\n          actions.forEach(function (_ref2) {\n            var action = _ref2.value;\n            return item[action] = selected[action];\n          });\n        }\n        return item;\n      });\n    },\n    // returns false if no data matches the filtered criteria\n    hasData: function hasData(_ref3) {\n      var groups = _ref3.groups;\n      return Object.values(groups).some(function (group) {\n        return !!group.items.length;\n      });\n    }\n  },\n  watch: {\n    allItems: {\n      immediate: true,\n      handler: function handler() {\n        this.computeGroups();\n      }\n    }\n  },\n  methods: {\n    /**\n     * Structures the items array into a groups object\n     * and sets the actions count based on items in the group\n     */\n    computeGroups: function computeGroups() {\n      var _this = this;\n      var groups = this.allItems.reduce(function (result, item) {\n        var cat = item[_this.groupBy];\n        if (!result[cat]) {\n          var _this$groups$cat;\n          result[cat] = {\n            expanded: ((_this$groups$cat = _this.groups[cat]) === null || _this$groups$cat === void 0 ? void 0 : _this$groups$cat.expanded) || false,\n            allItems: [],\n            counts: {}\n          };\n        }\n        result[cat].allItems.push(item);\n        return result;\n      }, {});\n      // sort groups\n      this.groups = Object.keys(groups).sort().reduce(function (obj, key) {\n        return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, key, groups[key]));\n      }, {});\n      this.applyFilters();\n    },\n    // recompute group level actions state\n    syncGroupsActionState: function syncGroupsActionState() {\n      var _this2 = this;\n      // calculate action state for each group\n      Object.values(this.groups).forEach(function (group) {\n        _this2.actions.forEach(function (_ref4) {\n          var action = _ref4.value;\n          var actionCount = group.items.filter(function (item) {\n            return item[action];\n          }).length;\n          group[action] = _this2.calculateCheckboxState(group.items.length, actionCount);\n        });\n      });\n      // calculate state for top actions\n      this.actions.forEach(function (_ref5) {\n        var action = _ref5.value;\n        _this2.allActions[action] = Object.values(_this2.groups).reduce(function (value, group) {\n          if (group[action]) {\n            return value && group[action];\n          }\n          if (group[action] === undefined) {\n            return undefined;\n          }\n          return false;\n        }, true);\n      });\n    },\n    /**\n     * returns following to decide a checkbox's state\n     * true (checked) / false (unchecked) / undefined (indeterminate)\n     *\n     * @param {number} totalItems total Items\n     * @param {number} selectedItems selected Items\n     */\n    calculateCheckboxState: function calculateCheckboxState(totalItems, selectedItems) {\n      if (selectedItems === totalItems) {\n        return true; // checked\n      }\n      if (selectedItems === 0) {\n        return false; // unchecked\n      }\n      return undefined; // indeterminate\n    },\n    /**\n     * clears the applied filters\n     */\n    clearFilters: function clearFilters() {\n      this.filter.text = null;\n      this.filter.action = null;\n      this.applyFilters();\n    },\n    debouncedApplyFilters: debounce(function (value) {\n      this.filter.text = value;\n      this.applyFilters();\n    }, 300),\n    /**\n     * applies the filters to the items in the groups\n     */\n    applyFilters: function applyFilters() {\n      var _this3 = this;\n      this.groups = Object.entries(this.groups).reduce(function (groups, _ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n          cat = _ref7[0],\n          group = _ref7[1];\n        var items = _this3.filterList(group.allItems);\n        // update action counts after filter\n        _this3.actions.forEach(function (_ref8) {\n          var action = _ref8.value;\n          group.counts[action] = items.filter(function (item) {\n            return item[action];\n          }).length;\n        });\n        return _objectSpread(_objectSpread({}, groups), {}, _defineProperty({}, cat, _objectSpread(_objectSpread({}, group), {}, {\n          items: items\n        })));\n      }, {});\n      this.syncGroupsActionState();\n    },\n    /**\n     * filters the list based on the selected filters\n     * @param {Array} list list to filter\n     */\n    filterList: function filterList() {\n      var _this4 = this;\n      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      // get the items matching the filters (if set)\n      if (this.filter.text || this.filter.action) {\n        list = list.filter(function (item) {\n          var textFilter = true;\n          var actFilter = true;\n          if (_this4.filter.text) {\n            textFilter = [_this4.nameKey, _this4.descKey].some(function (key) {\n              return _this4.$vuntangle.$t(item[key]).toLowerCase().includes(_this4.filter.text.toLowerCase());\n            });\n          }\n          if (_this4.filter.action) {\n            actFilter = item[_this4.filter.action];\n          }\n          return textFilter && actFilter;\n        });\n      }\n      return list;\n    },\n    /**\n     * applies the action to all (filtered) items in all group\n     *\n     * @param {Object} action the action to perform on the group\n     * @param {boolean} value new value of the action flag\n     */\n    applyActionToAll: function applyActionToAll(action, value) {\n      var _this5 = this;\n      var selectedCopy = cloneDeep(this.selectedItems);\n      Object.values(this.groups).forEach(function (group) {\n        group.items.forEach(function (item) {\n          _this5.updateFlag(selectedCopy, item, action, value);\n        });\n      });\n      this.$emit('update:selectedItems', selectedCopy);\n    },\n    /**\n     * applies the action to all (filtered) items in passed group\n     *\n     * @param {boolean} value boolean to set for the whole group\n     * @param {Object} action the action to perform on the group\n     * @param {boolean} value new value of the action flag\n     */\n    applyActionToGroup: function applyActionToGroup(group, action, value) {\n      var _this6 = this;\n      var selectedCopy = cloneDeep(this.selectedItems);\n      group.items.forEach(function (item) {\n        _this6.updateFlag(selectedCopy, item, action, value);\n      });\n      this.$emit('update:selectedItems', selectedCopy);\n    },\n    /**\n     * applies the action to the passed item\n     *\n     * @param {Object} item the record to toggle the flag for\n     * @param {Object} action the action to perform on the item\n     * @param {boolean} value new value of the flag\n     */\n    applyActionToItem: function applyActionToItem(item, action, value) {\n      var selectedCopy = this.updateFlag(cloneDeep(this.selectedItems), item, action, value);\n      this.$emit('update:selectedItems', selectedCopy);\n    },\n    /**\n     *\n     * @param {array} selectedItems list of selected items\n     * @param {Object} item item to modify\n     * @param {Object} targetAction action to perform on the item\n     * @param {boolean} value value of the action to apply\n     */\n    updateFlag: function updateFlag(selectedItems, item, targetAction, value) {\n      var _this7 = this;\n      var key = targetAction.value;\n      var selected = selectedItems.find(function (c) {\n        return c[_this7.idKey] === item[_this7.idKey];\n      });\n      if (!selected) {\n        selected = _defineProperty(_defineProperty({}, this.idKey, item[this.idKey]), key, value);\n        selectedItems.push(selected);\n      } else {\n        // enable the action unless its not disabled\n        if (value || targetAction.forceEnabledFor.every(function (key) {\n          return !selected[key];\n        })) {\n          selected[key] = value;\n          // reset other actions if configured\n          if (value && item[targetAction.resets]) {\n            selected[targetAction.resets] = false;\n          }\n        }\n        if (this.actions.every(function (_ref9) {\n          var action = _ref9.value;\n          return !selected[action];\n        })) {\n          // clean up selectedItems in case no action is selected\n          var idx = selectedItems.findIndex(function (c) {\n            return c[_this7.idKey] === selected[_this7.idKey];\n          });\n          selectedItems.splice(idx, 1);\n          return selectedItems;\n        }\n      }\n      // check if there are force enabled conditions for any action\n      this.actions.forEach(function (_ref10) {\n        var action = _ref10.value,\n          forceEnabledFor = _ref10.forceEnabledFor;\n        if (forceEnabledFor.includes(key)) {\n          selected[action] = true;\n        }\n      });\n      return selectedItems;\n    },\n    /**\n     * used to expand / collapse all group\n     *\n     * @param {boolean} expand boolean to decide whether to expand or close\n     */\n    toggleExpand: function toggleExpand(expand) {\n      Object.values(this.groups).forEach(function (group) {\n        group.expanded = expand;\n      });\n    },\n    /**\n     * Generates an action count for the group in the format; (3 block, 4 flag)\n     *\n     * @param {Object} group target group\n     */\n    getGroupActionsHelperText: function getGroupActionsHelperText(group) {\n      var _this8 = this;\n      var actionCounts = this.actions.map(function (action) {\n        return \"\".concat(group.counts[action.value], \" \").concat(_this8.$vuntangle.$t(action.text));\n      });\n      return \"(\".concat(actionCounts.join(', '), \")\");\n    }\n  }\n};","map":{"version":3,"names":["VIcon","VCard","VSheet","VSpacer","VDivider","VCheckbox","VVirtualScroll","VListItem","VListItemContent","VListItemTitle","VListItemSubtitle","cloneDeep","debounce","components","props","items","type","Array","required","selectedItems","groupBy","String","default","idKey","nameKey","descKey","actions","value","text","forceEnabledFor","data","filter","action","groups","allActions","computed","allItems","_ref","map","item","selected","find","c","forEach","_ref2","hasData","_ref3","Object","values","some","group","length","watch","immediate","handler","computeGroups","methods","_this","reduce","result","cat","_this$groups$cat","expanded","counts","push","keys","sort","obj","key","_objectSpread","_defineProperty","applyFilters","syncGroupsActionState","_this2","_ref4","actionCount","calculateCheckboxState","_ref5","undefined","totalItems","clearFilters","debouncedApplyFilters","_this3","entries","_ref6","_ref7","_slicedToArray","filterList","_ref8","_this4","list","arguments","textFilter","actFilter","$vuntangle","$t","toLowerCase","includes","applyActionToAll","_this5","selectedCopy","updateFlag","$emit","applyActionToGroup","_this6","applyActionToItem","targetAction","_this7","every","resets","_ref9","idx","findIndex","splice","_ref10","toggleExpand","expand","getGroupActionsHelperText","_this8","actionCounts","concat","join"],"sources":["node_modules/vuntangle/src/components/UListGroup/UListGroup.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- search filter field for items -->\n    <v-row dense class=\"mb-4\">\n      <v-col cols=\"8\">\n        <u-text-field\n          v-model=\"filter.text\"\n          :label=\"$vuntangle.$t('filter')\"\n          clearable\n          @input=\"debouncedApplyFilters\"\n        ></u-text-field>\n      </v-col>\n      <v-col cols=\"4\">\n        <u-select\n          v-model=\"filter.action\"\n          :label=\"$vuntangle.$t('action')\"\n          :items=\"actions\"\n          clearable\n          @change=\"applyFilters\"\n        >\n          <template #selection=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n          <template #item=\"{ item }\">{{ $vuntangle.$t(item.text) }}</template>\n        </u-select>\n      </v-col>\n    </v-row>\n\n    <v-row v-show=\"hasData\" dense class=\"mb-4\">\n      <v-col cols=\"8\" class=\"d-flex pl-5\">\n        <v-checkbox\n          v-for=\"action in actions\"\n          :key=\"action.value\"\n          v-model=\"allActions[action.value]\"\n          class=\"mt-0 mr-4\"\n          hide-details\n          :label=\"$vuntangle.$t(action.text)\"\n          :disabled=\"action.forceEnabledFor.some(key => allActions[key])\"\n          style=\"white-space: nowrap\"\n          :indeterminate=\"allActions[action.value] === undefined\"\n          @change=\"applyActionToAll(action, $event)\"\n        />\n      </v-col>\n      <v-col cols=\"4\" class=\"d-flex justify-end\">\n        <u-btn text @click=\"toggleExpand(true)\">\n          <v-icon dense>mdi-arrow-expand-vertical</v-icon>{{ $vuntangle.$t('expand_all') }}\n        </u-btn>\n        <u-btn text @click=\"toggleExpand(false)\">\n          <v-icon dense>mdi-arrow-collapse-vertical</v-icon>{{ $vuntangle.$t('collapse_all') }}\n        </u-btn>\n      </v-col>\n    </v-row>\n\n    <v-card v-if=\"hasData\" outlined style=\"overflow: hidden\">\n      <!-- group heading -->\n      <div v-for=\"(group, key) in groups\" :key=\"key\">\n        <template v-if=\"group.items.length\">\n          <v-sheet\n            class=\"d-flex pa-4 align-center\"\n            style=\"cursor: pointer\"\n            :color=\"$vuetify.theme.isDark ? 'grey darken-4' : 'grey lighten-4'\"\n            @click=\"group.expanded = !group.expanded\"\n          >\n            <v-checkbox\n              v-for=\"action in actions\"\n              :key=\"action.value\"\n              v-model=\"group[action.value]\"\n              class=\"mt-0 mr-4\"\n              hide-details\n              :label=\"$vuntangle.$t(action.text)\"\n              :disabled=\"action.forceEnabledFor.some(key => group[key])\"\n              style=\"white-space: nowrap\"\n              :indeterminate=\"group[action.value] === undefined\"\n              @change=\"applyActionToGroup(group, action, $event)\"\n              @click.stop\n            />\n            <span class=\"text-h6 font-weight-bold\">{{ $vuntangle.$t(key) }}</span>\n            <v-spacer />\n            <span class=\"body-1 mr-4\">\n              <strong>{{ group.items.length }} {{ $vuntangle.$t('items') }}</strong>\n              {{ getGroupActionsHelperText(group) }}\n            </span>\n            <v-icon>{{ group.expanded ? 'mdi-chevron-up' : 'mdi-chevron-down' }}</v-icon>\n          </v-sheet>\n          <v-divider />\n        </template>\n        <!-- group items list -->\n        <v-virtual-scroll v-if=\"group.expanded\" max-height=\"600\" bench=\"10\" :items=\"group.items\" item-height=\"60\">\n          <template #default=\"{ item }\">\n            <div :key=\"item[idKey]\">\n              <v-list-item style=\"height: 59px\">\n                <v-checkbox\n                  v-for=\"action in actions\"\n                  :key=\"item[idKey] + action.value\"\n                  v-model=\"item[action.value]\"\n                  class=\"mt-0 mr-4\"\n                  hide-details\n                  :label=\"$vuntangle.$t(action.text)\"\n                  :disabled=\"action.forceEnabledFor.some(key => item[key])\"\n                  style=\"white-space: nowrap\"\n                  @change=\"applyActionToItem(item, action, $event)\"\n                />\n                <v-list-item-content>\n                  <v-list-item-title>\n                    <span\n                      class=\"font-weight-bold\"\n                      v-html=\"$options.filters.highlight($vuntangle.$t(item[nameKey]), filter.text)\"\n                    ></span>\n                  </v-list-item-title>\n                  <v-list-item-subtitle class=\"caption\">\n                    <span\n                      class=\"grey--text\"\n                      v-html=\"$options.filters.highlight($vuntangle.$t(item[descKey]), filter.text)\"\n                    ></span>\n                  </v-list-item-subtitle>\n                </v-list-item-content>\n              </v-list-item>\n              <v-divider />\n            </div>\n          </template>\n        </v-virtual-scroll>\n      </div>\n    </v-card>\n    <div v-else class=\"body-2 text-center my-8\">\n      <p>{{ $vuntangle.$t('no_data_meets_filter') }}</p>\n      <u-btn outlined @click=\"clearFilters\">{{ $vuntangle.$t('clear_filters') }}</u-btn>\n    </div>\n  </div>\n</template>\n<script>\n  import {\n    VIcon,\n    VCard,\n    VSheet,\n    VSpacer,\n    VDivider,\n    VCheckbox,\n    VVirtualScroll,\n    VListItem,\n    VListItemContent,\n    VListItemTitle,\n    VListItemSubtitle,\n  } from 'vuetify/lib'\n  import cloneDeep from 'lodash/cloneDeep'\n  import debounce from 'lodash/debounce'\n\n  export default {\n    components: {\n      VIcon,\n      VCard,\n      VSheet,\n      VSpacer,\n      VDivider,\n      VCheckbox,\n      VVirtualScroll,\n      VListItem,\n      VListItemContent,\n      VListItemTitle,\n      VListItemSubtitle,\n    },\n    props: {\n      // all records\n      items: {\n        type: Array,\n        required: true,\n      },\n      // modified records\n      selectedItems: {\n        type: Array,\n        required: true,\n      },\n      // key in items object array to group items by\n      groupBy: {\n        type: String,\n        default: () => 'category',\n      },\n      // key in items object array to uniquely identify item\n      idKey: {\n        type: String,\n        default: () => 'id',\n      },\n      // key in items object array to show name from\n      nameKey: {\n        type: String,\n        default: () => 'name',\n      },\n      // key in items object array to show description from\n      descKey: {\n        type: String,\n        default: () => 'description',\n      },\n      actions: {\n        type: Array,\n        default: () => [\n          { value: 'enabled', text: 'block', forceEnabledFor: [] },\n          { value: 'flagged', text: 'flag', forceEnabledFor: ['enabled'] },\n        ],\n      },\n    },\n    data() {\n      return {\n        filter: {\n          text: null,\n          action: null,\n        },\n        groups: [], // items divided into groups\n        allActions: {},\n      }\n    },\n\n    computed: {\n      // mapped list of items with selection populated\n      allItems: ({ items, actions, selectedItems, idKey }) => {\n        return cloneDeep(items).map(item => {\n          // if item is selected populate action keys in item using that\n          const selected = selectedItems.find(c => c[idKey] === item[idKey])\n          if (selected) {\n            actions.forEach(({ value: action }) => (item[action] = selected[action]))\n          }\n          return item\n        })\n      },\n\n      // returns false if no data matches the filtered criteria\n      hasData: ({ groups }) => {\n        return Object.values(groups).some(group => !!group.items.length)\n      },\n    },\n\n    watch: {\n      allItems: {\n        immediate: true,\n        handler() {\n          this.computeGroups()\n        },\n      },\n    },\n\n    methods: {\n      /**\n       * Structures the items array into a groups object\n       * and sets the actions count based on items in the group\n       */\n      computeGroups() {\n        const groups = this.allItems.reduce((result, item) => {\n          const cat = item[this.groupBy]\n          if (!result[cat]) {\n            result[cat] = {\n              expanded: this.groups[cat]?.expanded || false,\n              allItems: [],\n              counts: {},\n            }\n          }\n          result[cat].allItems.push(item)\n          return result\n        }, {})\n        // sort groups\n        this.groups = Object.keys(groups)\n          .sort()\n          .reduce((obj, key) => ({ ...obj, [key]: groups[key] }), {})\n        this.applyFilters()\n      },\n\n      // recompute group level actions state\n      syncGroupsActionState() {\n        // calculate action state for each group\n        Object.values(this.groups).forEach(group => {\n          this.actions.forEach(({ value: action }) => {\n            const actionCount = group.items.filter(item => item[action]).length\n            group[action] = this.calculateCheckboxState(group.items.length, actionCount)\n          })\n        })\n        // calculate state for top actions\n        this.actions.forEach(({ value: action }) => {\n          this.allActions[action] = Object.values(this.groups).reduce((value, group) => {\n            if (group[action]) {\n              return value && group[action]\n            }\n            if (group[action] === undefined) {\n              return undefined\n            }\n            return false\n          }, true)\n        })\n      },\n\n      /**\n       * returns following to decide a checkbox's state\n       * true (checked) / false (unchecked) / undefined (indeterminate)\n       *\n       * @param {number} totalItems total Items\n       * @param {number} selectedItems selected Items\n       */\n      calculateCheckboxState(totalItems, selectedItems) {\n        if (selectedItems === totalItems) {\n          return true // checked\n        }\n        if (selectedItems === 0) {\n          return false // unchecked\n        }\n        return undefined // indeterminate\n      },\n\n      /**\n       * clears the applied filters\n       */\n      clearFilters() {\n        this.filter.text = null\n        this.filter.action = null\n        this.applyFilters()\n      },\n\n      debouncedApplyFilters: debounce(function (value) {\n        this.filter.text = value\n        this.applyFilters()\n      }, 300),\n\n      /**\n       * applies the filters to the items in the groups\n       */\n      applyFilters() {\n        this.groups = Object.entries(this.groups).reduce((groups, [cat, group]) => {\n          const items = this.filterList(group.allItems)\n          // update action counts after filter\n          this.actions.forEach(({ value: action }) => {\n            group.counts[action] = items.filter(item => item[action]).length\n          })\n          return { ...groups, [cat]: { ...group, items } }\n        }, {})\n        this.syncGroupsActionState()\n      },\n\n      /**\n       * filters the list based on the selected filters\n       * @param {Array} list list to filter\n       */\n      filterList(list = []) {\n        // get the items matching the filters (if set)\n        if (this.filter.text || this.filter.action) {\n          list = list.filter(item => {\n            let textFilter = true\n            let actFilter = true\n            if (this.filter.text) {\n              textFilter = [this.nameKey, this.descKey].some(key =>\n                this.$vuntangle.$t(item[key]).toLowerCase().includes(this.filter.text.toLowerCase()),\n              )\n            }\n            if (this.filter.action) {\n              actFilter = item[this.filter.action]\n            }\n            return textFilter && actFilter\n          })\n        }\n        return list\n      },\n\n      /**\n       * applies the action to all (filtered) items in all group\n       *\n       * @param {Object} action the action to perform on the group\n       * @param {boolean} value new value of the action flag\n       */\n      applyActionToAll(action, value) {\n        const selectedCopy = cloneDeep(this.selectedItems)\n        Object.values(this.groups).forEach(group => {\n          group.items.forEach(item => {\n            this.updateFlag(selectedCopy, item, action, value)\n          })\n        })\n        this.$emit('update:selectedItems', selectedCopy)\n      },\n\n      /**\n       * applies the action to all (filtered) items in passed group\n       *\n       * @param {boolean} value boolean to set for the whole group\n       * @param {Object} action the action to perform on the group\n       * @param {boolean} value new value of the action flag\n       */\n      applyActionToGroup(group, action, value) {\n        const selectedCopy = cloneDeep(this.selectedItems)\n        group.items.forEach(item => {\n          this.updateFlag(selectedCopy, item, action, value)\n        })\n        this.$emit('update:selectedItems', selectedCopy)\n      },\n\n      /**\n       * applies the action to the passed item\n       *\n       * @param {Object} item the record to toggle the flag for\n       * @param {Object} action the action to perform on the item\n       * @param {boolean} value new value of the flag\n       */\n      applyActionToItem(item, action, value) {\n        const selectedCopy = this.updateFlag(cloneDeep(this.selectedItems), item, action, value)\n        this.$emit('update:selectedItems', selectedCopy)\n      },\n\n      /**\n       *\n       * @param {array} selectedItems list of selected items\n       * @param {Object} item item to modify\n       * @param {Object} targetAction action to perform on the item\n       * @param {boolean} value value of the action to apply\n       */\n      updateFlag(selectedItems, item, targetAction, value) {\n        const key = targetAction.value\n        let selected = selectedItems.find(c => c[this.idKey] === item[this.idKey])\n        if (!selected) {\n          selected = { [this.idKey]: item[this.idKey], [key]: value }\n          selectedItems.push(selected)\n        } else {\n          // enable the action unless its not disabled\n          if (value || targetAction.forceEnabledFor.every(key => !selected[key])) {\n            selected[key] = value\n            // reset other actions if configured\n            if (value && item[targetAction.resets]) {\n              selected[targetAction.resets] = false\n            }\n          }\n          if (this.actions.every(({ value: action }) => !selected[action])) {\n            // clean up selectedItems in case no action is selected\n            const idx = selectedItems.findIndex(c => c[this.idKey] === selected[this.idKey])\n            selectedItems.splice(idx, 1)\n            return selectedItems\n          }\n        }\n        // check if there are force enabled conditions for any action\n        this.actions.forEach(({ value: action, forceEnabledFor }) => {\n          if (forceEnabledFor.includes(key)) {\n            selected[action] = true\n          }\n        })\n        return selectedItems\n      },\n\n      /**\n       * used to expand / collapse all group\n       *\n       * @param {boolean} expand boolean to decide whether to expand or close\n       */\n      toggleExpand(expand) {\n        Object.values(this.groups).forEach(group => {\n          group.expanded = expand\n        })\n      },\n\n      /**\n       * Generates an action count for the group in the format; (3 block, 4 flag)\n       *\n       * @param {Object} group target group\n       */\n      getGroupActionsHelperText(group) {\n        const actionCounts = this.actions.map(\n          action => `${group.counts[action.value]} ${this.$vuntangle.$t(action.text)}`,\n        )\n        return `(${actionCounts.join(', ')})`\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}