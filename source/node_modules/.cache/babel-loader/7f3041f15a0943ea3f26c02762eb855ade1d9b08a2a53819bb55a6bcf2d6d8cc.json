{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.self.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport jsonschema from 'jsonschema';\nimport { _ as agGridUtils } from '@ag-grid-community/core';\nimport ip6 from './ip6';\nexport default {\n  copyToClipboard: function copyToClipboard(text) {\n    if (window.clipboardData && window.clipboardData.setData) {\n      return window.clipboardData.setData('Text', text);\n    } else if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n      var textarea = document.createElement('textarea');\n      textarea.textContent = text;\n      textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n      } catch (ex) {\n        // eslint-disable-next-line no-console\n        console.warn('Copy to clipboard failed.', ex);\n        return false;\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    }\n  },\n  /**\n   * Get the current browser size width.\n   *\n   * @returns {number}\n   */\n  getBrowserWidth: function getBrowserWidth() {\n    if (self.innerWidth) {\n      return self.innerWidth;\n    }\n    if (document.documentElement && document.documentElement.clientWidth) {\n      return document.documentElement.clientWidth;\n    }\n    if (document.body) {\n      return document.body.clientWidth;\n    }\n  },\n  /**\n   * Get human readable time by convert seconds into hours, minutes, seconds.\n   *\n   * @param   {Number} seconds\n   * @returns {string}\n   */\n  getReadableTime: function getReadableTime(seconds) {\n    return \"\".concat(Math.floor(seconds / 3600), \"h \").concat(Math.floor(seconds / 60) % 60, \"m \").concat(Math.round(seconds) % 60, \"s\");\n  },\n  /**\n   * Returns true if the given address is a valid IPv4 address\n   * @param {string} address IPv4 address\n   * @param {boolean} withCIDR true if address includes a CIDR range. i.e. 1.1.1.1/24\n   * @returns\n   */\n  isIPv4AddressValid: function isIPv4AddressValid(address) {\n    var withCIDR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!address) return false;\n    if (withCIDR) {\n      var cidrV4Regex = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$/;\n      return cidrV4Regex.test(address);\n    }\n    var ipV4Regex = /^(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$/;\n    return ipV4Regex.test(address);\n  },\n  /**\n   * Returns true if the given address is a valid IPv6 address\n   * @param {string} address IPv6 address\n   * @param {boolean} withCIDR true if address includes a CIDR range. i.e. 2001:0db8:85a3:0000:0000:8a2e:0370:7334/24\n   * @returns\n   */\n  isIPv6AddressValid: function isIPv6AddressValid(address) {\n    var withCIDR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!address) return false;\n    if (withCIDR) {\n      var cidrV6Regex = /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])){1}$/;\n      return cidrV6Regex.test(address);\n    }\n    var ipV6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\n    return ipV6Regex.test(address);\n  },\n  /**\n   * Returns true if the IPv4 range is valid\n   * @param {string} rangeStart valid IPv4 address, start of the IP range\n   * @param {string} rangeEnd valid IPv address, end of the IP range\n   * @returns\n   */\n  isIPv4RangeValid: function isIPv4RangeValid(rangeStart, rangeEnd) {\n    var start = this.ipv4ToLong(rangeStart);\n    var end = this.ipv4ToLong(rangeEnd);\n    return end > start;\n  },\n  /**\n   * Returns true if the IPv6 range is valid\n   * @param {string} rangeStart valid IPv6 address, start of the IP range\n   * @param {string} rangeEnd valid IPv6 address, end of the IP range\n   * @returns\n   */\n  isIPv6RangeValid: function isIPv6RangeValid(rangeStart, rangeEnd) {\n    var start = ip6.normalize(rangeStart).replace(/:/g, '');\n    var end = ip6.normalize(rangeEnd).replace(/:/g, '');\n    return end > start;\n  },\n  ipv4ToLong: function ipv4ToLong(address) {\n    var parts = address.split('.');\n    return parts[0] * 16777216 + parts[1] * 65536 + parts[2] * 256 + parts[3] * 1;\n  },\n  /**\n   * Convert an ip6 address to a javascript BigInt type.\n   *\n   * @param address\n   * @returns {bigint}\n   */\n  ipv6ToBigInt: function ipv6ToBigInt(address) {\n    var binaryString = '0b';\n    ip6.normalize(address).split(':').forEach(function (hextet) {\n      return binaryString += parseInt(hextet, 16).toString(2).padStart(16, '0');\n    });\n    return BigInt(binaryString);\n  },\n  /**\n   * Convert any ip address (ipv4 or ipv6) to a javascript BigInt type.\n   *\n   * @param address\n   * @returns {bigint}\n   */\n  ipAnyToBigInt: function ipAnyToBigInt(address) {\n    // try to convert ip4\n    if (this.isIPv4AddressValid(address)) {\n      return BigInt(this.ipv4ToLong(address));\n    }\n\n    // try to convert ip6, normalize first\n    if (this.isIPv6AddressValid(address)) {\n      return this.ipv6ToBigInt(address);\n    }\n    return BigInt(0);\n  },\n  /**\n   * Compare any ip address (ipv4 or ipv6) string, returns 1, 0, or -1.  Used for sorting.\n   *\n   * @param   {string} a\n   * @param   {string} b\n   * @returns {number}\n   */\n  compareIpAny: function compareIpAny(a, b) {\n    a = this.ipAnyToBigInt(this.getIpForSorting(a));\n    b = this.ipAnyToBigInt(this.getIpForSorting(b));\n    return a === b ? 0 : a > b ? 1 : -1;\n  },\n  /**\n   * Compare two time intervals, composed of a time and unit, returns 1, 0, or -1. Used for sorting in dynamic blocklists' \"Polling Interval\" column.\n   *\n   * @param {number} aTime The count of units (as in A hours)\n   * @param {string} aUnit The unit (days or minutes)\n   * @param {number} bTime The count of units (as in B hours)\n   * @param {string} bUnit The unit (days or minutes)\n   * @returns {number}\n   */\n  compareTimeIntervals: function compareTimeIntervals(aTime, aUnit, bTime, bUnit) {\n    // NOTE: only have to use English here, under the hood is always English (and plural)\n    var unitsToSeconds = {\n      'minutes': 60,\n      'hours': 60 * 60,\n      'days': 60 * 60 * 24,\n      'months': 60 * 60 * 24 * 31\n    };\n    var a = aTime * unitsToSeconds[aUnit.toLowerCase()];\n    var b = bTime * unitsToSeconds[bUnit.toLowerCase()];\n    return a === b ? 0 : a > b ? 1 : -1;\n  },\n  /**\n   * Returns true if the given hostname address is valid\n   * @param {string}} address\n   * @returns\n   */\n  isHostnameValid: function isHostnameValid(address) {\n    var hostnameRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/i;\n    return hostnameRegex.test(address);\n  },\n  /**\n   * returns langdebug flag based on query string and local storage\n   * @returns {boolean} true/false if debugging is enabled\n   */\n  langDebug: function langDebug() {\n    // expects .../some/uri?langdebug=true\n    var uri = window.location.search.substring(1);\n    var params = new URLSearchParams(uri);\n    if (params.has('langdebug')) {\n      if (params.get('langdebug') === 'true') {\n        // add langdebug to local storage\n        window.localStorage.setItem('langdebug', true);\n      } else {\n        // remove langdebug from local storage\n        window.localStorage.removeItem('langdebug');\n      }\n    }\n    // return current value\n    return window.localStorage.getItem('langdebug');\n  },\n  // possible comparison operators with the operator as the key, and the translation key as the value\n  operators: {\n    '==': 'is',\n    '!=': 'is_not',\n    '>': 'greater_than',\n    '<': 'less_than',\n    '>=': 'greater_or_equal',\n    '<=': 'less_or_equal'\n  },\n  // ISO-3166 alpha2 country codes as listed on http://www.geonames.org/countries/\n  country_codes: {\n    'AD': 'Andorra',\n    'AE': 'United Arab Emirates',\n    'AF': 'Afghanistan',\n    'AG': 'Antigua and Barbuda',\n    'AI': 'Anguilla',\n    'AL': 'Albania',\n    'AM': 'Armenia',\n    'AO': 'Angola',\n    'AQ': 'Antarctica',\n    'AR': 'Argentina',\n    'AS': 'American Samoa',\n    'AT': 'Austria',\n    'AU': 'Australia',\n    'AW': 'Aruba',\n    'AX': 'Åland',\n    'AZ': 'Azerbaijan',\n    'BA': 'Bosnia and Herzegovina',\n    'BB': 'Barbados',\n    'BD': 'Bangladesh',\n    'BE': 'Belgium',\n    'BF': 'Burkina Faso',\n    'BG': 'Bulgaria',\n    'BH': 'Bahrain',\n    'BI': 'Burundi',\n    'BJ': 'Benin',\n    'BL': 'Saint Barthélemy',\n    'BM': 'Bermuda',\n    'BN': 'Brunei',\n    'BO': 'Bolivia',\n    'BQ': 'Bonaire, Sint Eustatius, and Saba',\n    'BR': 'Brazil',\n    'BS': 'Bahamas',\n    'BT': 'Bhutan',\n    'BV': 'Bouvet Island',\n    'BW': 'Botswana',\n    'BY': 'Belarus',\n    'BZ': 'Belize',\n    'CA': 'Canada',\n    'CC': 'Cocos (Keeling) Islands',\n    'CD': 'DR Congo',\n    'CF': 'Central African Republic',\n    'CG': 'Congo Republic',\n    'CH': 'Switzerland',\n    'CI': 'Ivory Coast',\n    'CK': 'Cook Islands',\n    'CL': 'Chile',\n    'CM': 'Cameroon',\n    'CN': 'China',\n    'CO': 'Colombia',\n    'CR': 'Costa Rica',\n    'CU': 'Cuba',\n    'CV': 'Cabo Verde',\n    'CW': 'Curaçao',\n    'CX': 'Christmas Island',\n    'CY': 'Cyprus',\n    'CZ': 'Czechia',\n    'DE': 'Germany',\n    'DJ': 'Djibouti',\n    'DK': 'Denmark',\n    'DM': 'Dominica',\n    'DO': 'Dominican Republic',\n    'DZ': 'Algeria',\n    'EC': 'Ecuador',\n    'EE': 'Estonia',\n    'EG': 'Egypt',\n    'EH': 'Western Sahara',\n    'ER': 'Eritrea',\n    'ES': 'Spain',\n    'ET': 'Ethiopia',\n    'FI': 'Finland',\n    'FJ': 'Fiji',\n    'FK': 'Falkland Islands',\n    'FM': 'Micronesia',\n    'FO': 'Faroe Islands',\n    'FR': 'France',\n    'GA': 'Gabon',\n    'GB': 'United Kingdom',\n    'GD': 'Grenada',\n    'GE': 'Georgia',\n    'GF': 'French Guiana',\n    'GG': 'Guernsey',\n    'GH': 'Ghana',\n    'GI': 'Gibraltar',\n    'GL': 'Greenland',\n    'GM': 'The Gambia',\n    'GN': 'Guinea',\n    'GP': 'Guadeloupe',\n    'GQ': 'Equatorial Guinea',\n    'GR': 'Greece',\n    'GS': 'South Georgia and South Sandwich Islands',\n    'GT': 'Guatemala',\n    'GU': 'Guam',\n    'GW': 'Guinea-Bissau',\n    'GY': 'Guyana',\n    'HK': 'Hong Kong',\n    'HM': 'Heard and McDonald Islands',\n    'HN': 'Honduras',\n    'HR': 'Croatia',\n    'HT': 'Haiti',\n    'HU': 'Hungary',\n    'ID': 'Indonesia',\n    'IE': 'Ireland',\n    'IL': 'Israel',\n    'IM': 'Isle of Man',\n    'IN': 'India',\n    'IO': 'British Indian Ocean Territory',\n    'IQ': 'Iraq',\n    'IR': 'Iran',\n    'IS': 'Iceland',\n    'IT': 'Italy',\n    'JE': 'Jersey',\n    'JM': 'Jamaica',\n    'JO': 'Jordan',\n    'JP': 'Japan',\n    'KE': 'Kenya',\n    'KG': 'Kyrgyzstan',\n    'KH': 'Cambodia',\n    'KI': 'Kiribati',\n    'KM': 'Comoros',\n    'KN': 'St Kitts and Nevis',\n    'KP': 'North Korea',\n    'KR': 'South Korea',\n    'KW': 'Kuwait',\n    'KY': 'Cayman Islands',\n    'KZ': 'Kazakhstan',\n    'LA': 'Laos',\n    'LB': 'Lebanon',\n    'LC': 'Saint Lucia',\n    'LI': 'Liechtenstein',\n    'LK': 'Sri Lanka',\n    'LR': 'Liberia',\n    'LS': 'Lesotho',\n    'LT': 'Lithuania',\n    'LU': 'Luxembourg',\n    'LV': 'Latvia',\n    'LY': 'Libya',\n    'MA': 'Morocco',\n    'MC': 'Monaco',\n    'MD': 'Moldova',\n    'ME': 'Montenegro',\n    'MF': 'Saint Martin',\n    'MG': 'Madagascar',\n    'MH': 'Marshall Islands',\n    'MK': 'North Macedonia',\n    'ML': 'Mali',\n    'MM': 'Myanmar',\n    'MN': 'Mongolia',\n    'MO': 'Macao',\n    'MP': 'Northern Mariana Islands',\n    'MQ': 'Martinique',\n    'MR': 'Mauritania',\n    'MS': 'Montserrat',\n    'MT': 'Malta',\n    'MU': 'Mauritius',\n    'MV': 'Maldives',\n    'MW': 'Malawi',\n    'MX': 'Mexico',\n    'MY': 'Malaysia',\n    'MZ': 'Mozambique',\n    'NA': 'Namibia',\n    'NC': 'New Caledonia',\n    'NE': 'Niger',\n    'NF': 'Norfolk Island',\n    'NG': 'Nigeria',\n    'NI': 'Nicaragua',\n    'NL': 'Netherlands',\n    'NO': 'Norway',\n    'NP': 'Nepal',\n    'NR': 'Nauru',\n    'NU': 'Niue',\n    'NZ': 'New Zealand',\n    'OM': 'Oman',\n    'PA': 'Panama',\n    'PE': 'Peru',\n    'PF': 'French Polynesia',\n    'PG': 'Papua New Guinea',\n    'PH': 'Philippines',\n    'PK': 'Pakistan',\n    'PL': 'Poland',\n    'PM': 'Saint Pierre and Miquelon',\n    'PN': 'Pitcairn Islands',\n    'PR': 'Puerto Rico',\n    'PS': 'Palestine',\n    'PT': 'Portugal',\n    'PW': 'Palau',\n    'PY': 'Paraguay',\n    'QA': 'Qatar',\n    'RE': 'Réunion',\n    'RO': 'Romania',\n    'RS': 'Serbia',\n    'RU': 'Russia',\n    'RW': 'Rwanda',\n    'SA': 'Saudi Arabia',\n    'SB': 'Solomon Islands',\n    'SC': 'Seychelles',\n    'SD': 'Sudan',\n    'SE': 'Sweden',\n    'SG': 'Singapore',\n    'SH': 'Saint Helena',\n    'SI': 'Slovenia',\n    'SJ': 'Svalbard and Jan Mayen',\n    'SK': 'Slovakia',\n    'SL': 'Sierra Leone',\n    'SM': 'San Marino',\n    'SN': 'Senegal',\n    'SO': 'Somalia',\n    'SR': 'Suriname',\n    'SS': 'South Sudan',\n    'ST': 'São Tomé and Príncipe',\n    'SV': 'El Salvador',\n    'SX': 'Sint Maarten',\n    'SY': 'Syria',\n    'SZ': 'Eswatini',\n    'TC': 'Turks and Caicos Islands',\n    'TD': 'Chad',\n    'TF': 'French Southern Territories',\n    'TG': 'Togo',\n    'TH': 'Thailand',\n    'TJ': 'Tajikistan',\n    'TK': 'Tokelau',\n    'TL': 'Timor-Leste',\n    'TM': 'Turkmenistan',\n    'TN': 'Tunisia',\n    'TO': 'Tonga',\n    'TR': 'Turkey',\n    'TT': 'Trinidad and Tobago',\n    'TV': 'Tuvalu',\n    'TW': 'Taiwan',\n    'TZ': 'Tanzania',\n    'UA': 'Ukraine',\n    'UG': 'Uganda',\n    'UM': 'U.S. Outlying Islands',\n    'US': 'United States',\n    'UY': 'Uruguay',\n    'UZ': 'Uzbekistan',\n    'VA': 'Vatican City',\n    'VC': 'St Vincent and Grenadines',\n    'VE': 'Venezuela',\n    'VG': 'British Virgin Islands',\n    'VI': 'U.S. Virgin Islands',\n    'VN': 'Vietnam',\n    'VU': 'Vanuatu',\n    'WF': 'Wallis and Futuna',\n    'WS': 'Samoa',\n    'XK': 'Kosovo',\n    'YE': 'Yemen',\n    'YT': 'Mayotte',\n    'ZA': 'South Africa',\n    'ZM': 'Zambia',\n    'ZW': 'Zimbabwe',\n    'XL': 'Local',\n    'XU': 'Unknown'\n  },\n  /**\n   * Method to get the a query string parameter from a URL name\n   * From: http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n   * @param name - name of the query parameter to get\n   * @param url - url. If not set, will use current windows's URL\n   * @returns {*} - parameter value if found or null\n   */\n  getUrlParameterByName: function getUrlParameterByName(name, url) {\n    if (!url) {\n      url = window.location.href;\n    }\n    name = name.replace(/[[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');\n    var results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2]);\n  },\n  /**\n   *\n   * @returns generates guids\n   */\n  uuidv4: function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {\n      return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);\n    });\n  },\n  /**\n   * validates if an email address is valid or not\n   *\n   * @param email - email to validate\n   * @return - boolean\n   */\n  validateEmail: function validateEmail(email) {\n    var emailRegex = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)+$/;\n    return emailRegex.test(email);\n  },\n  /**\n   * Used to validate an object to a schema, primarily used with importing in ME policy templates\n   *\n   * @param {Object} testObj\n   * @param {Object} schema\n   * @returns {boolean}\n   */\n  validateSchema: function validateSchema(testObj, schema) {\n    var result = jsonschema.validate(testObj, schema);\n    return result.errors.length === 0;\n  },\n  /**\n   * Downloads the dynamic list content as CSV\n   * @param {String} fileName - the dynamic list file name to be saved on disk\n   * @param {String} content - the downloaded response content\n   */\n  processDynamicListDownload: function processDynamicListDownload(fileName, content) {\n    var lines = content.split('\\n');\n    var csv = lines.map(function (ip) {\n      return \"\\\"\".concat(ip, \"\\\"\");\n    }).join('\\n');\n    var blob = new Blob([csv], {\n      type: 'text/csv'\n    });\n    var url = window.URL.createObjectURL(blob);\n    var el = document.createElement('a');\n    el.setAttribute('href', url);\n    el.setAttribute('download', fileName);\n    el.style.display = 'none';\n    document.body.appendChild(el);\n    el.click();\n    URL.revokeObjectURL(url);\n    document.body.removeChild(el);\n  },\n  /**\n   * return uptime into days, hours and minutes format\n   * @param {String} time - time to be converted\n   */\n  formatUptime: function formatUptime(time) {\n    var numdays = Math.floor(time % 31536000 / 86400);\n    var numhours = Math.floor(time % 31536000 % 86400 / 3600);\n    var numminutes = Math.floor(time % 31536000 % 86400 % 3600 / 60);\n    var uptime = '';\n    if (numdays > 0) {\n      uptime += numdays + 'd ';\n    }\n    if (numhours > 0) {\n      uptime += numhours + 'h ';\n    }\n    if (numminutes > 0) {\n      uptime += numminutes + 'm';\n    }\n    return uptime;\n  },\n  /**\n   * Get only the ip address from ip string\n   *  e.g: for 1.1.1.1/23 will return 1.1.1.1\n   *       for 2.2.2.2, 3.3.3.3/23 or 2.2.2.2/10, 4.4.4.4 will return 2.2.2.2\n   *\n   * @param   {string} ip\n   * @returns {string}\n   */\n  getIpForSorting: function getIpForSorting(ip) {\n    if (!ip) return ip;\n    if (ip.includes(',')) {\n      // If the ip string contains ',', keep only what's in front of it\n      ip = ip.split(',')[0];\n    }\n    if (ip.includes('-')) {\n      // If the ip string contains '-', keep only what's in front of it\n      ip = ip.split('-')[0];\n    }\n    if (ip.includes('/')) {\n      // If the ip string contains '/', keep only what's in front of it\n      ip = ip.split('/')[0];\n    }\n    return ip;\n  },\n  /**\n   * Sort any two strings alpha numerically\n   *\n   * @param   {string} valueA\n   * @param   {string} valueB\n   * @param   {string} locale\n   * @param   {?boolean} accentedCompare\n   * @returns {number}\n   */\n  sortAlphaNumerically: function sortAlphaNumerically(valueA, valueB, locale, accentedCompare) {\n    if (typeof valueA === 'string') {\n      try {\n        // using local compare also allows chinese comparisons\n        return valueA.localeCompare(valueB, locale, {\n          numeric: true,\n          sensitivity: 'base'\n        });\n      } catch (e) {\n        // if something wrong with localeCompare, e.g. not supported\n        // by browser, then just continue with the quick one\n        return valueA > valueB ? 1 : valueA < valueB ? -1 : 0;\n      }\n    }\n\n    // use ag-grid default comparator\n    return agGridUtils.defaultComparator(valueA, valueB, accentedCompare);\n  }\n};","map":{"version":3,"names":["jsonschema","_","agGridUtils","ip6","copyToClipboard","text","window","clipboardData","setData","document","queryCommandSupported","textarea","createElement","textContent","style","position","body","appendChild","select","execCommand","ex","console","warn","removeChild","getBrowserWidth","self","innerWidth","documentElement","clientWidth","getReadableTime","seconds","concat","Math","floor","round","isIPv4AddressValid","address","withCIDR","arguments","length","undefined","cidrV4Regex","test","ipV4Regex","isIPv6AddressValid","cidrV6Regex","ipV6Regex","isIPv4RangeValid","rangeStart","rangeEnd","start","ipv4ToLong","end","isIPv6RangeValid","normalize","replace","parts","split","ipv6ToBigInt","binaryString","forEach","hextet","parseInt","toString","padStart","BigInt","ipAnyToBigInt","compareIpAny","a","b","getIpForSorting","compareTimeIntervals","aTime","aUnit","bTime","bUnit","unitsToSeconds","toLowerCase","isHostnameValid","hostnameRegex","langDebug","uri","location","search","substring","params","URLSearchParams","has","get","localStorage","setItem","removeItem","getItem","operators","country_codes","getUrlParameterByName","name","url","href","regex","RegExp","results","exec","decodeURIComponent","uuidv4","c","crypto","getRandomValues","Uint8Array","validateEmail","email","emailRegex","validateSchema","testObj","schema","result","validate","errors","processDynamicListDownload","fileName","content","lines","csv","map","ip","join","blob","Blob","type","URL","createObjectURL","el","setAttribute","display","click","revokeObjectURL","formatUptime","time","numdays","numhours","numminutes","uptime","includes","sortAlphaNumerically","valueA","valueB","locale","accentedCompare","localeCompare","numeric","sensitivity","e","defaultComparator"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/plugins/util.js"],"sourcesContent":["import jsonschema from 'jsonschema'\nimport { _ as agGridUtils } from '@ag-grid-community/core'\nimport ip6 from './ip6'\n\nexport default {\n  copyToClipboard: text => {\n    if (window.clipboardData && window.clipboardData.setData) {\n      return window.clipboardData.setData('Text', text)\n    } else if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n      const textarea = document.createElement('textarea')\n      textarea.textContent = text\n      textarea.style.position = 'fixed' // Prevent scrolling to bottom of page in Microsoft Edge.\n      document.body.appendChild(textarea)\n      textarea.select()\n      try {\n        return document.execCommand('copy') // Security exception may be thrown by some browsers.\n      } catch (ex) {\n        // eslint-disable-next-line no-console\n        console.warn('Copy to clipboard failed.', ex)\n        return false\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    }\n  },\n\n  /**\n   * Get the current browser size width.\n   *\n   * @returns {number}\n   */\n  getBrowserWidth() {\n    if (self.innerWidth) {\n      return self.innerWidth\n    }\n    if (document.documentElement && document.documentElement.clientWidth) {\n      return document.documentElement.clientWidth\n    }\n    if (document.body) {\n      return document.body.clientWidth\n    }\n  },\n\n  /**\n   * Get human readable time by convert seconds into hours, minutes, seconds.\n   *\n   * @param   {Number} seconds\n   * @returns {string}\n   */\n  getReadableTime: seconds =>\n    `${Math.floor(seconds / 3600)}h ${Math.floor(seconds / 60) % 60}m ${Math.round(seconds) % 60}s`,\n\n  /**\n   * Returns true if the given address is a valid IPv4 address\n   * @param {string} address IPv4 address\n   * @param {boolean} withCIDR true if address includes a CIDR range. i.e. 1.1.1.1/24\n   * @returns\n   */\n  isIPv4AddressValid(address, withCIDR = false) {\n    if (!address) return false\n    if (withCIDR) {\n      const cidrV4Regex =\n        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$/\n      return cidrV4Regex.test(address)\n    }\n    const ipV4Regex = /^(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$/\n    return ipV4Regex.test(address)\n  },\n\n  /**\n   * Returns true if the given address is a valid IPv6 address\n   * @param {string} address IPv6 address\n   * @param {boolean} withCIDR true if address includes a CIDR range. i.e. 2001:0db8:85a3:0000:0000:8a2e:0370:7334/24\n   * @returns\n   */\n  isIPv6AddressValid(address, withCIDR = false) {\n    if (!address) return false\n    if (withCIDR) {\n      const cidrV6Regex =\n        /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])){1}$/\n      return cidrV6Regex.test(address)\n    }\n    const ipV6Regex =\n      /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/\n    return ipV6Regex.test(address)\n  },\n\n  /**\n   * Returns true if the IPv4 range is valid\n   * @param {string} rangeStart valid IPv4 address, start of the IP range\n   * @param {string} rangeEnd valid IPv address, end of the IP range\n   * @returns\n   */\n  isIPv4RangeValid(rangeStart, rangeEnd) {\n    const start = this.ipv4ToLong(rangeStart)\n    const end = this.ipv4ToLong(rangeEnd)\n    return end > start\n  },\n\n  /**\n   * Returns true if the IPv6 range is valid\n   * @param {string} rangeStart valid IPv6 address, start of the IP range\n   * @param {string} rangeEnd valid IPv6 address, end of the IP range\n   * @returns\n   */\n  isIPv6RangeValid(rangeStart, rangeEnd) {\n    const start = ip6.normalize(rangeStart).replace(/:/g, '')\n    const end = ip6.normalize(rangeEnd).replace(/:/g, '')\n    return end > start\n  },\n\n  ipv4ToLong(address) {\n    const parts = address.split('.')\n    return parts[0] * 16777216 + parts[1] * 65536 + parts[2] * 256 + parts[3] * 1\n  },\n\n  /**\n   * Convert an ip6 address to a javascript BigInt type.\n   *\n   * @param address\n   * @returns {bigint}\n   */\n  ipv6ToBigInt(address) {\n    let binaryString = '0b'\n    ip6\n      .normalize(address)\n      .split(':')\n      .forEach(hextet => (binaryString += parseInt(hextet, 16).toString(2).padStart(16, '0')))\n\n    return BigInt(binaryString)\n  },\n\n  /**\n   * Convert any ip address (ipv4 or ipv6) to a javascript BigInt type.\n   *\n   * @param address\n   * @returns {bigint}\n   */\n  ipAnyToBigInt(address) {\n    // try to convert ip4\n    if (this.isIPv4AddressValid(address)) {\n      return BigInt(this.ipv4ToLong(address))\n    }\n\n    // try to convert ip6, normalize first\n    if (this.isIPv6AddressValid(address)) {\n      return this.ipv6ToBigInt(address)\n    }\n\n    return BigInt(0)\n  },\n\n  /**\n   * Compare any ip address (ipv4 or ipv6) string, returns 1, 0, or -1.  Used for sorting.\n   *\n   * @param   {string} a\n   * @param   {string} b\n   * @returns {number}\n   */\n  compareIpAny(a, b) {\n    a = this.ipAnyToBigInt(this.getIpForSorting(a))\n    b = this.ipAnyToBigInt(this.getIpForSorting(b))\n\n    return a === b ? 0 : a > b ? 1 : -1\n  },\n\n  /**\n   * Compare two time intervals, composed of a time and unit, returns 1, 0, or -1. Used for sorting in dynamic blocklists' \"Polling Interval\" column.\n   *\n   * @param {number} aTime The count of units (as in A hours)\n   * @param {string} aUnit The unit (days or minutes)\n   * @param {number} bTime The count of units (as in B hours)\n   * @param {string} bUnit The unit (days or minutes)\n   * @returns {number}\n   */\n  compareTimeIntervals(aTime, aUnit, bTime, bUnit) {\n    // NOTE: only have to use English here, under the hood is always English (and plural)\n    const unitsToSeconds = {\n      'minutes': 60,\n      'hours': 60 * 60,\n      'days': 60 * 60 * 24,\n      'months': 60 * 60 * 24 * 31,\n    }\n    const a = aTime * unitsToSeconds[aUnit.toLowerCase()]\n    const b = bTime * unitsToSeconds[bUnit.toLowerCase()]\n    return a === b ? 0 : a > b ? 1 : -1\n  },\n\n  /**\n   * Returns true if the given hostname address is valid\n   * @param {string}} address\n   * @returns\n   */\n  isHostnameValid(address) {\n    const hostnameRegex =\n      /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/i\n    return hostnameRegex.test(address)\n  },\n\n  /**\n   * returns langdebug flag based on query string and local storage\n   * @returns {boolean} true/false if debugging is enabled\n   */\n  langDebug() {\n    // expects .../some/uri?langdebug=true\n    const uri = window.location.search.substring(1)\n    const params = new URLSearchParams(uri)\n    if (params.has('langdebug')) {\n      if (params.get('langdebug') === 'true') {\n        // add langdebug to local storage\n        window.localStorage.setItem('langdebug', true)\n      } else {\n        // remove langdebug from local storage\n        window.localStorage.removeItem('langdebug')\n      }\n    }\n    // return current value\n    return window.localStorage.getItem('langdebug')\n  },\n\n  // possible comparison operators with the operator as the key, and the translation key as the value\n  operators: {\n    '==': 'is',\n    '!=': 'is_not',\n    '>': 'greater_than',\n    '<': 'less_than',\n    '>=': 'greater_or_equal',\n    '<=': 'less_or_equal',\n  },\n\n  // ISO-3166 alpha2 country codes as listed on http://www.geonames.org/countries/\n  country_codes: {\n    'AD': 'Andorra',\n    'AE': 'United Arab Emirates',\n    'AF': 'Afghanistan',\n    'AG': 'Antigua and Barbuda',\n    'AI': 'Anguilla',\n    'AL': 'Albania',\n    'AM': 'Armenia',\n    'AO': 'Angola',\n    'AQ': 'Antarctica',\n    'AR': 'Argentina',\n    'AS': 'American Samoa',\n    'AT': 'Austria',\n    'AU': 'Australia',\n    'AW': 'Aruba',\n    'AX': 'Åland',\n    'AZ': 'Azerbaijan',\n    'BA': 'Bosnia and Herzegovina',\n    'BB': 'Barbados',\n    'BD': 'Bangladesh',\n    'BE': 'Belgium',\n    'BF': 'Burkina Faso',\n    'BG': 'Bulgaria',\n    'BH': 'Bahrain',\n    'BI': 'Burundi',\n    'BJ': 'Benin',\n    'BL': 'Saint Barthélemy',\n    'BM': 'Bermuda',\n    'BN': 'Brunei',\n    'BO': 'Bolivia',\n    'BQ': 'Bonaire, Sint Eustatius, and Saba',\n    'BR': 'Brazil',\n    'BS': 'Bahamas',\n    'BT': 'Bhutan',\n    'BV': 'Bouvet Island',\n    'BW': 'Botswana',\n    'BY': 'Belarus',\n    'BZ': 'Belize',\n    'CA': 'Canada',\n    'CC': 'Cocos (Keeling) Islands',\n    'CD': 'DR Congo',\n    'CF': 'Central African Republic',\n    'CG': 'Congo Republic',\n    'CH': 'Switzerland',\n    'CI': 'Ivory Coast',\n    'CK': 'Cook Islands',\n    'CL': 'Chile',\n    'CM': 'Cameroon',\n    'CN': 'China',\n    'CO': 'Colombia',\n    'CR': 'Costa Rica',\n    'CU': 'Cuba',\n    'CV': 'Cabo Verde',\n    'CW': 'Curaçao',\n    'CX': 'Christmas Island',\n    'CY': 'Cyprus',\n    'CZ': 'Czechia',\n    'DE': 'Germany',\n    'DJ': 'Djibouti',\n    'DK': 'Denmark',\n    'DM': 'Dominica',\n    'DO': 'Dominican Republic',\n    'DZ': 'Algeria',\n    'EC': 'Ecuador',\n    'EE': 'Estonia',\n    'EG': 'Egypt',\n    'EH': 'Western Sahara',\n    'ER': 'Eritrea',\n    'ES': 'Spain',\n    'ET': 'Ethiopia',\n    'FI': 'Finland',\n    'FJ': 'Fiji',\n    'FK': 'Falkland Islands',\n    'FM': 'Micronesia',\n    'FO': 'Faroe Islands',\n    'FR': 'France',\n    'GA': 'Gabon',\n    'GB': 'United Kingdom',\n    'GD': 'Grenada',\n    'GE': 'Georgia',\n    'GF': 'French Guiana',\n    'GG': 'Guernsey',\n    'GH': 'Ghana',\n    'GI': 'Gibraltar',\n    'GL': 'Greenland',\n    'GM': 'The Gambia',\n    'GN': 'Guinea',\n    'GP': 'Guadeloupe',\n    'GQ': 'Equatorial Guinea',\n    'GR': 'Greece',\n    'GS': 'South Georgia and South Sandwich Islands',\n    'GT': 'Guatemala',\n    'GU': 'Guam',\n    'GW': 'Guinea-Bissau',\n    'GY': 'Guyana',\n    'HK': 'Hong Kong',\n    'HM': 'Heard and McDonald Islands',\n    'HN': 'Honduras',\n    'HR': 'Croatia',\n    'HT': 'Haiti',\n    'HU': 'Hungary',\n    'ID': 'Indonesia',\n    'IE': 'Ireland',\n    'IL': 'Israel',\n    'IM': 'Isle of Man',\n    'IN': 'India',\n    'IO': 'British Indian Ocean Territory',\n    'IQ': 'Iraq',\n    'IR': 'Iran',\n    'IS': 'Iceland',\n    'IT': 'Italy',\n    'JE': 'Jersey',\n    'JM': 'Jamaica',\n    'JO': 'Jordan',\n    'JP': 'Japan',\n    'KE': 'Kenya',\n    'KG': 'Kyrgyzstan',\n    'KH': 'Cambodia',\n    'KI': 'Kiribati',\n    'KM': 'Comoros',\n    'KN': 'St Kitts and Nevis',\n    'KP': 'North Korea',\n    'KR': 'South Korea',\n    'KW': 'Kuwait',\n    'KY': 'Cayman Islands',\n    'KZ': 'Kazakhstan',\n    'LA': 'Laos',\n    'LB': 'Lebanon',\n    'LC': 'Saint Lucia',\n    'LI': 'Liechtenstein',\n    'LK': 'Sri Lanka',\n    'LR': 'Liberia',\n    'LS': 'Lesotho',\n    'LT': 'Lithuania',\n    'LU': 'Luxembourg',\n    'LV': 'Latvia',\n    'LY': 'Libya',\n    'MA': 'Morocco',\n    'MC': 'Monaco',\n    'MD': 'Moldova',\n    'ME': 'Montenegro',\n    'MF': 'Saint Martin',\n    'MG': 'Madagascar',\n    'MH': 'Marshall Islands',\n    'MK': 'North Macedonia',\n    'ML': 'Mali',\n    'MM': 'Myanmar',\n    'MN': 'Mongolia',\n    'MO': 'Macao',\n    'MP': 'Northern Mariana Islands',\n    'MQ': 'Martinique',\n    'MR': 'Mauritania',\n    'MS': 'Montserrat',\n    'MT': 'Malta',\n    'MU': 'Mauritius',\n    'MV': 'Maldives',\n    'MW': 'Malawi',\n    'MX': 'Mexico',\n    'MY': 'Malaysia',\n    'MZ': 'Mozambique',\n    'NA': 'Namibia',\n    'NC': 'New Caledonia',\n    'NE': 'Niger',\n    'NF': 'Norfolk Island',\n    'NG': 'Nigeria',\n    'NI': 'Nicaragua',\n    'NL': 'Netherlands',\n    'NO': 'Norway',\n    'NP': 'Nepal',\n    'NR': 'Nauru',\n    'NU': 'Niue',\n    'NZ': 'New Zealand',\n    'OM': 'Oman',\n    'PA': 'Panama',\n    'PE': 'Peru',\n    'PF': 'French Polynesia',\n    'PG': 'Papua New Guinea',\n    'PH': 'Philippines',\n    'PK': 'Pakistan',\n    'PL': 'Poland',\n    'PM': 'Saint Pierre and Miquelon',\n    'PN': 'Pitcairn Islands',\n    'PR': 'Puerto Rico',\n    'PS': 'Palestine',\n    'PT': 'Portugal',\n    'PW': 'Palau',\n    'PY': 'Paraguay',\n    'QA': 'Qatar',\n    'RE': 'Réunion',\n    'RO': 'Romania',\n    'RS': 'Serbia',\n    'RU': 'Russia',\n    'RW': 'Rwanda',\n    'SA': 'Saudi Arabia',\n    'SB': 'Solomon Islands',\n    'SC': 'Seychelles',\n    'SD': 'Sudan',\n    'SE': 'Sweden',\n    'SG': 'Singapore',\n    'SH': 'Saint Helena',\n    'SI': 'Slovenia',\n    'SJ': 'Svalbard and Jan Mayen',\n    'SK': 'Slovakia',\n    'SL': 'Sierra Leone',\n    'SM': 'San Marino',\n    'SN': 'Senegal',\n    'SO': 'Somalia',\n    'SR': 'Suriname',\n    'SS': 'South Sudan',\n    'ST': 'São Tomé and Príncipe',\n    'SV': 'El Salvador',\n    'SX': 'Sint Maarten',\n    'SY': 'Syria',\n    'SZ': 'Eswatini',\n    'TC': 'Turks and Caicos Islands',\n    'TD': 'Chad',\n    'TF': 'French Southern Territories',\n    'TG': 'Togo',\n    'TH': 'Thailand',\n    'TJ': 'Tajikistan',\n    'TK': 'Tokelau',\n    'TL': 'Timor-Leste',\n    'TM': 'Turkmenistan',\n    'TN': 'Tunisia',\n    'TO': 'Tonga',\n    'TR': 'Turkey',\n    'TT': 'Trinidad and Tobago',\n    'TV': 'Tuvalu',\n    'TW': 'Taiwan',\n    'TZ': 'Tanzania',\n    'UA': 'Ukraine',\n    'UG': 'Uganda',\n    'UM': 'U.S. Outlying Islands',\n    'US': 'United States',\n    'UY': 'Uruguay',\n    'UZ': 'Uzbekistan',\n    'VA': 'Vatican City',\n    'VC': 'St Vincent and Grenadines',\n    'VE': 'Venezuela',\n    'VG': 'British Virgin Islands',\n    'VI': 'U.S. Virgin Islands',\n    'VN': 'Vietnam',\n    'VU': 'Vanuatu',\n    'WF': 'Wallis and Futuna',\n    'WS': 'Samoa',\n    'XK': 'Kosovo',\n    'YE': 'Yemen',\n    'YT': 'Mayotte',\n    'ZA': 'South Africa',\n    'ZM': 'Zambia',\n    'ZW': 'Zimbabwe',\n    'XL': 'Local',\n    'XU': 'Unknown',\n  },\n\n  /**\n   * Method to get the a query string parameter from a URL name\n   * From: http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n   * @param name - name of the query parameter to get\n   * @param url - url. If not set, will use current windows's URL\n   * @returns {*} - parameter value if found or null\n   */\n  getUrlParameterByName(name, url) {\n    if (!url) {\n      url = window.location.href\n    }\n    name = name.replace(/[[\\]]/g, '\\\\$&')\n    const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)')\n    const results = regex.exec(url)\n\n    if (!results) return null\n\n    if (!results[2]) return ''\n\n    return decodeURIComponent(results[2])\n  },\n\n  /**\n   *\n   * @returns generates guids\n   */\n  uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n      (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16),\n    )\n  },\n\n  /**\n   * validates if an email address is valid or not\n   *\n   * @param email - email to validate\n   * @return - boolean\n   */\n  validateEmail(email) {\n    const emailRegex = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)+$/\n    return emailRegex.test(email)\n  },\n\n  /**\n   * Used to validate an object to a schema, primarily used with importing in ME policy templates\n   *\n   * @param {Object} testObj\n   * @param {Object} schema\n   * @returns {boolean}\n   */\n  validateSchema(testObj, schema) {\n    const result = jsonschema.validate(testObj, schema)\n    return result.errors.length === 0\n  },\n\n  /**\n   * Downloads the dynamic list content as CSV\n   * @param {String} fileName - the dynamic list file name to be saved on disk\n   * @param {String} content - the downloaded response content\n   */\n  processDynamicListDownload(fileName, content) {\n    const lines = content.split('\\n')\n    const csv = lines.map(ip => `\"${ip}\"`).join('\\n')\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n\n    const el = document.createElement('a')\n    el.setAttribute('href', url)\n    el.setAttribute('download', fileName)\n    el.style.display = 'none'\n    document.body.appendChild(el)\n    el.click()\n    URL.revokeObjectURL(url)\n    document.body.removeChild(el)\n  },\n\n  /**\n   * return uptime into days, hours and minutes format\n   * @param {String} time - time to be converted\n   */\n  formatUptime(time) {\n    const numdays = Math.floor((time % 31536000) / 86400)\n    const numhours = Math.floor(((time % 31536000) % 86400) / 3600)\n    const numminutes = Math.floor((((time % 31536000) % 86400) % 3600) / 60)\n    let uptime = ''\n\n    if (numdays > 0) {\n      uptime += numdays + 'd '\n    }\n    if (numhours > 0) {\n      uptime += numhours + 'h '\n    }\n    if (numminutes > 0) {\n      uptime += numminutes + 'm'\n    }\n    return uptime\n  },\n\n  /**\n   * Get only the ip address from ip string\n   *  e.g: for 1.1.1.1/23 will return 1.1.1.1\n   *       for 2.2.2.2, 3.3.3.3/23 or 2.2.2.2/10, 4.4.4.4 will return 2.2.2.2\n   *\n   * @param   {string} ip\n   * @returns {string}\n   */\n  getIpForSorting(ip) {\n    if (!ip) return ip\n\n    if (ip.includes(',')) {\n      // If the ip string contains ',', keep only what's in front of it\n      ip = ip.split(',')[0]\n    }\n    if (ip.includes('-')) {\n      // If the ip string contains '-', keep only what's in front of it\n      ip = ip.split('-')[0]\n    }\n    if (ip.includes('/')) {\n      // If the ip string contains '/', keep only what's in front of it\n      ip = ip.split('/')[0]\n    }\n\n    return ip\n  },\n\n  /**\n   * Sort any two strings alpha numerically\n   *\n   * @param   {string} valueA\n   * @param   {string} valueB\n   * @param   {string} locale\n   * @param   {?boolean} accentedCompare\n   * @returns {number}\n   */\n  sortAlphaNumerically(valueA, valueB, locale, accentedCompare) {\n    if (typeof valueA === 'string') {\n      try {\n        // using local compare also allows chinese comparisons\n        return valueA.localeCompare(valueB, locale, { numeric: true, sensitivity: 'base' })\n      } catch (e) {\n        // if something wrong with localeCompare, e.g. not supported\n        // by browser, then just continue with the quick one\n        return valueA > valueB ? 1 : valueA < valueB ? -1 : 0\n      }\n    }\n\n    // use ag-grid default comparator\n    return agGridUtils.defaultComparator(valueA, valueB, accentedCompare)\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}