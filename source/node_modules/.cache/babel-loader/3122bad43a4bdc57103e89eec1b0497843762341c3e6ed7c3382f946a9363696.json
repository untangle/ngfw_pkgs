{"ast":null,"code":"import { VContainer, VDivider, VSwitch, VCard, VBtn, VBtnToggle, VTabItem, VTabsItems, VSpacer } from 'vuetify/lib';\nimport settingsMixin from '../settingsMixin';\nimport defaults from './defaults';\nimport schema from './schema';\nimport TabCaps from './components/TabCaps.vue';\nimport TabCapRules from './components/TabCapRules.vue';\nexport default {\n  components: {\n    VContainer: VContainer,\n    VDivider: VDivider,\n    VSwitch: VSwitch,\n    VCard: VCard,\n    VBtn: VBtn,\n    VBtnToggle: VBtnToggle,\n    VTabItem: VTabItem,\n    VTabsItems: VTabsItems,\n    VSpacer: VSpacer,\n    TabCaps: TabCaps,\n    TabCapRules: TabCapRules\n  },\n  // add the generic settings mixin\n  mixins: [settingsMixin],\n  // attach `defaults` and `schema` to the component $options as no reactive data\n  defaults: defaults,\n  schema: schema,\n  props: {\n    showRules: {\n      type: Boolean,\n      \"default\": true\n    },\n    zoneData: {\n      type: Object,\n      \"default\": function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      selectedTab: 'cp_settings'\n    };\n  },\n  computed: {\n    tabs: function tabs() {\n      return ['cp_settings', 'cp_rules'];\n    }\n  },\n  watch: {\n    selectedTab: function selectedTab() {\n      // when switching from caps reset its view\n      if (this.$refs.cpRules) this.$refs.cpRules.reset();\n    }\n  },\n  methods: {\n    updateCPSettingsRule: function updateCPSettingsRule(data) {\n      this.settingsCopy.rules = data;\n    }\n  }\n};","map":{"version":3,"names":["VContainer","VDivider","VSwitch","VCard","VBtn","VBtnToggle","VTabItem","VTabsItems","VSpacer","settingsMixin","defaults","schema","TabCaps","TabCapRules","components","mixins","props","showRules","type","Boolean","zoneData","Object","default","data","selectedTab","computed","tabs","watch","$refs","cpRules","reset","methods","updateCPSettingsRule","settingsCopy","rules"],"sources":["node_modules/vuntangle/src/shared/SettingsCaptivePortal/Main.vue"],"sourcesContent":["<template>\n  <v-container\n    :fluid=\"classicView ? true : false\"\n    :class=\"`${classicView ? 'pa-4 ' : ''}shared-cmp d-flex flex-column fill-height align-stretch ${\n      disabled ? 'disabled' : ''\n    }`\"\n  >\n    <div class=\"d-flex flex-column fill-height\">\n      <div class=\"d-flex align-center\">\n        <h1 v-if=\"classicView\" class=\"headline\">{{ $t('captive_portal') }}</h1>\n        <h2 v-else class=\"font-weight-light\">{{ $t('captive_portal') }}</h2>\n        <v-spacer />\n        <slot name=\"actions\" :new-settings=\"settingsCopy\" :is-dirty=\"isDirty\" :defaults=\"$options.defaults\" />\n      </div>\n\n      <v-divider class=\"my-2\" />\n      <p v-html=\"$t('captive_portal_description')\" />\n      <u-section v-if=\"!!$slots['extra-fields']\">\n        <slot name=\"extra-fields\" />\n      </u-section>\n      <component :is=\"!$slots['extra-fields'] ? 'div' : 'u-section'\" class=\"d-flex flex-column fill-height\">\n        <div class=\"d-flex\">\n          <v-switch\n            v-model=\"settingsCopy.enabled\"\n            dense\n            inset\n            hide-details\n            :label=\"$t('enabled')\"\n            :class=\"(!showRules ? 'mt-0 mb-4 ' : '') + 'mr-8'\"\n          />\n        </div>\n        <div v-if=\"showRules\">\n          <v-card :disabled=\"disabled\" flat color=\"transparent\" class=\"d-flex flex-column fill-height\">\n            <div class=\"d-flex flex-row align-center my-4\">\n              <v-divider />\n              <v-btn-toggle v-model=\"selectedTab\" dense rounded mandatory>\n                <v-btn\n                  v-for=\"tab in tabs\"\n                  :key=\"tab\"\n                  :value=\"tab\"\n                  :class=\"`${tab === selectedTab ? 'white--text' : ''} font-weight-bold px-8`\"\n                  active-class=\"primary\"\n                  min-width=\"150\"\n                >\n                  {{ $t(tab) }}\n                </v-btn>\n              </v-btn-toggle>\n              <v-divider />\n            </div>\n            <v-tabs-items v-model=\"selectedTab\" class=\"cp-tab-items\">\n              <v-tab-item\n                class=\"cp-tab-captiveport\"\n                value=\"cp_settings\"\n                :transition=\"false\"\n                :reverse-transition=\"false\"\n              >\n                <tab-caps :settings=\"settingsCopy\" />\n              </v-tab-item>\n              <v-tab-item class=\"cp-tab-rules\" value=\"cp_rules\" :transition=\"false\" :reverse-transition=\"false\">\n                <tab-cap-rules\n                  ref=\"cpRules\"\n                  :cp-rules=\"settingsCopy.rules\"\n                  :zone-data=\"zoneData.interfaces\"\n                  @updateCPSettingsRule=\"updateCPSettingsRule\"\n                />\n              </v-tab-item>\n            </v-tabs-items>\n          </v-card>\n        </div>\n        <div v-else><tab-caps :settings=\"settingsCopy\" /></div>\n      </component>\n    </div>\n  </v-container>\n</template>\n<script>\n  import { VContainer, VDivider, VSwitch, VCard, VBtn, VBtnToggle, VTabItem, VTabsItems, VSpacer } from 'vuetify/lib'\n  import settingsMixin from '../settingsMixin'\n  import defaults from './defaults'\n  import schema from './schema'\n  import TabCaps from './components/TabCaps.vue'\n  import TabCapRules from './components/TabCapRules.vue'\n\n  export default {\n    components: {\n      VContainer,\n      VDivider,\n      VSwitch,\n      VCard,\n      VBtn,\n      VBtnToggle,\n      VTabItem,\n      VTabsItems,\n      VSpacer,\n\n      TabCaps,\n      TabCapRules,\n    },\n\n    // add the generic settings mixin\n    mixins: [settingsMixin],\n\n    // attach `defaults` and `schema` to the component $options as no reactive data\n    defaults,\n    schema,\n    props: {\n      showRules: {\n        type: Boolean,\n        default: true,\n      },\n      zoneData: {\n        type: Object,\n        default: () => {},\n      },\n    },\n    data() {\n      return {\n        selectedTab: 'cp_settings',\n      }\n    },\n    computed: {\n      tabs() {\n        return ['cp_settings', 'cp_rules']\n      },\n    },\n    watch: {\n      selectedTab() {\n        // when switching from caps reset its view\n        if (this.$refs.cpRules) this.$refs.cpRules.reset()\n      },\n    },\n    methods: {\n      updateCPSettingsRule(data) {\n        this.settingsCopy.rules = data\n      },\n    },\n  }\n</script>\n<style>\n  .cp-tab-items {\n    overflow: visible;\n    background-color: transparent;\n  }\n\n  .cp-tab-items,\n  .cp-tab-rules,\n  .cp-tab-captiveport {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n  }\n\n  .cp-tab-items .v-window__container {\n    flex: 1;\n  }\n</style>\n"],"mappings":"AA2EA,SAAAA,UAAA,EAAAC,QAAA,EAAAC,OAAA,EAAAC,KAAA,EAAAC,IAAA,EAAAC,UAAA,EAAAC,QAAA,EAAAC,UAAA,EAAAC,OAAA;AACA,OAAAC,aAAA;AACA,OAAAC,QAAA;AACA,OAAAC,MAAA;AACA,OAAAC,OAAA;AACA,OAAAC,WAAA;AAEA;EACAC,UAAA;IACAd,UAAA,EAAAA,UAAA;IACAC,QAAA,EAAAA,QAAA;IACAC,OAAA,EAAAA,OAAA;IACAC,KAAA,EAAAA,KAAA;IACAC,IAAA,EAAAA,IAAA;IACAC,UAAA,EAAAA,UAAA;IACAC,QAAA,EAAAA,QAAA;IACAC,UAAA,EAAAA,UAAA;IACAC,OAAA,EAAAA,OAAA;IAEAI,OAAA,EAAAA,OAAA;IACAC,WAAA,EAAAA;EACA;EAEA;EACAE,MAAA,GAAAN,aAAA;EAEA;EACAC,QAAA,EAAAA,QAAA;EACAC,MAAA,EAAAA,MAAA;EACAK,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,OAAA;MACA;IACA;IACAC,QAAA;MACAF,IAAA,EAAAG,MAAA;MACA,oBAAAC,SAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACAC,IAAA,WAAAA,KAAA;MACA;IACA;EACA;EACAC,KAAA;IACAH,WAAA,WAAAA,YAAA;MACA;MACA,SAAAI,KAAA,CAAAC,OAAA,OAAAD,KAAA,CAAAC,OAAA,CAAAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,oBAAA,WAAAA,qBAAAT,IAAA;MACA,KAAAU,YAAA,CAAAC,KAAA,GAAAX,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}