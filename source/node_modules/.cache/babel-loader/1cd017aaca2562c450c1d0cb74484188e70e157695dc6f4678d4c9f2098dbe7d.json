{"ast":null,"code":"import _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { VRangeSlider } from 'vuetify/lib';\nimport dates from '../../../plugins/dates';\nexport default {\n  components: {\n    VRangeSlider: VRangeSlider\n  },\n  inject: ['$boxSettings', '$timeRange'],\n  data: function data() {\n    return {\n      /**\n       * Initial period range of 24 hours as usable value for VRangeSlider\n       */\n      period: [-24, 0],\n      /**\n       * Temporary input period used just to display range during sliders dragging\n       */\n      inputPeriod: undefined\n    };\n  },\n  computed: {\n    /**\n     * Returns the time range as passed through injected param\n     * of the form `{ period: [-24, 0] }`\n     * @param {Object} vm\n     * @param {Object} vm.$timeRange - the injected timerange value\n     * @returns {Object}\n     */\n    timeRange: function timeRange(_ref) {\n      var $timeRange = _ref.$timeRange;\n      return $timeRange();\n    },\n    /**\n     * Returns timezone based start/end dates plus the timezone offset from the box\n     * @param {Object} vm\n     * @param {Object} vm.timeRange - the time range period\n     * @returns {Object} - an object such { start: 'Nov 16 05:19 PM', end: 'Nov 17 05:19 PM', offset: 'UTC+04:00'}\n     */\n    time: function time(_ref2) {\n      var timeRange = _ref2.timeRange;\n      var now = Date.now();\n      var startTimestamp = now - Math.abs(timeRange.period[0]) * 60 * 60 * 1000;\n      var start = dates.formatDateFromApi(startTimestamp);\n      var endTimestamp = now - Math.abs(timeRange.period[1]) * 60 * 60 * 1000;\n      var end = dates.formatDateFromApi(endTimestamp);\n      return {\n        start: start,\n        end: end\n      };\n    },\n    /**\n     * Returns an array of tick labels used by range slider to show the start/end dates and offset\n     * @param {Object} vm\n     * @param {Object} vm.time - the labels to show start/end, offset\n     * @returns {Array} - an array of 25 items containing the tick labels for first/middle/last ones\n     */\n    ticksLabels: function ticksLabels(_ref3) {\n      var time = _ref3.time;\n      // having a step of 1 in a range of [0, 24] ticks, first is generated an array with 25 null values\n      var labels = _toConsumableArray(Array(25).keys()).map(function () {\n        return null;\n      });\n      labels[0] = time.start; // first tick label having start date\n      labels[12] = time.offset; // middle tick label having timezone offset\n      labels[24] = time.end; // last tick label having end date\n      return labels;\n    }\n  },\n  methods: {\n    /**\n     * Sets the temporary period shown while dragging sliders\n     * @param {Array} event - the event returned by the range slider\n     * @returns {undefined}\n     */\n    onInput: function onInput(event) {\n      this.inputPeriod = event;\n    },\n    /**\n     * Sets the new time range period and clears out the temporary one\n     * @param {Array} event - the event returned by the range slider on slide move end, e.g. [-12, -5]\n     * @returns {undefined}\n     */\n    onSlideEnd: function onSlideEnd(event) {\n      this.inputPeriod = undefined;\n      this.timeRange.period = event;\n    }\n  }\n};","map":{"version":3,"names":["VRangeSlider","dates","components","inject","data","period","inputPeriod","undefined","computed","timeRange","_ref","$timeRange","time","_ref2","now","Date","startTimestamp","Math","abs","start","formatDateFromApi","endTimestamp","end","ticksLabels","_ref3","labels","_toConsumableArray","Array","keys","map","offset","methods","onInput","event","onSlideEnd"],"sources":["node_modules/vuntangle/src/shared/Reports/components/TimeRange.vue"],"sourcesContent":["<template>\n  <v-range-slider\n    :value=\"period\"\n    min=\"-24\"\n    max=\"0\"\n    step=\"1\"\n    hide-details\n    :ticks=\"false\"\n    tick-size=\"0\"\n    :tick-labels=\"ticksLabels\"\n    class=\"flex-lg-grow-0 flex-shrink-0 text-caption mb-4\"\n    style=\"min-width: 400px\"\n    @input=\"onInput\"\n    @end=\"onSlideEnd\"\n  >\n  </v-range-slider>\n</template>\n<script>\n  import { VRangeSlider } from 'vuetify/lib'\n  import dates from '../../../plugins/dates'\n\n  export default {\n    components: { VRangeSlider },\n\n    inject: ['$boxSettings', '$timeRange'],\n\n    data() {\n      return {\n        /**\n         * Initial period range of 24 hours as usable value for VRangeSlider\n         */\n        period: [-24, 0],\n        /**\n         * Temporary input period used just to display range during sliders dragging\n         */\n        inputPeriod: undefined,\n      }\n    },\n\n    computed: {\n      /**\n       * Returns the time range as passed through injected param\n       * of the form `{ period: [-24, 0] }`\n       * @param {Object} vm\n       * @param {Object} vm.$timeRange - the injected timerange value\n       * @returns {Object}\n       */\n      timeRange: ({ $timeRange }) => $timeRange(),\n\n      /**\n       * Returns timezone based start/end dates plus the timezone offset from the box\n       * @param {Object} vm\n       * @param {Object} vm.timeRange - the time range period\n       * @returns {Object} - an object such { start: 'Nov 16 05:19 PM', end: 'Nov 17 05:19 PM', offset: 'UTC+04:00'}\n       */\n      time: ({ timeRange }) => {\n        const now = Date.now()\n        const startTimestamp = now - Math.abs(timeRange.period[0]) * 60 * 60 * 1000\n        const start = dates.formatDateFromApi(startTimestamp)\n        const endTimestamp = now - Math.abs(timeRange.period[1]) * 60 * 60 * 1000\n        const end = dates.formatDateFromApi(endTimestamp)\n        return { start, end }\n      },\n\n      /**\n       * Returns an array of tick labels used by range slider to show the start/end dates and offset\n       * @param {Object} vm\n       * @param {Object} vm.time - the labels to show start/end, offset\n       * @returns {Array} - an array of 25 items containing the tick labels for first/middle/last ones\n       */\n      ticksLabels: ({ time }) => {\n        // having a step of 1 in a range of [0, 24] ticks, first is generated an array with 25 null values\n        const labels = [...Array(25).keys()].map(() => null)\n        labels[0] = time.start // first tick label having start date\n        labels[12] = time.offset // middle tick label having timezone offset\n        labels[24] = time.end // last tick label having end date\n        return labels\n      },\n    },\n\n    methods: {\n      /**\n       * Sets the temporary period shown while dragging sliders\n       * @param {Array} event - the event returned by the range slider\n       * @returns {undefined}\n       */\n      onInput(event) {\n        this.inputPeriod = event\n      },\n\n      /**\n       * Sets the new time range period and clears out the temporary one\n       * @param {Array} event - the event returned by the range slider on slide move end, e.g. [-12, -5]\n       * @returns {undefined}\n       */\n      onSlideEnd(event) {\n        this.inputPeriod = undefined\n        this.timeRange.period = event\n      },\n    },\n  }\n</script>\n"],"mappings":";;;;;;AAkBA,SAAAA,YAAA;AACA,OAAAC,KAAA;AAEA;EACAC,UAAA;IAAAF,YAAA,EAAAA;EAAA;EAEAG,MAAA;EAEAC,IAAA,WAAAA,KAAA;IACA;MACA;AACA;AACA;MACAC,MAAA;MACA;AACA;AACA;MACAC,WAAA,EAAAC;IACA;EACA;EAEAC,QAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC,SAAA,WAAAA,UAAAC,IAAA;MAAA,IAAAC,UAAA,GAAAD,IAAA,CAAAC,UAAA;MAAA,OAAAA,UAAA;IAAA;IAEA;AACA;AACA;AACA;AACA;AACA;IACAC,IAAA,WAAAA,KAAAC,KAAA;MAAA,IAAAJ,SAAA,GAAAI,KAAA,CAAAJ,SAAA;MACA,IAAAK,GAAA,GAAAC,IAAA,CAAAD,GAAA;MACA,IAAAE,cAAA,GAAAF,GAAA,GAAAG,IAAA,CAAAC,GAAA,CAAAT,SAAA,CAAAJ,MAAA;MACA,IAAAc,KAAA,GAAAlB,KAAA,CAAAmB,iBAAA,CAAAJ,cAAA;MACA,IAAAK,YAAA,GAAAP,GAAA,GAAAG,IAAA,CAAAC,GAAA,CAAAT,SAAA,CAAAJ,MAAA;MACA,IAAAiB,GAAA,GAAArB,KAAA,CAAAmB,iBAAA,CAAAC,YAAA;MACA;QAAAF,KAAA,EAAAA,KAAA;QAAAG,GAAA,EAAAA;MAAA;IACA;IAEA;AACA;AACA;AACA;AACA;AACA;IACAC,WAAA,WAAAA,YAAAC,KAAA;MAAA,IAAAZ,IAAA,GAAAY,KAAA,CAAAZ,IAAA;MACA;MACA,IAAAa,MAAA,GAAAC,kBAAA,CAAAC,KAAA,KAAAC,IAAA,IAAAC,GAAA;QAAA;MAAA;MACAJ,MAAA,MAAAb,IAAA,CAAAO,KAAA;MACAM,MAAA,OAAAb,IAAA,CAAAkB,MAAA;MACAL,MAAA,OAAAb,IAAA,CAAAU,GAAA;MACA,OAAAG,MAAA;IACA;EACA;EAEAM,OAAA;IACA;AACA;AACA;AACA;AACA;IACAC,OAAA,WAAAA,QAAAC,KAAA;MACA,KAAA3B,WAAA,GAAA2B,KAAA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC,UAAA,WAAAA,WAAAD,KAAA;MACA,KAAA3B,WAAA,GAAAC,SAAA;MACA,KAAAE,SAAA,CAAAJ,MAAA,GAAA4B,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}