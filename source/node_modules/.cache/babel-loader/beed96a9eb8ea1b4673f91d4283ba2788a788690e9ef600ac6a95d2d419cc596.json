{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { VRow, VCol, VCheckbox } from 'vuetify/lib';\nimport settingsMixin from '../settingsMixin';\nimport util from '../../plugins/util';\nimport USelect from '../../components/USelect';\nimport UTextField from '../../components/UTextField';\nimport { configurationDefaults as defaults } from './defaults';\nvar firstIpRegex = '^\\\\S{2,256}';\nvar everyIpRegex = '((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)+|(?:[a-f0-9:]+:+)+(?:[a-f0-9](?:(::)?))+)(?:\\\\/{1}\\\\d+|-((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)+|(?:[a-f0-9:]+:+)+(?:[a-f0-9](?:(::)?))+))?';\nvar customValue = 'custom'; // note: this is also used in the components above. But those are pre-render, so a naked string is required\n\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    VCheckbox: VCheckbox,\n    USelect: USelect,\n    UTextField: UTextField\n  },\n  defaults: defaults,\n  mixins: [settingsMixin],\n  data: function data() {\n    return {\n      customRegex: '',\n      selectedParse: firstIpRegex\n    };\n  },\n  computed: {\n    /** units for the polling interval */pollingUnits: function pollingUnits() {\n      return [{\n        text: this.$vuntangle.$tc('minutes', 2),\n        value: 'Minutes',\n        range: [15, 45]\n      }, {\n        text: this.$vuntangle.$tc('hours', 2),\n        value: 'Hours',\n        range: [1, 23]\n      }, {\n        text: this.$vuntangle.$t('days'),\n        value: 'Days',\n        range: [1, 30]\n      }, {\n        text: this.$vuntangle.$tc('months', 2),\n        value: 'Months',\n        range: [1, 12]\n      }];\n    },\n    /** computes the polling interval values based on unit range */\n    timeOptions: function timeOptions(_ref) {\n      var settingsCopy = _ref.settingsCopy,\n        pollingUnits = _ref.pollingUnits;\n      var unit = pollingUnits.find(function (unit) {\n        return unit.value === settingsCopy.pollingUnit;\n      });\n      var range = unit === null || unit === void 0 ? void 0 : unit.range;\n      if (!unit || !range) return [];\n      return Array.from({\n        length: range[1]\n      }, function (_, index) {\n        return range[0] + index;\n      });\n    },\n    /** Options for blocklist parsing */parsingOptions: function parsingOptions() {\n      return [{\n        text: this.$vuntangle.$t('dynamic_blocklist_first_ip_parse'),\n        value: firstIpRegex\n      }, {\n        text: this.$vuntangle.$t('dynamic_blocklist_every_ip_parse'),\n        value: everyIpRegex\n      }, {\n        text: this.$vuntangle.$t('dynamic_blocklist_custom_parse'),\n        value: customValue\n      }];\n    }\n  },\n  watch: {\n    selectedParse: {\n      handler: function handler(value) {\n        // when the user uses the drop-down and selects custom, we save custom regex into sync-settings. Otherwise we use a built-in\n        this.settingsCopy.parsingMethod = value === customValue ? this.customRegex : value;\n      }\n    },\n    customRegex: function customRegex(value) {\n      // when the user types in a custom regex, we make sure settingsCopy gets that value before saving\n      if (this.selectedParse === customValue) {\n        this.settingsCopy.parsingMethod = value;\n      }\n    },\n    settingsCopy: {\n      /** generates an UUID for new configurations, without it the configurations is not saved */handler: function handler(value) {\n        if (!value.id) this.settingsCopy.id = util.uuidv4();\n      },\n      immediate: true\n    }\n  },\n  created: function created() {\n    var _this = this;\n    if (this.parsingOptions.some(function (item) {\n      return item.value === _this.settingsCopy.parsingMethod;\n    })) {\n      // if settingsCopy matches one of the parsing options, then the drop-down will show that selection\n      this.selectedParse = this.settingsCopy.parsingMethod;\n    } else {\n      // if settingsCopy matches nothing, we have a custom regex (so show that in the options and text box instead)\n      this.selectedParse = customValue;\n      this.customRegex = this.settingsCopy.parsingMethod;\n    }\n  },\n  methods: {\n    // Dialog main action emitting updated settings\n    action: function action() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var isValid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this2.$refs.obs.validate();\n            case 2:\n              isValid = _context.sent;\n              if (isValid) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              _this2.$emit('update', _this2.settingsCopy);\n              _this2.$emit('close');\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","VCheckbox","settingsMixin","util","USelect","UTextField","configurationDefaults","defaults","firstIpRegex","everyIpRegex","customValue","components","mixins","data","customRegex","selectedParse","computed","pollingUnits","text","$vuntangle","$tc","value","range","$t","timeOptions","_ref","settingsCopy","unit","find","pollingUnit","Array","from","length","_","index","parsingOptions","watch","handler","parsingMethod","id","uuidv4","immediate","created","_this","some","item","methods","action","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isValid","wrap","_callee$","_context","prev","next","$refs","obs","validate","sent","abrupt","$emit","stop"],"sources":["node_modules/vuntangle/src/shared/SettingsDynamicBlockLists/DynamicBlockList.vue"],"sourcesContent":["<template>\n  <div v-if=\"settingsCopy\" class=\"py-2\">\n    <ValidationObserver ref=\"obs\">\n      <v-row align=\"center\">\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-text-field v-model=\"settingsCopy.name\" :label=\"$vuntangle.$t('name')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"auto\">\n          <v-checkbox v-model=\"settingsCopy.enabled\" :label=\"$vuntangle.$t('enabled')\" hide-details class=\"pa-0 ma-0\" />\n        </v-col>\n      </v-row>\n\n      <h4 class=\"my-4\">{{ $vuntangle.$t('polling_source') }}</h4>\n      <v-row align=\"center\">\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|url\">\n            <u-text-field v-model=\"settingsCopy.source\" :label=\"$vuntangle.$t('source_url')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"auto\">\n          <v-checkbox\n            v-model=\"settingsCopy.skipCertCheck\"\n            :label=\"$vuntangle.$t('ignore_ssl_cert_errors')\"\n            hide-details\n            class=\"pa-0 ma-0\"\n          />\n        </v-col>\n      </v-row>\n\n      <h4 class=\"my-4\">{{ $vuntangle.$t('polling_interval') }}</h4>\n      <v-row>\n        <v-col cols=\"4\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"settingsCopy.pollingUnit\"\n              :items=\"pollingUnits\"\n              :label=\"$vuntangle.$t('unit')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"2\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"settingsCopy.pollingTime\"\n              :items=\"timeOptions\"\n              :error-messages=\"errors\"\n              :label=\"$vuntangle.$t('value')\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <h4 class=\"my-4\">{{ $vuntangle.$t('parsing_method') }}</h4>\n      <v-row>\n        <v-col cols=\"6\">\n          <u-select v-model=\"selectedParse\" :items=\"parsingOptions\"> </u-select>\n        </v-col>\n        <v-col v-if=\"selectedParse === 'custom'\" cols=\"6\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|valid_regex\">\n            <u-text-field v-model=\"customRegex\" :error-messages=\"errors\" :label=\"$vuntangle.$t('custom_regex')\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n    </ValidationObserver>\n  </div>\n</template>\n<script>\n  import { VRow, VCol, VCheckbox } from 'vuetify/lib'\n  import settingsMixin from '../settingsMixin'\n  import util from '../../plugins/util'\n  import USelect from '../../components/USelect'\n  import UTextField from '../../components/UTextField'\n  import { configurationDefaults as defaults } from './defaults'\n\n  const firstIpRegex = '^\\\\S{2,256}'\n  const everyIpRegex =\n    '((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)+|(?:[a-f0-9:]+:+)+(?:[a-f0-9](?:(::)?))+)(?:\\\\/{1}\\\\d+|-((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)+|(?:[a-f0-9:]+:+)+(?:[a-f0-9](?:(::)?))+))?'\n  const customValue = 'custom' // note: this is also used in the components above. But those are pre-render, so a naked string is required\n\n  export default {\n    components: {\n      VRow,\n      VCol,\n      VCheckbox,\n      USelect,\n      UTextField,\n    },\n    defaults,\n    mixins: [settingsMixin],\n    data: () => ({\n      customRegex: '',\n      selectedParse: firstIpRegex,\n    }),\n    computed: {\n      /** units for the polling interval */\n      pollingUnits() {\n        return [\n          { text: this.$vuntangle.$tc('minutes', 2), value: 'Minutes', range: [15, 45] },\n          { text: this.$vuntangle.$tc('hours', 2), value: 'Hours', range: [1, 23] },\n          { text: this.$vuntangle.$t('days'), value: 'Days', range: [1, 30] },\n          { text: this.$vuntangle.$tc('months', 2), value: 'Months', range: [1, 12] },\n        ]\n      },\n\n      /** computes the polling interval values based on unit range */\n      timeOptions: ({ settingsCopy, pollingUnits }) => {\n        const unit = pollingUnits.find(unit => unit.value === settingsCopy.pollingUnit)\n        const range = unit?.range\n        if (!unit || !range) return []\n        return Array.from({ length: range[1] }, (_, index) => range[0] + index)\n      },\n\n      /** Options for blocklist parsing */\n      parsingOptions() {\n        return [\n          { text: this.$vuntangle.$t('dynamic_blocklist_first_ip_parse'), value: firstIpRegex },\n          { text: this.$vuntangle.$t('dynamic_blocklist_every_ip_parse'), value: everyIpRegex },\n          { text: this.$vuntangle.$t('dynamic_blocklist_custom_parse'), value: customValue },\n        ]\n      },\n    },\n\n    watch: {\n      selectedParse: {\n        handler(value) {\n          // when the user uses the drop-down and selects custom, we save custom regex into sync-settings. Otherwise we use a built-in\n          this.settingsCopy.parsingMethod = value === customValue ? this.customRegex : value\n        },\n      },\n\n      customRegex(value) {\n        // when the user types in a custom regex, we make sure settingsCopy gets that value before saving\n        if (this.selectedParse === customValue) {\n          this.settingsCopy.parsingMethod = value\n        }\n      },\n\n      settingsCopy: {\n        /** generates an UUID for new configurations, without it the configurations is not saved */\n        handler(value) {\n          if (!value.id) this.settingsCopy.id = util.uuidv4()\n        },\n        immediate: true,\n      },\n    },\n\n    created() {\n      if (this.parsingOptions.some(item => item.value === this.settingsCopy.parsingMethod)) {\n        // if settingsCopy matches one of the parsing options, then the drop-down will show that selection\n        this.selectedParse = this.settingsCopy.parsingMethod\n      } else {\n        // if settingsCopy matches nothing, we have a custom regex (so show that in the options and text box instead)\n        this.selectedParse = customValue\n        this.customRegex = this.settingsCopy.parsingMethod\n      }\n    },\n\n    methods: {\n      // Dialog main action emitting updated settings\n      async action() {\n        const isValid = await this.$refs.obs.validate()\n        if (!isValid) return\n\n        this.$emit('update', this.settingsCopy)\n        this.$emit('close')\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}