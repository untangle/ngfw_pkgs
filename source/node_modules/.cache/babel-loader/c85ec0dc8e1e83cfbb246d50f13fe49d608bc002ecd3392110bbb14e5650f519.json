{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.includes.js\";\nexport default {\n  data: function data() {\n    return {\n      // used to determine if a change has occured or not\n      isChanged: false,\n      // used to allow redirection to certain routes\n      allowedRoutes: [],\n      // this flag is needed to check if the user is saving on a newly created entry\n      newSaved: false\n    };\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.handleRouteLeave(to, next);\n  },\n  mounted: function mounted() {\n    this.addUnsavedChangesListener();\n  },\n  beforeUnload: function beforeUnload() {\n    this.removeUnsavedChangesListener();\n  },\n  methods: {\n    /**\n     * add `beforeunload` event\n     */\n    addUnsavedChangesListener: function addUnsavedChangesListener() {\n      window.addEventListener('beforeunload', this.unsavedChangesListener);\n    },\n    /**\n     * remove `beforeunload` event\n     * to stop showing the dialog when user cancels or confirms leaving the page\n     */\n    removeUnsavedChangesListener: function removeUnsavedChangesListener() {\n      window.removeEventListener('beforeunload', this.unsavedChangesListener);\n    },\n    /**\n     * shows browser native confirmation dialog when refreshing the page\n     *\n     * @param {*} event beforeUnload event\n     */\n    unsavedChangesListener: function unsavedChangesListener(event) {\n      if (this.isChanged) {\n        event.preventDefault();\n        // both preventDefault() and returnValue = '' are responsible for showing the popup when closing the window\n        // depending on which browser is being used\n        event.returnValue = '';\n      }\n    },\n    /**\n     * Display a confirmation dialog when attempting to leave page with unsaved changes\n     * There are two actions available:\n     * - Cancel (or ESC) - to remain in the editing page\n     * - Discard - to navigate away without saving\n     *\n     * @param {*} to route where is trying to navigate to\n     * @param {*} next callback to process redirection\n     * @returns void\n     */\n    handleRouteLeave: function handleRouteLeave(to, next) {\n      // only show dialog if the item was changed. If it comes from a successful save, don't show either\n      if (!this.isChanged || this.allowedRoutes.includes(to.name) || this.newSaved) {\n        next();\n        return;\n      }\n      this.showConfirmDialog(to, next);\n    },\n    /**\n     * shows a confirmation dialog for unsaved changes\n     *\n     * @param any to route where is trying to navigate to\n     * @param any next callback to process redirection\n     * @returns void\n     */\n    showConfirmDialog: function showConfirmDialog(to, next) {\n      this.$vuntangle.confirm.show({\n        title: 'discard_changes',\n        message: this.$vuntangle.$t('discard_changes_text'),\n        buttons: [\n        // cancel button - stay on page\n        {\n          name: this.$vuntangle.$t('cancel'),\n          props: {\n            minWidth: null,\n            small: false,\n            text: true,\n            depressed: true,\n            \"class\": 'text-capitalize'\n          },\n          handler: function handler() {\n            this.onClose();\n          }\n        },\n        // discard button, leave page\n        {\n          name: this.$vuntangle.$t('discard'),\n          props: {\n            minWidth: null,\n            small: false,\n            color: 'error',\n            depressed: true,\n            \"class\": 'text-capitalize px-4'\n          },\n          handler: function handler() {\n            this.onClose();\n            next();\n          }\n        }]\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","isChanged","allowedRoutes","newSaved","beforeRouteLeave","to","from","next","handleRouteLeave","mounted","addUnsavedChangesListener","beforeUnload","removeUnsavedChangesListener","methods","window","addEventListener","unsavedChangesListener","removeEventListener","event","preventDefault","returnValue","includes","name","showConfirmDialog","$vuntangle","confirm","show","title","message","$t","buttons","props","minWidth","small","text","depressed","handler","onClose","color"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/shared/unsavedChangesMixin.js"],"sourcesContent":["export default {\n  data() {\n    return {\n      // used to determine if a change has occured or not\n      isChanged: false,\n      // used to allow redirection to certain routes\n      allowedRoutes: [],\n      // this flag is needed to check if the user is saving on a newly created entry\n      newSaved: false,\n    }\n  },\n\n  beforeRouteLeave(to, from, next) {\n    this.handleRouteLeave(to, next)\n  },\n\n  mounted() {\n    this.addUnsavedChangesListener()\n  },\n\n  beforeUnload() {\n    this.removeUnsavedChangesListener()\n  },\n\n  methods: {\n    /**\n     * add `beforeunload` event\n     */\n    addUnsavedChangesListener() {\n      window.addEventListener('beforeunload', this.unsavedChangesListener)\n    },\n\n    /**\n     * remove `beforeunload` event\n     * to stop showing the dialog when user cancels or confirms leaving the page\n     */\n    removeUnsavedChangesListener() {\n      window.removeEventListener('beforeunload', this.unsavedChangesListener)\n    },\n\n    /**\n     * shows browser native confirmation dialog when refreshing the page\n     *\n     * @param {*} event beforeUnload event\n     */\n    unsavedChangesListener(event) {\n      if (this.isChanged) {\n        event.preventDefault()\n        // both preventDefault() and returnValue = '' are responsible for showing the popup when closing the window\n        // depending on which browser is being used\n        event.returnValue = ''\n      }\n    },\n\n    /**\n     * Display a confirmation dialog when attempting to leave page with unsaved changes\n     * There are two actions available:\n     * - Cancel (or ESC) - to remain in the editing page\n     * - Discard - to navigate away without saving\n     *\n     * @param {*} to route where is trying to navigate to\n     * @param {*} next callback to process redirection\n     * @returns void\n     */\n    handleRouteLeave(to, next) {\n      // only show dialog if the item was changed. If it comes from a successful save, don't show either\n      if (!this.isChanged || this.allowedRoutes.includes(to.name) || this.newSaved) {\n        next()\n        return\n      }\n      this.showConfirmDialog(to, next)\n    },\n\n    /**\n     * shows a confirmation dialog for unsaved changes\n     *\n     * @param any to route where is trying to navigate to\n     * @param any next callback to process redirection\n     * @returns void\n     */\n    showConfirmDialog(to, next) {\n      this.$vuntangle.confirm.show({\n        title: 'discard_changes',\n        message: this.$vuntangle.$t('discard_changes_text'),\n        buttons: [\n          // cancel button - stay on page\n          {\n            name: this.$vuntangle.$t('cancel'),\n            props: {\n              minWidth: null,\n              small: false,\n              text: true,\n              depressed: true,\n              class: 'text-capitalize',\n            },\n            handler() {\n              this.onClose()\n            },\n          },\n          // discard button, leave page\n          {\n            name: this.$vuntangle.$t('discard'),\n            props: {\n              minWidth: null,\n              small: false,\n              color: 'error',\n              depressed: true,\n              class: 'text-capitalize px-4',\n            },\n            handler() {\n              this.onClose()\n              next()\n            },\n          },\n        ],\n      })\n    },\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}