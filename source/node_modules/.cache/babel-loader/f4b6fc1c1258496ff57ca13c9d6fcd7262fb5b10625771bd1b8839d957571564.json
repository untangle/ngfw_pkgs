{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { VSheet, VSpacer, VBtn, VTreeview, VDivider, VSimpleTable } from 'vuetify/lib';\nimport renderer from '../../plugins/renderer';\nimport columns from '../../plugins/columns';\nexport default {\n  components: {\n    VSheet: VSheet,\n    VSpacer: VSpacer,\n    VBtn: VBtn,\n    VTreeview: VTreeview,\n    VDivider: VDivider,\n    VSimpleTable: VSimpleTable\n  },\n  props: {\n    session: {\n      type: Object,\n      \"default\": function _default() {}\n    },\n    columnDefs: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  computed: {\n    /**\n     * the sessions_stats specific columns:\n     * bytes, client_bytes, server_bytes\n     * byte_rate, client_byte_rate, server_byte_rate\n     * packets, client_packets, server_packets\n     * packet_rate, client_packet_rate, server_packet_rate\n     *\n     * @returns Array - an array having the key name and values for total/client/server\n     * e.g. [{ key: 'bytes', values: [10, 5, 5] }]...\n     */\n    stats: function stats(_ref) {\n      var session = _ref.session;\n      var keys = ['bytes', 'byte_rate', 'packets', 'packet_rate'];\n      var rows = [];\n      keys.forEach(function (key) {\n        switch (key) {\n          case 'bytes':\n            rows.push({\n              key: key,\n              values: [renderer.bytesRenderer(session[key]), renderer.bytesRenderer(session[\"client_\".concat(key)]), renderer.bytesRenderer(session[\"server_\".concat(key)])]\n            });\n            break;\n          case 'byte_rate':\n            rows.push({\n              key: key,\n              values: [renderer.bytesSecRenderer(session[key]), renderer.bytesSecRenderer(session[\"client_\".concat(key)]), renderer.bytesSecRenderer(session[\"server_\".concat(key)])]\n            });\n            break;\n          case 'packets':\n          case 'packet_rate':\n            rows.push({\n              key: key,\n              values: [renderer.packetsRenderer(session[key]), renderer.packetsRenderer(session[\"client_\".concat(key)]), renderer.packetsRenderer(session[\"server_\".concat(key)])]\n            });\n        }\n      });\n      return rows;\n    },\n    /**\n     * The sessions monitor uses the `sessions` and `session_stats` table\n     * `treeItems` returns a tree generated based on the session object data\n     */\n    treeItems: function treeItems() {\n      var _this = this;\n      var rootKeys = ['application', 'client', 'server', 'certificate'];\n      var tree = [];\n      columns.gridColumns.active_sessions.all.forEach(function (field) {\n        var _col$valueGetter, _col$cellRenderer, _col$valueFormatter;\n        var key = field.split('_')[0];\n        var value = _this.session[field];\n        if (!value) return;\n\n        // use the columns renderer for the details too\n        var col = _this.columnDefs.find(function (def) {\n          return def.field === field;\n        });\n\n        // extract the rendered value using the cols definitions, making sure col exists\n        var renderedValue = (col === null || col === void 0 || (_col$valueGetter = col.valueGetter) === null || _col$valueGetter === void 0 ? void 0 : _col$valueGetter.call(col, {\n          data: _this.session\n        })) || (col === null || col === void 0 || (_col$cellRenderer = col.cellRenderer) === null || _col$cellRenderer === void 0 ? void 0 : _col$cellRenderer.call(col, {\n          value: value\n        })) || (col === null || col === void 0 || (_col$valueFormatter = col.valueFormatter) === null || _col$valueFormatter === void 0 ? void 0 : _col$valueFormatter.call(col, value)) || value;\n        if (rootKeys.includes(key)) {\n          var node = tree.find(function (el) {\n            return el.name === key;\n          });\n          if (node && node.children) {\n            node.children.push({\n              name: field,\n              value: renderedValue\n            });\n          } else {\n            tree.push({\n              name: key,\n              children: [{\n                name: field,\n                value: renderedValue\n              }]\n            });\n          }\n        } else {\n          tree.push({\n            name: field,\n            value: renderedValue\n          });\n        }\n        tree.sort(function (a, b) {\n          // sort nodes with children first\n          if (a.children && !b.children) {\n            return -1;\n          }\n          // alphasort nodes without children\n          if (!a.children && !b.children) {\n            var nameA = _this.$t(a.name).toUpperCase();\n            var nameB = _this.$t(b.name).toUpperCase();\n            if (nameA < nameB) {\n              return -1;\n            }\n            if (nameA > nameB) {\n              return 1;\n            }\n            return 0;\n          }\n          return 1;\n        });\n      });\n      return tree;\n    }\n  }\n};","map":{"version":3,"names":["VSheet","VSpacer","VBtn","VTreeview","VDivider","VSimpleTable","renderer","columns","components","props","session","type","Object","default","columnDefs","Array","computed","stats","_ref","keys","rows","forEach","key","push","values","bytesRenderer","concat","bytesSecRenderer","packetsRenderer","treeItems","_this","rootKeys","tree","gridColumns","active_sessions","all","field","_col$valueGetter","_col$cellRenderer","_col$valueFormatter","split","value","col","find","def","renderedValue","valueGetter","call","data","cellRenderer","valueFormatter","includes","node","el","name","children","sort","a","b","nameA","$t","toUpperCase","nameB"],"sources":["node_modules/vuntangle/src/shared/ActiveSessions/SessionDetails.vue"],"sourcesContent":["<template>\n  <v-sheet class=\"d-flex flex-column\" :color=\"!$vuetify.theme.isDark ? 'grey lighten-3' : ''\">\n    <div class=\"d-flex flex-column flex-grow-1\" style=\"width: 400px\">\n      <div class=\"d-flex align-center py-2\">\n        <h4 class=\"ml-4\">{{ $t('session_details') }}</h4>\n        <v-spacer />\n        <v-btn icon class=\"mr-2\" @click=\"$emit('close')\"><v-icon>mdi-close</v-icon></v-btn>\n      </div>\n      <div class=\"flex-column flex-grow-1 flex-basis-0 overflow-auto\">\n        <v-treeview :items=\"treeItems\" open-on-click expand-icon=\"mdi-chevron-down\" dense class=\"list-dense\">\n          <template slot=\"label\" slot-scope=\"props\">\n            <div v-if=\"props.item.children\">\n              <span class=\"font-weight-bold text-uppercase caption\">{{ $t(props.item.name) }}</span>\n            </div>\n            <div v-else class=\"caption\">\n              {{ $t(props.item.name) }}: <span class=\"font-weight-bold\" v-html=\"props.item.value\" />\n            </div>\n          </template>\n        </v-treeview>\n      </div>\n      <div>\n        <v-divider class=\"mb-4\" />\n        <h4 class=\"ml-4\">{{ $t('session_stats') }}</h4>\n        <v-simple-table dense style=\"background: transparent\">\n          <template #default>\n            <thead>\n              <tr>\n                <th class=\"text-left\"></th>\n                <th class=\"text-left\" width=\"120\">{{ $t('client') }}</th>\n                <th class=\"text-left\" width=\"120\">{{ $t('server') }}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"stat in stats\" :key=\"stat.key\">\n                <td class=\"text-caption\" v-html=\"`${$t(stat.key)}: ${stat.values[0]}`\"></td>\n                <td class=\"text-caption\" v-html=\"stat.values[1] || '-'\"></td>\n                <td class=\"text-caption\" v-html=\"stat.values[2] || '-'\"></td>\n              </tr>\n            </tbody>\n          </template>\n        </v-simple-table>\n      </div>\n    </div>\n  </v-sheet>\n</template>\n<script>\n  import { VSheet, VSpacer, VBtn, VTreeview, VDivider, VSimpleTable } from 'vuetify/lib'\n  import renderer from '../../plugins/renderer'\n  import columns from '../../plugins/columns'\n\n  export default {\n    components: { VSheet, VSpacer, VBtn, VTreeview, VDivider, VSimpleTable },\n    props: {\n      session: { type: Object, default: () => {} },\n      columnDefs: { type: Array, default: () => [] },\n    },\n\n    computed: {\n      /**\n       * the sessions_stats specific columns:\n       * bytes, client_bytes, server_bytes\n       * byte_rate, client_byte_rate, server_byte_rate\n       * packets, client_packets, server_packets\n       * packet_rate, client_packet_rate, server_packet_rate\n       *\n       * @returns Array - an array having the key name and values for total/client/server\n       * e.g. [{ key: 'bytes', values: [10, 5, 5] }]...\n       */\n      stats: ({ session }) => {\n        const keys = ['bytes', 'byte_rate', 'packets', 'packet_rate']\n        const rows = []\n        keys.forEach(key => {\n          switch (key) {\n            case 'bytes':\n              rows.push({\n                key,\n                values: [\n                  renderer.bytesRenderer(session[key]),\n                  renderer.bytesRenderer(session[`client_${key}`]),\n                  renderer.bytesRenderer(session[`server_${key}`]),\n                ],\n              })\n              break\n            case 'byte_rate':\n              rows.push({\n                key,\n                values: [\n                  renderer.bytesSecRenderer(session[key]),\n                  renderer.bytesSecRenderer(session[`client_${key}`]),\n                  renderer.bytesSecRenderer(session[`server_${key}`]),\n                ],\n              })\n              break\n            case 'packets':\n            case 'packet_rate':\n              rows.push({\n                key,\n                values: [\n                  renderer.packetsRenderer(session[key]),\n                  renderer.packetsRenderer(session[`client_${key}`]),\n                  renderer.packetsRenderer(session[`server_${key}`]),\n                ],\n              })\n          }\n        })\n        return rows\n      },\n\n      /**\n       * The sessions monitor uses the `sessions` and `session_stats` table\n       * `treeItems` returns a tree generated based on the session object data\n       */\n      treeItems() {\n        const rootKeys = ['application', 'client', 'server', 'certificate']\n        const tree = []\n\n        columns.gridColumns.active_sessions.all.forEach(field => {\n          const key = field.split('_')[0]\n          const value = this.session[field]\n          if (!value) return\n\n          // use the columns renderer for the details too\n          const col = this.columnDefs.find(def => def.field === field)\n\n          // extract the rendered value using the cols definitions, making sure col exists\n          const renderedValue =\n            col?.valueGetter?.({ data: this.session }) ||\n            col?.cellRenderer?.({ value }) ||\n            col?.valueFormatter?.(value) ||\n            value\n\n          if (rootKeys.includes(key)) {\n            const node = tree.find(el => el.name === key)\n            if (node && node.children) {\n              node.children.push({ name: field, value: renderedValue })\n            } else {\n              tree.push({ name: key, children: [{ name: field, value: renderedValue }] })\n            }\n          } else {\n            tree.push({ name: field, value: renderedValue })\n          }\n\n          tree.sort((a, b) => {\n            // sort nodes with children first\n            if (a.children && !b.children) {\n              return -1\n            }\n            // alphasort nodes without children\n            if (!a.children && !b.children) {\n              const nameA = this.$t(a.name).toUpperCase()\n              const nameB = this.$t(b.name).toUpperCase()\n              if (nameA < nameB) {\n                return -1\n              }\n              if (nameA > nameB) {\n                return 1\n              }\n              return 0\n            }\n            return 1\n          })\n        })\n\n        return tree\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}