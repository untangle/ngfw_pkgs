{"ast":null,"code":"import _regeneratorRuntime from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\n// import vuetify components\nimport { VRow, VCol, VIcon } from 'vuetify/lib';\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\nimport cloneDeep from 'lodash/cloneDeep';\nimport Ipv4PrefixAutocomplete from '../../components/Ipv4PrefixAutocomplete';\nimport net from '../../plugins/net';\nimport { staticRouteDefaults as defaults } from './defaults';\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    VIcon: VIcon,\n    ValidationObserver: ValidationObserver,\n    ValidationProvider: ValidationProvider,\n    Ipv4PrefixAutocomplete: Ipv4PrefixAutocomplete\n  },\n  defaults: defaults,\n  props: {\n    // the index of the route being edited\n    index: {\n      type: Number,\n      \"default\": undefined\n    },\n    // the route entry settings\n    settings: {\n      type: Object,\n      \"default\": function _default() {\n        return undefined;\n      }\n    },\n    // box interfaces if applicable\n    interfaces: {\n      type: Array,\n      \"default\": null\n    },\n    // box features if any\n    features: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    // all the routes list used to check against conflicts\n    routes: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      settingsCopy: undefined\n    };\n  },\n  computed: {\n    /**\n     * Checks if edited route conflicts with an existing route.\n     * Is conflicting if the below are true:\n     * - route networks are the same (ip&prefix)\n     * - route nextHops are the same\n     * @returns {Boolean} - true if conflict exists\n     */\n    conflictingRoutes: function conflictingRoutes(_ref) {\n      var routes = _ref.routes,\n        index = _ref.index,\n        settingsCopy = _ref.settingsCopy,\n        networkIp = _ref.networkIp,\n        networkPrefix = _ref.networkPrefix;\n      var allRoutes = _toConsumableArray(routes);\n      var idx = parseInt(index);\n      // drop the edited route if exists\n      if (!isNaN(index) && allRoutes[idx]) allRoutes.splice(idx, 1);\n      return allRoutes.some(function (route) {\n        return \"\".concat(networkIp, \"/\").concat(networkPrefix) === route.network && settingsCopy.nextHop === route.nextHop;\n      });\n    },\n    // used to compute network from IP and prefix\n    networkIp: {\n      get: function get(_ref2) {\n        var _settingsCopy$network;\n        var settingsCopy = _ref2.settingsCopy;\n        return ((_settingsCopy$network = settingsCopy.network) === null || _settingsCopy$network === void 0 ? void 0 : _settingsCopy$network.split('/')[0]) || '';\n      },\n      set: function set(ip) {\n        this.settingsCopy.network = \"\".concat(ip, \"/\").concat(this.networkPrefix);\n      }\n    },\n    // computes prefix based on entry\n    networkPrefix: {\n      get: function get(_ref3) {\n        var _settingsCopy$network2;\n        var settingsCopy = _ref3.settingsCopy;\n        return parseInt((_settingsCopy$network2 = settingsCopy.network) === null || _settingsCopy$network2 === void 0 ? void 0 : _settingsCopy$network2.split('/')[1]) || 24;\n      },\n      set: function set(prefix) {\n        this.settingsCopy.network = \"\".concat(this.networkIp, \"/\").concat(prefix);\n      }\n    },\n    // returns info for a specific ip/prefix\n    netInfo: function netInfo() {\n      return net.info(this.networkIp, this.networkPrefix);\n    },\n    // returns if network is valid\n    validNetwork: function validNetwork() {\n      var _this$netInfo;\n      return ((_this$netInfo = this.netInfo) === null || _this$netInfo === void 0 ? void 0 : _this$netInfo.networkAddress) === this.networkIp;\n    }\n  },\n  watch: {\n    settings: {\n      handler: function handler(settings) {\n        this.settingsCopy = cloneDeep(settings || this.$options.defaults);\n      },\n      immediate: true\n    },\n    'settingsCopy.network': function settingsCopyNetwork(newValue) {\n      var _newValue$split = newValue.split('/'),\n        _newValue$split2 = _slicedToArray(_newValue$split, 2),\n        ip = _newValue$split2[0],\n        prefix = _newValue$split2[1];\n      this.settingsCopy.network = \"\".concat(ip, \"/\").concat(prefix || this.networkPrefix);\n    }\n  },\n  methods: {\n    // Dialog main action emitting updated settings\n    action: function action() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var isValid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.$refs.obs.validate();\n            case 2:\n              isValid = _context.sent;\n              if (!(!isValid || !_this.validNetwork || _this.conflictingRoutes)) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              _this.$emit('update', _this.settingsCopy, _this.index);\n              _this.$emit('close');\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["VRow","VCol","VIcon","ValidationObserver","ValidationProvider","cloneDeep","Ipv4PrefixAutocomplete","net","staticRouteDefaults","defaults","components","props","index","type","Number","undefined","settings","Object","default","interfaces","Array","features","routes","data","settingsCopy","computed","conflictingRoutes","_ref","networkIp","networkPrefix","allRoutes","_toConsumableArray","idx","parseInt","isNaN","splice","some","route","concat","network","nextHop","get","_ref2","_settingsCopy$network","split","set","ip","_ref3","_settingsCopy$network2","prefix","netInfo","info","validNetwork","_this$netInfo","networkAddress","watch","handler","$options","immediate","settingsCopyNetwork","newValue","_newValue$split","_newValue$split2","_slicedToArray","methods","action","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isValid","wrap","_callee$","_context","prev","next","$refs","obs","validate","sent","abrupt","$emit","stop"],"sources":["node_modules/vuntangle/src/shared/StaticRoutes/StaticRouteEdit.vue"],"sourcesContent":["<template>\n  <div v-if=\"settingsCopy\" class=\"py-2\">\n    <ValidationObserver ref=\"obs\">\n      <v-row align=\"center\">\n        <v-col>\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-text-field\n              v-model=\"settingsCopy.description\"\n              :label=\"$vuntangle.$t('description')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"auto\">\n          <v-checkbox v-model=\"settingsCopy.enabled\" :label=\"$vuntangle.$t('enabled')\" hide-details class=\"ma-0 pa-0\" />\n        </v-col>\n      </v-row>\n      <v-row class=\"align-center\">\n        <v-col cols=\"6\">\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"{\n              required: true,\n              ip: true,\n            }\"\n          >\n            <u-text-field v-model=\"networkIp\" :label=\"$vuntangle.$t('network')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <v-col cols=\"6\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <ipv-4-prefix-autocomplete v-model=\"networkPrefix\" :errors=\"errors\" />\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <div v-if=\"netInfo && !validNetwork\" class=\"my-2\">\n        <v-icon color=\"error\" class=\"mr-2\">mdi-alert</v-icon>\n        <span v-html=\"$vuntangle.$t('invalid_network_route', [netInfo.networkAddress])\" />\n      </div>\n\n      <v-row>\n        <v-col cols=\"12\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|ip\">\n            <u-text-field v-model=\"settingsCopy.nextHop\" :label=\"$vuntangle.$t('next_hop')\" :error-messages=\"errors\">\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\">\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"{ required: !!interfaces && features.hasStaticRouteInterfaceRequired }\"\n          >\n            <u-select\n              v-model=\"settingsCopy.interfaceId\"\n              :label=\"$vuntangle.$t('interface')\"\n              :error-messages=\"errors\"\n              :items=\"interfaces\"\n              item-value=\"interfaceId\"\n              item-text=\"name\"\n              clearable\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\">\n          <ValidationProvider v-slot=\"{ errors }\" :rules=\"{ check_static_route_metric: true }\">\n            <u-text-field\n              v-model.number=\"settingsCopy.metric\"\n              :label=\"$vuntangle.$t('metric')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n      </v-row>\n\n      <div v-if=\"conflictingRoutes\" class=\"my-2\">\n        <v-icon color=\"error\" class=\"mr-2\">mdi-alert</v-icon>\n        {{ $vuntangle.$t('static_route_conflict') }}\n      </div>\n    </ValidationObserver>\n  </div>\n</template>\n<script>\n  // import vuetify components\n  import { VRow, VCol, VIcon } from 'vuetify/lib'\n  import { ValidationObserver, ValidationProvider } from 'vee-validate'\n\n  import cloneDeep from 'lodash/cloneDeep'\n  import Ipv4PrefixAutocomplete from '../../components/Ipv4PrefixAutocomplete'\n  import net from '../../plugins/net'\n  import { staticRouteDefaults as defaults } from './defaults'\n\n  export default {\n    components: { VRow, VCol, VIcon, ValidationObserver, ValidationProvider, Ipv4PrefixAutocomplete },\n    defaults,\n    props: {\n      // the index of the route being edited\n      index: { type: Number, default: undefined },\n      // the route entry settings\n      settings: { type: Object, default: () => undefined },\n      // box interfaces if applicable\n      interfaces: { type: Array, default: null },\n      // box features if any\n      features: { type: Object, default: () => ({}) },\n      // all the routes list used to check against conflicts\n      routes: { type: Array, default: () => [] },\n    },\n\n    data() {\n      return {\n        settingsCopy: undefined,\n      }\n    },\n\n    computed: {\n      /**\n       * Checks if edited route conflicts with an existing route.\n       * Is conflicting if the below are true:\n       * - route networks are the same (ip&prefix)\n       * - route nextHops are the same\n       * @returns {Boolean} - true if conflict exists\n       */\n      conflictingRoutes: ({ routes, index, settingsCopy, networkIp, networkPrefix }) => {\n        const allRoutes = [...routes]\n        const idx = parseInt(index)\n        // drop the edited route if exists\n        if (!isNaN(index) && allRoutes[idx]) allRoutes.splice(idx, 1)\n\n        return allRoutes.some(\n          route => `${networkIp}/${networkPrefix}` === route.network && settingsCopy.nextHop === route.nextHop,\n        )\n      },\n      // used to compute network from IP and prefix\n      networkIp: {\n        get: ({ settingsCopy }) => settingsCopy.network?.split('/')[0] || '',\n        set(ip) {\n          this.settingsCopy.network = `${ip}/${this.networkPrefix}`\n        },\n      },\n      // computes prefix based on entry\n      networkPrefix: {\n        get: ({ settingsCopy }) => parseInt(settingsCopy.network?.split('/')[1]) || 24,\n        set(prefix) {\n          this.settingsCopy.network = `${this.networkIp}/${prefix}`\n        },\n      },\n      // returns info for a specific ip/prefix\n      netInfo() {\n        return net.info(this.networkIp, this.networkPrefix)\n      },\n      // returns if network is valid\n      validNetwork() {\n        return this.netInfo?.networkAddress === this.networkIp\n      },\n    },\n\n    watch: {\n      settings: {\n        handler(settings) {\n          this.settingsCopy = cloneDeep(settings || this.$options.defaults)\n        },\n        immediate: true,\n      },\n      'settingsCopy.network'(newValue) {\n        const [ip, prefix] = newValue.split('/')\n        this.settingsCopy.network = `${ip}/${prefix || this.networkPrefix}`\n      },\n    },\n\n    methods: {\n      // Dialog main action emitting updated settings\n      async action() {\n        const isValid = await this.$refs.obs.validate()\n        if (!isValid || !this.validNetwork || this.conflictingRoutes) return\n\n        this.$emit('update', this.settingsCopy, this.index)\n        this.$emit('close')\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}