{"ast":null,"code":"import _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport chartOptions from '../../../plugins/chartOptions';\nimport columns from '../../../plugins/columns';\nexport default {\n  inject: ['$boxSettings', '$applianceUid', '$timeRange', '$pagination'],\n  props: {\n    report: {\n      type: Object,\n      \"default\": undefined,\n      required: true\n    },\n    customConditions: {\n      type: Array,\n      \"default\": undefined\n    },\n    withPieGrid: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      fetching: false,\n      data: [],\n      options: chartOptions.baseChartOptions,\n      total: undefined\n    };\n  },\n  computed: {\n    /**\n     * Returns the timerange from injected $timeRange\n     * @param {Object} vm\n     * @param {Object} vm.$timeRange - the timerange period\n     * @returns {Object}\n     */\n    timeRange: function timeRange(_ref) {\n      var $timeRange = _ref.$timeRange;\n      return $timeRange();\n    },\n    /**\n     * Returns the pagination from injected $pagination\n     * @param {Object} vm\n     * @param {Object} vm.$pagination - the pagination pageNumber & pageSize\n     * @returns {Object}\n     */\n    pagination: function pagination(_ref2) {\n      var $pagination = _ref2.$pagination;\n      return $pagination();\n    },\n    /**\n     * Returns the columns definitions for a grid\n     * @param {Object} vm\n     * @param {Report} vm.report - the report conf\n     * @param {Object} vm.$boxSettings - the appliance box settings\n     * @returns {Array<Object>}\n     */\n    columnDefs: function columnDefs(_ref3) {\n      var report = _ref3.report,\n        $boxSettings = _ref3.$boxSettings;\n      return report.columns ? columns.buildColumnDefs(report.columns, $boxSettings) : [];\n    },\n    /**\n     * Returns an id -> map between the interface id and it's name\n     * @param {Object} vm\n     * @param {Object} vm.$boxSettings - the appliance box settings\n     * @returns {Object}\n     */\n    interfaceIdNameMap: function interfaceIdNameMap(_ref4) {\n      var _$boxSettings$network;\n      var $boxSettings = _ref4.$boxSettings;\n      return $boxSettings === null || $boxSettings === void 0 || (_$boxSettings$network = $boxSettings.network) === null || _$boxSettings$network === void 0 || (_$boxSettings$network = _$boxSettings$network.interfaces) === null || _$boxSettings$network === void 0 ? void 0 : _$boxSettings$network.reduce(function (res, intf) {\n        return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, intf.interfaceId, intf.name));\n      }, {});\n    },\n    /**\n     * Returns the appliance UID used for reports\n     * @param {Object} vm\n     * @param {Function} vm.$applianceUid - appliance UID\n     * @returns {String}\n     */\n    applianceUid: function applianceUid(_ref5) {\n      var $applianceUid = _ref5.$applianceUid;\n      return $applianceUid();\n    }\n  },\n  watch: {\n    // re-fetch data upon time range update\n    'timeRange.period': function timeRangePeriod() {\n      // reset page to 1 upon timerange change\n      this.pagination.pageNumber = 1;\n      this.fetchData();\n    },\n    // re-fetch data upon custom conditions update\n    customConditions: function customConditions() {\n      this.fetchData();\n    },\n    // refetch data when appliance UID changes\n    applianceUid: function applianceUid() {\n      this.fetchData();\n    },\n    report: {\n      handler: function handler() {\n        this.fetchData();\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    onRefresh: function onRefresh() {\n      this.pagination.pageNumber = 1;\n      this.fetchData();\n    },\n    /**\n     * Returns the report data after the response received from the host app\n     */\n    fetchData: function fetchData() {\n      var _this = this;\n      var now = Date.now();\n\n      // compute start/end timestamps based on timezone offset\n      var start = now + this.timeRange.period[0] * 60 * 60 * 1000;\n      var end = now + this.timeRange.period[1] * 60 * 60 * 1000;\n      var conditions = [{\n        column: 'time_stamp',\n        operator: 'GT',\n        value: start\n      }, {\n        column: 'time_stamp',\n        operator: 'LT',\n        value: end\n      }];\n\n      // attach also any costom conditions if passed\n      if (this.customConditions) conditions = [].concat(_toConsumableArray(conditions), _toConsumableArray(this.customConditions));\n\n      // show loading and fetch data from host\n      this.fetching = true;\n      this.$emit('fetch-data', {\n        query: _objectSpread(_objectSpread({}, this.report.query), {}, {\n          userConditions: conditions,\n          serverPagination: this.pagination\n        }),\n        applianceUid: this.applianceUid,\n        resolve: function resolve(data) {\n          _this.fetching = false;\n          _this.data = data;\n          // for the charts reports, build the normalized data used for charting\n          if (_this.report.rendering) {\n            _this.options = chartOptions.getChartOptions(_this.report, data, _this.interfaceIdNameMap);\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["chartOptions","columns","inject","props","report","type","Object","undefined","required","customConditions","Array","withPieGrid","Boolean","data","fetching","options","baseChartOptions","total","computed","timeRange","_ref","$timeRange","pagination","_ref2","$pagination","columnDefs","_ref3","$boxSettings","buildColumnDefs","interfaceIdNameMap","_ref4","_$boxSettings$network","network","interfaces","reduce","res","intf","_objectSpread","_defineProperty","interfaceId","name","applianceUid","_ref5","$applianceUid","watch","timeRangePeriod","pageNumber","fetchData","handler","immediate","methods","onRefresh","_this","now","Date","start","period","end","conditions","column","operator","value","concat","_toConsumableArray","$emit","query","userConditions","serverPagination","resolve","rendering","getChartOptions"],"sources":["/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/vuntangle/src/shared/Reports/components/reportMixin.js"],"sourcesContent":["import chartOptions from '../../../plugins/chartOptions'\nimport columns from '../../../plugins/columns'\n\nexport default {\n  inject: ['$boxSettings', '$applianceUid', '$timeRange', '$pagination'],\n\n  props: {\n    report: { type: Object, default: undefined, required: true },\n    customConditions: { type: Array, default: undefined },\n    withPieGrid: { type: Boolean, default: false },\n  },\n\n  data() {\n    return {\n      fetching: false,\n      data: [],\n      options: chartOptions.baseChartOptions,\n      total: undefined,\n    }\n  },\n\n  computed: {\n    /**\n     * Returns the timerange from injected $timeRange\n     * @param {Object} vm\n     * @param {Object} vm.$timeRange - the timerange period\n     * @returns {Object}\n     */\n    timeRange: ({ $timeRange }) => $timeRange(),\n\n    /**\n     * Returns the pagination from injected $pagination\n     * @param {Object} vm\n     * @param {Object} vm.$pagination - the pagination pageNumber & pageSize\n     * @returns {Object}\n     */\n    pagination: ({ $pagination }) => $pagination(),\n\n    /**\n     * Returns the columns definitions for a grid\n     * @param {Object} vm\n     * @param {Report} vm.report - the report conf\n     * @param {Object} vm.$boxSettings - the appliance box settings\n     * @returns {Array<Object>}\n     */\n    columnDefs: ({ report, $boxSettings }) =>\n      report.columns ? columns.buildColumnDefs(report.columns, $boxSettings) : [],\n\n    /**\n     * Returns an id -> map between the interface id and it's name\n     * @param {Object} vm\n     * @param {Object} vm.$boxSettings - the appliance box settings\n     * @returns {Object}\n     */\n    interfaceIdNameMap: ({ $boxSettings }) =>\n      $boxSettings?.network?.interfaces?.reduce((res, intf) => {\n        return { ...res, [intf.interfaceId]: intf.name }\n      }, {}),\n\n    /**\n     * Returns the appliance UID used for reports\n     * @param {Object} vm\n     * @param {Function} vm.$applianceUid - appliance UID\n     * @returns {String}\n     */\n    applianceUid: ({ $applianceUid }) => $applianceUid(),\n  },\n\n  watch: {\n    // re-fetch data upon time range update\n    'timeRange.period'() {\n      // reset page to 1 upon timerange change\n      this.pagination.pageNumber = 1\n      this.fetchData()\n    },\n    // re-fetch data upon custom conditions update\n    customConditions() {\n      this.fetchData()\n    },\n\n    // refetch data when appliance UID changes\n    applianceUid() {\n      this.fetchData()\n    },\n\n    report: {\n      handler() {\n        this.fetchData()\n      },\n      immediate: true,\n    },\n  },\n\n  methods: {\n    onRefresh() {\n      this.pagination.pageNumber = 1\n      this.fetchData()\n    },\n\n    /**\n     * Returns the report data after the response received from the host app\n     */\n    fetchData() {\n      const now = Date.now()\n\n      // compute start/end timestamps based on timezone offset\n      const start = now + this.timeRange.period[0] * 60 * 60 * 1000\n\n      const end = now + this.timeRange.period[1] * 60 * 60 * 1000\n\n      let conditions = [\n        {\n          column: 'time_stamp',\n          operator: 'GT',\n          value: start,\n        },\n        {\n          column: 'time_stamp',\n          operator: 'LT',\n          value: end,\n        },\n      ]\n\n      // attach also any costom conditions if passed\n      if (this.customConditions) conditions = [...conditions, ...this.customConditions]\n\n      // show loading and fetch data from host\n      this.fetching = true\n      this.$emit('fetch-data', {\n        query: {\n          ...this.report.query,\n          userConditions: conditions,\n          serverPagination: this.pagination,\n        },\n        applianceUid: this.applianceUid,\n        resolve: data => {\n          this.fetching = false\n          this.data = data\n          // for the charts reports, build the normalized data used for charting\n          if (this.report.rendering) {\n            this.options = chartOptions.getChartOptions(this.report, data, this.interfaceIdNameMap)\n          }\n        },\n      })\n    },\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}