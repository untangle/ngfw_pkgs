{"ast":null,"code":"import { ValidationProvider } from 'vee-validate';\nimport { VRow, VCol, VIcon } from 'vuetify/lib';\nimport { conditionDefs, conditionTypeOptions, conditionTypeHeaders } from '../conditionDefs';\nimport { isOperatorOptions } from '../../../constants';\nimport { addConditionHeaders } from '../../Conditions/util/addConditionHeaders';\nexport default {\n  components: {\n    VRow: VRow,\n    VCol: VCol,\n    VIcon: VIcon,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    zoneItems: {\n      type: Array,\n      required: true\n    },\n    /**\n     * conditions like\n     * [ { type: 'CLIENT_PORT', op: '==', value: '45' }, {...}, {...} ]\n     */\n    conditions: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      conditionDefs: conditionDefs,\n      isOperatorOptions: isOperatorOptions\n    };\n  },\n  computed: {\n    conditionDef: function conditionDef(_ref) {\n      var conditionDefs = _ref.conditionDefs,\n        condition = _ref.condition;\n      return conditionDefs[condition.type];\n    },\n    conditionList: function conditionList() {\n      return addConditionHeaders(conditionTypeHeaders, conditionTypeOptions);\n    }\n  },\n  methods: {\n    addCondition: function addCondition() {\n      var newCondition = {\n        type: '',\n        op: '==',\n        value: ''\n      };\n      this.$set(this.conditions, this.conditions.length, newCondition);\n    },\n    removeCondition: function removeCondition(index) {\n      this.$delete(this.conditions, index);\n    },\n    /**\n     * MFW-2749\n     * when editing (changing) a condition type, reset operator and value\n     * cause each condition type has it's specific value type, otherwise might throw errors\n     * @param {Object} cond - the condition object\n     */\n    onChangeConditionType: function onChangeConditionType(cond) {\n      cond.op = '==';\n      cond.value = '';\n    }\n  }\n};","map":{"version":3,"names":["ValidationProvider","VRow","VCol","VIcon","conditionDefs","conditionTypeOptions","conditionTypeHeaders","isOperatorOptions","addConditionHeaders","components","props","zoneItems","type","Array","required","conditions","default","data","computed","conditionDef","_ref","condition","conditionList","methods","addCondition","newCondition","op","value","$set","length","removeCondition","index","$delete","onChangeConditionType","cond"],"sources":["node_modules/vuntangle/src/shared/SettingsCaptivePortal/components/RuleConditions.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- display `no conditions` if there is none initially -->\n    <div v-if=\"!conditions.length\">\n      <u-alert v-if=\"!conditions.length\" class=\"body-2 mb-0 py-3\">\n        {{ $vuntangle.$t('no_conditions') }}\n      </u-alert>\n    </div>\n\n    <div v-else>\n      <v-row v-for=\"(condition, index) in conditions\" :key=\"`condition-${index}`\" class=\"align-center\" dense>\n        <v-col :cols=\"4\">\n          <!-- condition type selector -->\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"condition.type\"\n              :items=\"conditionList\"\n              :placeholder=\"$t('type')\"\n              :error-messages=\"errors\"\n              @change=\"onChangeConditionType(condition)\"\n            >\n              <template #selection=\"{ item }\">{{ $t(item.value.toLowerCase()) }}</template>\n              <template #item=\"{ item }\">{{ $t(item.value.toLowerCase()) }}</template>\n              <template v-if=\"errors.length\" #append>\n                <u-errors-tooltip :errors=\"errors\" />\n              </template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n        <v-col :cols=\"2\">\n          <!-- condition operator selector -->\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-model=\"condition.op\"\n              :disabled=\"!condition.type\"\n              :items=\"conditionDefs[condition.type] ? conditionDefs[condition.type].ops : isOperatorOptions\"\n              :error-messages=\"errors\"\n            >\n              <template #selection=\"{ item }\">{{ $t(item.text) }}</template>\n              <template #item=\"{ item }\">{{ $t(item.text) }}</template>\n              <template v-if=\"errors.length\" #append>\n                <u-errors-tooltip :errors=\"errors\" />\n              </template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n        <v-col v-if=\"condition.type === 'IP_PROTOCOL'\">\n          <!-- condition value field -->\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"conditionDefs[condition.type] ? conditionDefs[condition.type].rules : ''\"\n          >\n            <v-autocomplete\n              v-model=\"condition.value\"\n              :items=\"conditionDefs[condition.type].autocompleteItems\"\n              multiple\n              :placeholder=\"$t('value')\"\n              outlined\n              dense\n              hide-details\n              :error-messages=\"errors\"\n            ></v-autocomplete>\n          </ValidationProvider>\n        </v-col>\n        <v-col v-else-if=\"condition.type === 'SOURCE_INTERFACE_ZONE'\">\n          <!-- condition value field -->\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required\">\n            <u-select\n              v-if=\"!condition.value.text\"\n              v-model=\"condition.value\"\n              :items=\"zoneItems\"\n              :disabled=\"!condition.type\"\n              :placeholder=\"$t('value')\"\n              :error-messages=\"errors\"\n            >\n              <template #selection=\"{ item }\">{{ $t(item.text) || item }}</template>\n              <template #item=\"{ item }\">{{ $t(item.text) || item }}</template>\n              <template v-if=\"errors.length\" #append>\n                <u-errors-tooltip :errors=\"errors\" />\n              </template>\n            </u-select>\n            <u-select\n              v-else\n              v-model=\"condition.value.text\"\n              :items=\"zoneItems\"\n              :disabled=\"!condition.type\"\n              :placeholder=\"$t('value')\"\n              :error-messages=\"errors\"\n            >\n              <template #selection=\"{ item }\">{{ $t(item.text) || item }}</template>\n              <template #item=\"{ item }\">{{ $t(item.text) || item }}</template>\n              <template v-if=\"errors.length\" #append>\n                <u-errors-tooltip :errors=\"errors\" />\n              </template>\n            </u-select>\n          </ValidationProvider>\n        </v-col>\n        <v-col v-else>\n          <!-- condition value field -->\n          <ValidationProvider\n            v-slot=\"{ errors }\"\n            :rules=\"conditionDefs[condition.type] ? conditionDefs[condition.type].rules : ''\"\n          >\n            <u-text-field\n              v-model=\"condition.value\"\n              :disabled=\"!condition.type\"\n              :placeholder=\"$t('value')\"\n              :error-messages=\"errors\"\n            >\n              <template v-if=\"errors.length\" #append>\n                <u-errors-tooltip :errors=\"errors\" />\n              </template>\n            </u-text-field>\n          </ValidationProvider>\n        </v-col>\n        <!-- icon button to remove the condition -->\n        <v-col :cols=\"1\" class=\"text-right\">\n          <v-btn icon @click=\"removeCondition(index)\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </div>\n    <div class=\"mt-2\">\n      <u-btn class=\"mr-2\" @click=\"addCondition()\">{{ $t('add_condition') }}</u-btn>\n    </div>\n  </div>\n</template>\n<script>\n  import { ValidationProvider } from 'vee-validate'\n  import { VRow, VCol, VIcon } from 'vuetify/lib'\n  import { conditionDefs, conditionTypeOptions, conditionTypeHeaders } from '../conditionDefs'\n  import { isOperatorOptions } from '../../../constants'\n  import { addConditionHeaders } from '../../Conditions/util/addConditionHeaders'\n\n  export default {\n    components: { VRow, VCol, VIcon, ValidationProvider },\n    props: {\n      zoneItems: { type: Array, required: true },\n      /**\n       * conditions like\n       * [ { type: 'CLIENT_PORT', op: '==', value: '45' }, {...}, {...} ]\n       */\n      conditions: {\n        type: Array,\n        default: () => [],\n      },\n    },\n    data() {\n      return {\n        conditionDefs,\n        isOperatorOptions,\n      }\n    },\n\n    computed: {\n      conditionDef: ({ conditionDefs, condition }) => conditionDefs[condition.type],\n      conditionList: () => addConditionHeaders(conditionTypeHeaders, conditionTypeOptions),\n    },\n\n    methods: {\n      addCondition() {\n        const newCondition = { type: '', op: '==', value: '' }\n        this.$set(this.conditions, this.conditions.length, newCondition)\n      },\n\n      removeCondition(index) {\n        this.$delete(this.conditions, index)\n      },\n\n      /**\n       * MFW-2749\n       * when editing (changing) a condition type, reset operator and value\n       * cause each condition type has it's specific value type, otherwise might throw errors\n       * @param {Object} cond - the condition object\n       */\n      onChangeConditionType(cond) {\n        cond.op = '=='\n        cond.value = ''\n      },\n    },\n  }\n</script>\n"],"mappings":"AAiIA,SAAAA,kBAAA;AACA,SAAAC,IAAA,EAAAC,IAAA,EAAAC,KAAA;AACA,SAAAC,aAAA,EAAAC,oBAAA,EAAAC,oBAAA;AACA,SAAAC,iBAAA;AACA,SAAAC,mBAAA;AAEA;EACAC,UAAA;IAAAR,IAAA,EAAAA,IAAA;IAAAC,IAAA,EAAAA,IAAA;IAAAC,KAAA,EAAAA,KAAA;IAAAH,kBAAA,EAAAA;EAAA;EACAU,KAAA;IACAC,SAAA;MAAAC,IAAA,EAAAC,KAAA;MAAAC,QAAA;IAAA;IACA;AACA;AACA;AACA;IACAC,UAAA;MACAH,IAAA,EAAAC,KAAA;MACA,oBAAAG,SAAA;QAAA;MAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAb,aAAA,EAAAA,aAAA;MACAG,iBAAA,EAAAA;IACA;EACA;EAEAW,QAAA;IACAC,YAAA,WAAAA,aAAAC,IAAA;MAAA,IAAAhB,aAAA,GAAAgB,IAAA,CAAAhB,aAAA;QAAAiB,SAAA,GAAAD,IAAA,CAAAC,SAAA;MAAA,OAAAjB,aAAA,CAAAiB,SAAA,CAAAT,IAAA;IAAA;IACAU,aAAA,WAAAA,cAAA;MAAA,OAAAd,mBAAA,CAAAF,oBAAA,EAAAD,oBAAA;IAAA;EACA;EAEAkB,OAAA;IACAC,YAAA,WAAAA,aAAA;MACA,IAAAC,YAAA;QAAAb,IAAA;QAAAc,EAAA;QAAAC,KAAA;MAAA;MACA,KAAAC,IAAA,MAAAb,UAAA,OAAAA,UAAA,CAAAc,MAAA,EAAAJ,YAAA;IACA;IAEAK,eAAA,WAAAA,gBAAAC,KAAA;MACA,KAAAC,OAAA,MAAAjB,UAAA,EAAAgB,KAAA;IACA;IAEA;AACA;AACA;AACA;AACA;AACA;IACAE,qBAAA,WAAAA,sBAAAC,IAAA;MACAA,IAAA,CAAAR,EAAA;MACAQ,IAAA,CAAAP,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}