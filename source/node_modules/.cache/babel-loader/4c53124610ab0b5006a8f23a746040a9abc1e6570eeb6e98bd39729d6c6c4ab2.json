{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport draggable from 'vuedraggable';\nimport IpsecCipherDialog from './IpsecCipherDialog.vue';\nimport IpsecCipherItem from './IpsecCipherItem.vue';\nexport default {\n  components: {\n    draggable: draggable,\n    IpsecCipherItem: IpsecCipherItem\n  },\n  inject: ['$intf'],\n  data: function data() {\n    return {\n      drag: false\n    };\n  },\n  computed: {\n    ipsec: function ipsec(_ref) {\n      var $intf = _ref.$intf;\n      return $intf().ipsec;\n    },\n    dragOptions: function dragOptions() {\n      return {\n        animation: 200,\n        group: 'description',\n        disabled: false,\n        ghostClass: 'ghost'\n      };\n    }\n  },\n  methods: {\n    /**\n     * Shows an editing dialog for proposal\n     * @param {Number} index - the index of the proposal being edited (-1 means new)\n     * @param {String} phase - for which phase (phase1 or phase2)\n     */\n    onEdit: function onEdit(index, phase) {\n      this.$vuntangle.dialog.show({\n        title: index === -1 ? this.$t(\"add_\".concat(phase, \"_proposal\")) : this.$t(\"edit_\".concat(phase, \"_proposal\")),\n        component: IpsecCipherDialog,\n        width: 400,\n        actionLabel: index === -1 ? this.$t('add') : this.$t('update'),\n        componentProps: {\n          phase: phase,\n          list: this.ipsec[phase],\n          index: index\n        }\n      });\n    },\n    /**\n     * Removes a proposal from list\n     * @param {Number} index - the index of the proposal to be removed\n     * @param {String} phase - from which phase (phase1 or phase2)\n     */\n    onDelete: function onDelete(index, phase) {\n      this.ipsec[phase].splice(index, 1);\n    },\n    /**\n     * Method used to re-arrange records after manual sorting via drag\n     * When moving records, their order is not reflected in the initial row data\n     * A drag end hook was added to handle this order by iterating internal grid nodes\n     */\n    onRowDragEnd: function onRowDragEnd(phase) {\n      var newOrder = [];\n      var grid = this.$refs[phase];\n      grid.gridOptions.api.forEachNode(function (row) {\n        newOrder.push(row.data);\n      });\n      this.ipsec[phase] = newOrder;\n    },\n    /**\n     * Prevents entering \"e\", \"-\" and \".\" chars in the lifetime number field\n     * @param {Object} e - keydown event\n     */\n    preventExtraChars: function preventExtraChars(e) {\n      if (e.keyCode === 69 || e.keyCode === 189 || e.keyCode === 190) {\n        e.preventDefault();\n      }\n    }\n  }\n};","map":{"version":3,"names":["draggable","IpsecCipherDialog","IpsecCipherItem","components","inject","data","drag","computed","ipsec","_ref","$intf","dragOptions","animation","group","disabled","ghostClass","methods","onEdit","index","phase","$vuntangle","dialog","show","title","$t","concat","component","width","actionLabel","componentProps","list","onDelete","splice","onRowDragEnd","newOrder","grid","$refs","gridOptions","api","forEachNode","row","push","preventExtraChars","e","keyCode","preventDefault"],"sources":["node_modules/vuntangle/src/shared/SettingsInterface/components/ipsec/IpsecCipherSuites.vue"],"sourcesContent":["<!--\n  component for editing phase 1 and phase 2 proposals for IPsec service/tunnel\n-->\n<template>\n  <div>\n    <v-row class=\"mt-4\">\n      <v-col>\n        <p class=\"font-weight-bold mb-2\">{{ $t('cipher_phase1_title') }}</p>\n\n        <u-alert v-if=\"!ipsec.phase1.length\" class=\"mb-1\">\n          <span>{{ $t('no_ciphers_defined') }}</span>\n        </u-alert>\n\n        <draggable v-model=\"ipsec.phase1\" v-bind=\"dragOptions\" @start=\"drag = true\" @end=\"drag = false\">\n          <transition-group>\n            <ipsec-cipher-item\n              v-for=\"(item, index) in ipsec.phase1\"\n              :key=\"`${item.encryption}-${item.hash}-${item.group}`\"\n              :ipsec=\"ipsec\"\n              :index=\"index\"\n              :item=\"item\"\n              phase=\"phase1\"\n            />\n          </transition-group>\n        </draggable>\n\n        <div class=\"d-flex align-center\">\n          <span v-if=\"ipsec.phase1.length > 1\" class=\"caption grey--text\">\n            {{ $t('ipsec_ciphers_drag') }}\n          </span>\n          <v-spacer />\n          <u-btn class=\"my-2\" @click=\"onEdit(-1, 'phase1')\">{{ $t('add_proposal') }}</u-btn>\n        </div>\n\n        <!-- phase1 lifetime -->\n        <p class=\"font-weight-bold mb-2 mt-4\">\n          {{ $t('phase1_lifetime') }}\n          <v-tooltip right transition=\"none\">\n            <template #activator=\"{ on, attrs }\">\n              <v-icon v-bind=\"attrs\" v-on=\"on\"> mdi-information </v-icon>\n            </template>\n            <span>{{ $t('phase1_lifetime_hint') }}</span>\n          </v-tooltip>\n        </p>\n        <div class=\"d-flex align-center\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|min_value:3600|max_value:86400\">\n            <u-text-field\n              v-model=\"ipsec.phase1Lifetime\"\n              :label=\"$t('lifetime')\"\n              type=\"number\"\n              :error-messages=\"errors\"\n              :suffix=\"$t('seconds')\"\n              @keydown=\"preventExtraChars\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </div>\n      </v-col>\n\n      <v-divider vertical class=\"mx-8\" />\n\n      <v-col>\n        <p class=\"font-weight-bold mb-2\">{{ $t('cipher_phase2_title') }}</p>\n\n        <u-alert v-if=\"!ipsec.phase2.length\" class=\"mb-1\">\n          <span>{{ $t('no_ciphers_defined') }}</span>\n        </u-alert>\n\n        <draggable v-model=\"ipsec.phase2\" v-bind=\"dragOptions\" @start=\"drag = true\" @end=\"drag = false\">\n          <transition-group>\n            <ipsec-cipher-item\n              v-for=\"(item, index) in ipsec.phase2\"\n              :key=\"`${item.encryption}-${item.hash}-${item.group}`\"\n              :ipsec=\"ipsec\"\n              :index=\"index\"\n              :item=\"item\"\n              phase=\"phase2\"\n            />\n          </transition-group>\n        </draggable>\n\n        <div class=\"d-flex align-center\">\n          <span v-if=\"ipsec.phase2.length > 1\" class=\"caption grey--text\">\n            {{ $t('ipsec_ciphers_drag') }}\n          </span>\n          <v-spacer />\n          <u-btn class=\"my-2\" @click=\"onEdit(-1, 'phase2')\">{{ $t('add_proposal') }}</u-btn>\n        </div>\n\n        <!-- phase2 lifetime -->\n        <p class=\"font-weight-bold mb-2 mt-4\">\n          {{ $t('phase2_lifetime') }}\n          <v-tooltip right transition=\"none\">\n            <template #activator=\"{ on, attrs }\">\n              <v-icon v-bind=\"attrs\" v-on=\"on\"> mdi-information </v-icon>\n            </template>\n            <span>{{ $t('phase2_lifetime_hint') }}</span>\n          </v-tooltip>\n        </p>\n        <div class=\"d-flex align-center\">\n          <ValidationProvider v-slot=\"{ errors }\" rules=\"required|min_value:3600|max_value:86400\">\n            <u-text-field\n              v-model=\"ipsec.phase2Lifetime\"\n              :label=\"$t('lifetime')\"\n              type=\"number\"\n              :error-messages=\"errors\"\n              :suffix=\"$t('seconds')\"\n              @keydown=\"preventExtraChars\"\n            >\n              <template v-if=\"errors.length\" #append><u-errors-tooltip :errors=\"errors\" /></template>\n            </u-text-field>\n          </ValidationProvider>\n        </div>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\n  import draggable from 'vuedraggable'\n  import IpsecCipherDialog from './IpsecCipherDialog.vue'\n  import IpsecCipherItem from './IpsecCipherItem.vue'\n\n  export default {\n    components: { draggable, IpsecCipherItem },\n    inject: ['$intf'],\n    data() {\n      return {\n        drag: false,\n      }\n    },\n\n    computed: {\n      ipsec: ({ $intf }) => $intf().ipsec,\n\n      dragOptions() {\n        return {\n          animation: 200,\n          group: 'description',\n          disabled: false,\n          ghostClass: 'ghost',\n        }\n      },\n    },\n\n    methods: {\n      /**\n       * Shows an editing dialog for proposal\n       * @param {Number} index - the index of the proposal being edited (-1 means new)\n       * @param {String} phase - for which phase (phase1 or phase2)\n       */\n      onEdit(index, phase) {\n        this.$vuntangle.dialog.show({\n          title: index === -1 ? this.$t(`add_${phase}_proposal`) : this.$t(`edit_${phase}_proposal`),\n          component: IpsecCipherDialog,\n          width: 400,\n          actionLabel: index === -1 ? this.$t('add') : this.$t('update'),\n          componentProps: {\n            phase,\n            list: this.ipsec[phase],\n            index,\n          },\n        })\n      },\n\n      /**\n       * Removes a proposal from list\n       * @param {Number} index - the index of the proposal to be removed\n       * @param {String} phase - from which phase (phase1 or phase2)\n       */\n      onDelete(index, phase) {\n        this.ipsec[phase].splice(index, 1)\n      },\n\n      /**\n       * Method used to re-arrange records after manual sorting via drag\n       * When moving records, their order is not reflected in the initial row data\n       * A drag end hook was added to handle this order by iterating internal grid nodes\n       */\n      onRowDragEnd(phase) {\n        const newOrder = []\n        const grid = this.$refs[phase]\n        grid.gridOptions.api.forEachNode(row => {\n          newOrder.push(row.data)\n        })\n        this.ipsec[phase] = newOrder\n      },\n      /**\n       * Prevents entering \"e\", \"-\" and \".\" chars in the lifetime number field\n       * @param {Object} e - keydown event\n       */\n      preventExtraChars(e) {\n        if (e.keyCode === 69 || e.keyCode === 189 || e.keyCode === 190) {\n          e.preventDefault()\n        }\n      },\n    },\n  }\n</script>\n"],"mappings":";;AAwHA,OAAAA,SAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,eAAA;AAEA;EACAC,UAAA;IAAAH,SAAA,EAAAA,SAAA;IAAAE,eAAA,EAAAA;EAAA;EACAE,MAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,IAAA;IACA;EACA;EAEAC,QAAA;IACAC,KAAA,WAAAA,MAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MAAA,OAAAA,KAAA,GAAAF,KAAA;IAAA;IAEAG,WAAA,WAAAA,YAAA;MACA;QACAC,SAAA;QACAC,KAAA;QACAC,QAAA;QACAC,UAAA;MACA;IACA;EACA;EAEAC,OAAA;IACA;AACA;AACA;AACA;AACA;IACAC,MAAA,WAAAA,OAAAC,KAAA,EAAAC,KAAA;MACA,KAAAC,UAAA,CAAAC,MAAA,CAAAC,IAAA;QACAC,KAAA,EAAAL,KAAA,eAAAM,EAAA,QAAAC,MAAA,CAAAN,KAAA,uBAAAK,EAAA,SAAAC,MAAA,CAAAN,KAAA;QACAO,SAAA,EAAAzB,iBAAA;QACA0B,KAAA;QACAC,WAAA,EAAAV,KAAA,eAAAM,EAAA,eAAAA,EAAA;QACAK,cAAA;UACAV,KAAA,EAAAA,KAAA;UACAW,IAAA,OAAAtB,KAAA,CAAAW,KAAA;UACAD,KAAA,EAAAA;QACA;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAa,QAAA,WAAAA,SAAAb,KAAA,EAAAC,KAAA;MACA,KAAAX,KAAA,CAAAW,KAAA,EAAAa,MAAA,CAAAd,KAAA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAe,YAAA,WAAAA,aAAAd,KAAA;MACA,IAAAe,QAAA;MACA,IAAAC,IAAA,QAAAC,KAAA,CAAAjB,KAAA;MACAgB,IAAA,CAAAE,WAAA,CAAAC,GAAA,CAAAC,WAAA,WAAAC,GAAA;QACAN,QAAA,CAAAO,IAAA,CAAAD,GAAA,CAAAnC,IAAA;MACA;MACA,KAAAG,KAAA,CAAAW,KAAA,IAAAe,QAAA;IACA;IACA;AACA;AACA;AACA;IACAQ,iBAAA,WAAAA,kBAAAC,CAAA;MACA,IAAAA,CAAA,CAAAC,OAAA,WAAAD,CAAA,CAAAC,OAAA,YAAAD,CAAA,CAAAC,OAAA;QACAD,CAAA,CAAAE,cAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}