{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nexport default {\n  inject: {\n    $totalCount: {\n      \"default\": undefined\n    },\n    $pagination: {\n      \"default\": {\n        pageNumber: 1,\n        pageSize: 100\n      }\n    }\n  },\n  props: {\n    fetching: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  computed: {\n    totalCount: function totalCount(_ref) {\n      var $totalCount = _ref.$totalCount;\n      return $totalCount ? $totalCount() : undefined;\n    },\n    pagination: function pagination(_ref2) {\n      var $pagination = _ref2.$pagination;\n      return $pagination();\n    },\n    pageNumbers: function pageNumbers(_ref3) {\n      var totalCount = _ref3.totalCount,\n        pagination = _ref3.pagination;\n      return Math.ceil(totalCount / pagination.pageSize);\n    },\n    prevDisabled: function prevDisabled(_ref4) {\n      var pagination = _ref4.pagination;\n      return pagination.pageNumber === 1;\n    },\n    nextDisabled: function nextDisabled(_ref5) {\n      var pagination = _ref5.pagination,\n        pageNumbers = _ref5.pageNumbers;\n      return pagination.pageNumber === pageNumbers;\n    },\n    counters: function counters(_ref6) {\n      var pagination = _ref6.pagination,\n        totalCount = _ref6.totalCount,\n        pageNumbers = _ref6.pageNumbers;\n      return \"\".concat((pagination.pageNumber - 1) * pagination.pageSize + 1, \" to \").concat(pagination.pageNumber < pageNumbers ? (pagination.pageNumber - 1) * pagination.pageSize + pagination.pageSize : totalCount, \" of \").concat(totalCount);\n    }\n  },\n  methods: {\n    goFirst: function goFirst() {\n      this.pagination.pageNumber = 1;\n      this.refetch();\n    },\n    goPrev: function goPrev() {\n      this.pagination.pageNumber -= 1;\n      this.refetch();\n    },\n    goNext: function goNext() {\n      this.pagination.pageNumber += 1;\n      this.refetch();\n    },\n    goLast: function goLast() {\n      this.pagination.pageNumber = this.pageNumbers;\n      this.refetch();\n    },\n    setPageSize: function setPageSize() {\n      if (Number.isNaN(this.pagination.pageSize) || !Number.isInteger(this.pagination.pageSize)) return;\n      if (this.pagination.pageSize < 10) {\n        this.pagination.pageSize = 10;\n      } else if (this.pagination.pageSize > 3000) {\n        this.pagination.pageSize = 3000;\n      }\n      this.pagination.pageNumber = 1;\n      this.refetch();\n    },\n    refetch: function refetch() {\n      this.$emit('fetch-data');\n    }\n  }\n};","map":{"version":3,"names":["inject","$totalCount","undefined","$pagination","pageNumber","pageSize","props","fetching","type","Boolean","computed","totalCount","_ref","pagination","_ref2","pageNumbers","_ref3","Math","ceil","prevDisabled","_ref4","nextDisabled","_ref5","counters","_ref6","concat","methods","goFirst","refetch","goPrev","goNext","goLast","setPageSize","Number","isNaN","isInteger","$emit"],"sources":["node_modules/vuntangle/src/components/UGrid/components/Pagination.vue"],"sourcesContent":["<template>\n  <v-card v-if=\"totalCount\" flat :disabled=\"fetching\">\n    <v-divider />\n    <div class=\"d-flex justify-end align-center py-1\">\n      <v-spacer class=\"flex-grow-1\" />\n      <span class=\"mr-2\">Page size:</span>\n      <v-combobox\n        v-model.number=\"pagination.pageSize\"\n        :items=\"[50, 100, 500, 1000]\"\n        style=\"max-width: 120px\"\n        outlined\n        hide-details\n        dense\n        @input=\"setPageSize()\"\n      />\n      <span class=\"mx-12\">{{ counters }}</span>\n      <v-btn icon :disabled=\"prevDisabled\" @click=\"goFirst()\"><v-icon>mdi-page-first</v-icon></v-btn>\n      <v-btn icon :disabled=\"prevDisabled\" @click=\"goPrev()\"><v-icon>mdi-chevron-left</v-icon></v-btn>\n      <span class=\"px-2 text-caption\">Page {{ pagination.pageNumber }} of {{ pageNumbers }}</span>\n      <v-btn icon :disabled=\"nextDisabled\" @click=\"goNext()\"><v-icon>mdi-chevron-right</v-icon></v-btn>\n      <v-btn icon :disabled=\"nextDisabled\" @click=\"goLast()\"><v-icon>mdi-page-last</v-icon></v-btn>\n    </div>\n  </v-card>\n</template>\n\n<script>\n  export default {\n    inject: {\n      $totalCount: {\n        default: undefined,\n      },\n      $pagination: {\n        default: {\n          pageNumber: 1,\n          pageSize: 100,\n        },\n      },\n    },\n\n    props: {\n      fetching: { type: Boolean, default: false },\n    },\n\n    computed: {\n      totalCount: ({ $totalCount }) => ($totalCount ? $totalCount() : undefined),\n      pagination: ({ $pagination }) => $pagination(),\n\n      pageNumbers: ({ totalCount, pagination }) => Math.ceil(totalCount / pagination.pageSize),\n      prevDisabled: ({ pagination }) => pagination.pageNumber === 1,\n      nextDisabled: ({ pagination, pageNumbers }) => pagination.pageNumber === pageNumbers,\n      counters: ({ pagination, totalCount, pageNumbers }) =>\n        `${(pagination.pageNumber - 1) * pagination.pageSize + 1} to ${\n          pagination.pageNumber < pageNumbers\n            ? (pagination.pageNumber - 1) * pagination.pageSize + pagination.pageSize\n            : totalCount\n        } of ${totalCount}`,\n    },\n\n    methods: {\n      goFirst() {\n        this.pagination.pageNumber = 1\n        this.refetch()\n      },\n      goPrev() {\n        this.pagination.pageNumber -= 1\n        this.refetch()\n      },\n      goNext() {\n        this.pagination.pageNumber += 1\n        this.refetch()\n      },\n      goLast() {\n        this.pagination.pageNumber = this.pageNumbers\n        this.refetch()\n      },\n\n      setPageSize() {\n        if (Number.isNaN(this.pagination.pageSize) || !Number.isInteger(this.pagination.pageSize)) return\n        if (this.pagination.pageSize < 10) {\n          this.pagination.pageSize = 10\n        } else if (this.pagination.pageSize > 3000) {\n          this.pagination.pageSize = 3000\n        }\n        this.pagination.pageNumber = 1\n        this.refetch()\n      },\n\n      refetch() {\n        this.$emit('fetch-data')\n      },\n    },\n  }\n</script>\n"],"mappings":";;;AA0BA;EACAA,MAAA;IACAC,WAAA;MACA,WAAAC;IACA;IACAC,WAAA;MACA;QACAC,UAAA;QACAC,QAAA;MACA;IACA;EACA;EAEAC,KAAA;IACAC,QAAA;MAAAC,IAAA,EAAAC,OAAA;MAAA;IAAA;EACA;EAEAC,QAAA;IACAC,UAAA,WAAAA,WAAAC,IAAA;MAAA,IAAAX,WAAA,GAAAW,IAAA,CAAAX,WAAA;MAAA,OAAAA,WAAA,GAAAA,WAAA,KAAAC,SAAA;IAAA;IACAW,UAAA,WAAAA,WAAAC,KAAA;MAAA,IAAAX,WAAA,GAAAW,KAAA,CAAAX,WAAA;MAAA,OAAAA,WAAA;IAAA;IAEAY,WAAA,WAAAA,YAAAC,KAAA;MAAA,IAAAL,UAAA,GAAAK,KAAA,CAAAL,UAAA;QAAAE,UAAA,GAAAG,KAAA,CAAAH,UAAA;MAAA,OAAAI,IAAA,CAAAC,IAAA,CAAAP,UAAA,GAAAE,UAAA,CAAAR,QAAA;IAAA;IACAc,YAAA,WAAAA,aAAAC,KAAA;MAAA,IAAAP,UAAA,GAAAO,KAAA,CAAAP,UAAA;MAAA,OAAAA,UAAA,CAAAT,UAAA;IAAA;IACAiB,YAAA,WAAAA,aAAAC,KAAA;MAAA,IAAAT,UAAA,GAAAS,KAAA,CAAAT,UAAA;QAAAE,WAAA,GAAAO,KAAA,CAAAP,WAAA;MAAA,OAAAF,UAAA,CAAAT,UAAA,KAAAW,WAAA;IAAA;IACAQ,QAAA,WAAAA,SAAAC,KAAA;MAAA,IAAAX,UAAA,GAAAW,KAAA,CAAAX,UAAA;QAAAF,UAAA,GAAAa,KAAA,CAAAb,UAAA;QAAAI,WAAA,GAAAS,KAAA,CAAAT,WAAA;MAAA,UAAAU,MAAA,CACA,CAAAZ,UAAA,CAAAT,UAAA,QAAAS,UAAA,CAAAR,QAAA,cAAAoB,MAAA,CACAZ,UAAA,CAAAT,UAAA,GAAAW,WAAA,GACA,CAAAF,UAAA,CAAAT,UAAA,QAAAS,UAAA,CAAAR,QAAA,GAAAQ,UAAA,CAAAR,QAAA,GACAM,UAAA,UAAAc,MAAA,CACAd,UAAA;IAAA;EACA;EAEAe,OAAA;IACAC,OAAA,WAAAA,QAAA;MACA,KAAAd,UAAA,CAAAT,UAAA;MACA,KAAAwB,OAAA;IACA;IACAC,MAAA,WAAAA,OAAA;MACA,KAAAhB,UAAA,CAAAT,UAAA;MACA,KAAAwB,OAAA;IACA;IACAE,MAAA,WAAAA,OAAA;MACA,KAAAjB,UAAA,CAAAT,UAAA;MACA,KAAAwB,OAAA;IACA;IACAG,MAAA,WAAAA,OAAA;MACA,KAAAlB,UAAA,CAAAT,UAAA,QAAAW,WAAA;MACA,KAAAa,OAAA;IACA;IAEAI,WAAA,WAAAA,YAAA;MACA,IAAAC,MAAA,CAAAC,KAAA,MAAArB,UAAA,CAAAR,QAAA,MAAA4B,MAAA,CAAAE,SAAA,MAAAtB,UAAA,CAAAR,QAAA;MACA,SAAAQ,UAAA,CAAAR,QAAA;QACA,KAAAQ,UAAA,CAAAR,QAAA;MACA,gBAAAQ,UAAA,CAAAR,QAAA;QACA,KAAAQ,UAAA,CAAAR,QAAA;MACA;MACA,KAAAQ,UAAA,CAAAT,UAAA;MACA,KAAAwB,OAAA;IACA;IAEAA,OAAA,WAAAA,QAAA;MACA,KAAAQ,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}