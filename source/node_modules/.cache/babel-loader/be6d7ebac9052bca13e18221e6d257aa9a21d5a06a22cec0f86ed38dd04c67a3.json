{"ast":null,"code":"import _toConsumableArray from \"/home/shubham/Desktop/ngfw_pkgs/untangle-vue-ui/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { VCard, VRow, VCol, VList, VListItem, VListItemGroup, VListItemContent, VListItemTitle, VListItemAvatar, VSpacer, VSwitch, VDivider, VCheckbox, VAvatar } from 'vuetify/lib';\nimport cloneDeep from 'lodash/cloneDeep';\nimport util from '../../../plugins/util';\nexport default {\n  components: {\n    VCard: VCard,\n    VRow: VRow,\n    VCol: VCol,\n    VList: VList,\n    VListItem: VListItem,\n    VListItemGroup: VListItemGroup,\n    VListItemContent: VListItemContent,\n    VListItemTitle: VListItemTitle,\n    VListItemAvatar: VListItemAvatar,\n    VSpacer: VSpacer,\n    VSwitch: VSwitch,\n    VDivider: VDivider,\n    VCheckbox: VCheckbox,\n    VAvatar: VAvatar\n  },\n  props: {\n    settings: {\n      type: Object,\n      \"default\": function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      countriesMap: util.country_codes,\n      filter: null,\n      selectedUnblocked: [],\n      selectedBlocked: [],\n      countriesDisplayed: []\n    };\n  },\n  computed: {\n    /**\n     * array of countries as generated from map such as:\n     * [\n     *    ...\n     *    { code: 'CN', name: 'Country Name' },\n     *    ...\n     * ]\n     */\n    countriesArray: function countriesArray() {\n      var sortedArray = cloneDeep(this.countriesDisplayed);\n      sortedArray.sort(function (a, b) {\n        var comparison = 0;\n        if (a.name < b.name) {\n          comparison = -1;\n        } else if (a.name > b.name) {\n          comparison = 1;\n        }\n        return comparison;\n      });\n      return sortedArray;\n    },\n    /**\n     * Array of unblocked filtered countries (left side listing)\n     */\n    unblockedFiltered: function unblockedFiltered() {\n      var _this = this;\n      return this.countriesArray.filter(function (c) {\n        return !_this.settings.blockedCountries.includes(c.code);\n      });\n    },\n    /**\n     * Count of unblocked countries\n     */\n    unblockedAllSize: function unblockedAllSize() {\n      return this.countriesArray.length - this.settings.blockedCountries.length;\n    },\n    /**\n     * Array of blocked filtered countries (right side listing)\n     */\n    blockedFiltered: function blockedFiltered() {\n      var _this2 = this;\n      return this.countriesArray.filter(function (c) {\n        return _this2.settings.blockedCountries.includes(c.code);\n      });\n    },\n    blockUnknown: {\n      get: function get() {\n        return this.settings.blockedCountries.includes('XU');\n      },\n      set: function set(value) {\n        if (value) {\n          var blockedCountriesCopy = cloneDeep(this.settings.blockedCountries);\n          blockedCountriesCopy.push('XU');\n          this.$set(this.settings, 'blockedCountries', blockedCountriesCopy);\n        } else {\n          var items = [];\n          this.settings.blockedCountries.forEach(function (code) {\n            if (code !== 'XU') {\n              items.push(code);\n            }\n          });\n          this.$set(this.settings, 'blockedCountries', items);\n        }\n      }\n    }\n  },\n  watch: {\n    filter: {\n      handler: function handler(filter) {\n        var _this3 = this;\n        // when filter updates, update the hidden values\n        if (!filter) {\n          this.countriesArray.forEach(function (c) {\n            return c.hidden = false;\n          });\n        } else {\n          this.countriesArray.forEach(function (c) {\n            if (!_this3.blockedFiltered.includes(c.code) && !c.name.toLowerCase().includes(_this3.filter.toLowerCase())) {\n              c.hidden = true;\n            } else {\n              c.hidden = false;\n            }\n          });\n        }\n      }\n    }\n  },\n  created: function created() {\n    var _this4 = this;\n    // remove LOCAL (XL) and Unknown (XU) from the listing\n    delete this.countriesMap.XL;\n    delete this.countriesMap.XU;\n    this.countriesDisplayed = _toConsumableArray(Object.keys(this.countriesMap).map(function (key) {\n      return {\n        code: key,\n        name: _this4.countriesMap[key],\n        hidden: false\n      };\n    }));\n  },\n  methods: {\n    updateSelected: function updateSelected(type, country) {\n      if (country.code && type === 'unblocked') {\n        var index = this.selectedUnblocked.indexOf(country.code);\n        if (this.selectedUnblocked.includes(country.code) && index > -1) {\n          this.selectedUnblocked.splice(index, 1);\n        } else {\n          this.selectedUnblocked.push(country.code);\n        }\n      }\n      if (country.code && type === 'blocked') {\n        var _index = this.selectedBlocked.indexOf(country.code);\n        if (this.selectedBlocked.includes(country.code) && _index > -1) {\n          this.selectedBlocked.splice(_index, 1);\n        } else {\n          this.selectedBlocked.push(country.code);\n        }\n      }\n    },\n    /**\n     * Selects all (un)blocked countries\n     * cannot be combined with selectClear because of the check for !this.selectedUnblocked.includes(c.code)\n     * @param {string} type - `unblocked` or `blocked`\n     */\n    selectAll: function selectAll(type) {\n      var _this5 = this;\n      var items = [];\n      if (type === 'unblocked') {\n        this.unblockedFiltered.forEach(function (c) {\n          if (!c.hidden && !_this5.selectedUnblocked.includes(c.code)) {\n            items.push(c);\n          }\n        });\n        items.forEach(function (item) {\n          return _this5.updateSelected(type, item);\n        });\n      }\n      if (type === 'blocked') {\n        this.blockedFiltered.forEach(function (c) {\n          if (!c.hidden && !_this5.selectedBlocked.includes(c.code)) {\n            items.push(c);\n          }\n        });\n        items.forEach(function (item) {\n          return _this5.updateSelected(type, item);\n        });\n      }\n    },\n    /**\n     * Invert selection of  (un)blocked countries\n     * @param {string} type - `unblocked` or `blocked`\n     */\n    selectInverse: function selectInverse(type) {\n      var _this6 = this;\n      var items = [];\n      if (type === 'unblocked') {\n        this.unblockedFiltered.forEach(function (c) {\n          if (!c.hidden) {\n            items.push(c);\n          }\n        });\n        items.forEach(function (item) {\n          return _this6.updateSelected(type, item);\n        });\n      }\n      if (type === 'blocked') {\n        this.blockedFiltered.forEach(function (c) {\n          if (!c.hidden) {\n            items.push(c);\n          }\n        });\n        items.forEach(function (item) {\n          return _this6.updateSelected(type, item);\n        });\n      }\n    },\n    /**\n     * Clears all filtered and selected (un)blocked countries\n     * cannot be combined with selectAll because of the check for this.selectedUnblocked.includes(c.code)\n     * @param {string} type - `unblocked` or `blocked`\n     */\n    selectClear: function selectClear(type) {\n      var _this7 = this;\n      var items = [];\n      if (type === 'unblocked') {\n        this.unblockedFiltered.forEach(function (c) {\n          if (!c.hidden && _this7.selectedUnblocked.includes(c.code)) {\n            items.push(c);\n          }\n        });\n        items.forEach(function (item) {\n          return _this7.updateSelected(type, item);\n        });\n      }\n      if (type === 'blocked') {\n        this.blockedFiltered.forEach(function (c) {\n          if (!c.hidden && _this7.selectedBlocked.includes(c.code)) {\n            items.push(c);\n          }\n        });\n        items.forEach(function (item) {\n          return _this7.updateSelected(type, item);\n        });\n      }\n    },\n    /**\n     * Adds selected countries to the block settings\n     */\n    onBlockSelected: function onBlockSelected() {\n      var blockedCountriesCopy = cloneDeep(this.settings.blockedCountries);\n      blockedCountriesCopy = blockedCountriesCopy.concat(this.selectedUnblocked);\n      this.selectedUnblocked = [];\n      this.$set(this.settings, 'blockedCountries', blockedCountriesCopy);\n    },\n    /**\n     * Remove selected countries from the block settings\n     */\n    onUnblockSelected: function onUnblockSelected() {\n      var _this8 = this;\n      var items = [];\n      this.settings.blockedCountries.forEach(function (code) {\n        if (!_this8.selectedBlocked.includes(code)) {\n          items.push(code);\n        }\n      });\n      this.selectedBlocked = [];\n      this.$set(this.settings, 'blockedCountries', items);\n    }\n  }\n};","map":{"version":3,"names":["VCard","VRow","VCol","VList","VListItem","VListItemGroup","VListItemContent","VListItemTitle","VListItemAvatar","VSpacer","VSwitch","VDivider","VCheckbox","VAvatar","cloneDeep","util","components","props","settings","type","Object","default","data","countriesMap","country_codes","filter","selectedUnblocked","selectedBlocked","countriesDisplayed","computed","countriesArray","sortedArray","sort","a","b","comparison","name","unblockedFiltered","_this","c","blockedCountries","includes","code","unblockedAllSize","length","blockedFiltered","_this2","blockUnknown","get","set","value","blockedCountriesCopy","push","$set","items","forEach","watch","handler","_this3","hidden","toLowerCase","created","_this4","XL","XU","_toConsumableArray","keys","map","key","methods","updateSelected","country","index","indexOf","splice","selectAll","_this5","item","selectInverse","_this6","selectClear","_this7","onBlockSelected","concat","onUnblockSelected","_this8"],"sources":["node_modules/vuntangle/src/shared/SettingsGeoipFilter/components/BlockCountries.vue"],"sourcesContent":["<template>\n  <div>\n    <h3 class=\"d-flex\">\n      <span>{{ $vuntangle.$t('block_countries') }}</span>\n    </h3>\n    <p>{{ $vuntangle.$t('block_countries_description') }}</p>\n\n    <!-- input for generic country filter -->\n    <u-text-field\n      v-model=\"filter\"\n      prepend-inner-icon=\"mdi-magnify\"\n      :placeholder=\"$vuntangle.$t('filter')\"\n      clearable\n      class=\"my-4\"\n    />\n\n    <v-row>\n      <!-- Available (non-blocked) countries section -->\n      <v-col>\n        <p class=\"font-weight-bold\">{{ $vuntangle.$t('select_countries_to_be_blocked') }}</p>\n        <!-- Selection options -->\n        <div class=\"d-flex align-center mb-2\">\n          <u-btn text :min-width=\"null\" :disabled=\"!unblockedFiltered.length\" @click=\"selectAll('unblocked')\">\n            {{ $vuntangle.$t('all') }}\n          </u-btn>\n          <u-btn text :min-width=\"null\" :disabled=\"!selectedUnblocked.length\" @click=\"selectInverse('unblocked')\">\n            {{ $vuntangle.$t('invert') }}\n          </u-btn>\n          <u-btn text :min-width=\"null\" :disabled=\"!selectedUnblocked.length\" @click=\"selectClear('unblocked')\">\n            {{ $vuntangle.$t('clear') }}\n          </u-btn>\n          <v-spacer />\n          <u-btn\n            :disabled=\"\n              !selectedUnblocked.length ||\n              selectedUnblocked.length + settings.blockedCountries.length === countriesArray.length\n            \"\n            @click=\"onBlockSelected\"\n          >\n            {{ $vuntangle.$t('block_selected') }}\n          </u-btn>\n        </div>\n\n        <v-card outlined>\n          <!-- info if all countries are selected to be blocked -->\n          <u-alert\n            v-if=\"selectedUnblocked.length + settings.blockedCountries.length === countriesDisplayed.length\"\n            class=\"mb-0\"\n          >\n            {{ $vuntangle.$t('block_all_countries_info') }}\n          </u-alert>\n          <!-- info if countries are filtered -->\n          <u-alert v-if=\"filter && settings.blockedCountries.length < countriesArray.length\" class=\"mb-0\">\n            <div class=\"d-flex align-center\">\n              <span>{{\n                $vuntangle.$t('showing_filtered_countries', [\n                  unblockedFiltered.filter(c => !c.hidden).length,\n                  unblockedAllSize,\n                ])\n              }}</span>\n              <v-spacer />\n              <u-btn text @click=\"filter = null\">{{ $vuntangle.$t('clear_filter') }}</u-btn>\n            </div>\n          </u-alert>\n          <!-- actual unblocked countries listing -->\n          <v-list\n            v-model=\"selectedUnblocked\"\n            class=\"v-list-item--dense\"\n            height=\"55vh\"\n            style=\"overflow-y: auto\"\n            multiple\n          >\n            <v-list-item-group\n              v-for=\"country in unblockedFiltered\"\n              :key=\"country.code\"\n              :value=\"selectedUnblocked.includes(country.code)\"\n              :ripple=\"false\"\n            >\n              <v-list-item\n                v-if=\"!country.hidden\"\n                class=\"mb-n4 mt-n4\"\n                :ripple=\"false\"\n                :input-value=\"selectedUnblocked.includes(country.code)\"\n                @click=\"updateSelected('unblocked', country)\"\n              >\n                <v-checkbox\n                  class=\"align-center\"\n                  :input-value=\"selectedUnblocked.includes(country.code)\"\n                  :ripple=\"false\"\n                  @onClick=\"updateSelected('unblocked', country)\"\n                ></v-checkbox>\n                <v-list-item-avatar class=\"my-0 mx-2\">\n                  <v-avatar color=\"green\" size=\"32\">\n                    <span class=\"white--text\">{{ country.code }}</span>\n                  </v-avatar>\n                </v-list-item-avatar>\n                <v-list-item-content>\n                  <v-list-item-title class=\"text-uppercase\" v-text=\"country.name\"></v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list-item-group>\n          </v-list>\n        </v-card>\n      </v-col>\n      <v-col cols=\"1\" class=\"text-center\">\n        <v-divider vertical />\n      </v-col>\n\n      <!-- Blocked countries section -->\n      <v-col>\n        <p class=\"font-weight-bold\">{{ $vuntangle.$t('blocked_countries') }}</p>\n        <!-- Selection options -->\n        <div class=\"d-flex align-center mb-2\">\n          <u-btn text :min-width=\"null\" :disabled=\"!blockedFiltered.length\" @click=\"selectAll('blocked')\">\n            {{ $vuntangle.$t('all') }}\n          </u-btn>\n          <u-btn text :min-width=\"null\" :disabled=\"!selectedBlocked.length\" @click=\"selectInverse('blocked')\">\n            {{ $vuntangle.$t('invert') }}\n          </u-btn>\n          <u-btn text :min-width=\"null\" :disabled=\"!selectedBlocked.length\" @click=\"selectClear('blocked')\">\n            {{ $vuntangle.$t('clear') }}\n          </u-btn>\n          <v-spacer />\n          <u-btn :disabled=\"!selectedBlocked.length\" @click=\"onUnblockSelected\">{{\n            $vuntangle.$t('unblock_selected')\n          }}</u-btn>\n        </div>\n\n        <v-card outlined>\n          <!-- info if no countries are blocked -->\n          <u-alert v-if=\"!settings.blockedCountries.length\" class=\"mb-0\"> {{ $t('no_countries_blocked') }} </u-alert>\n          <!-- info if countries are filtered -->\n          <u-alert v-if=\"filter && settings.blockedCountries.length\" class=\"mb-0\">\n            <div class=\"d-flex align-center\">\n              <span>\n                {{\n                  $vuntangle.$t('showing_filtered_countries', [\n                    blockedFiltered.filter(c => !c.hidden).length,\n                    settings.blockedCountries.length,\n                  ])\n                }}\n              </span>\n              <v-spacer />\n              <u-btn text @click=\"filter = null\">{{ $vuntangle.$t('clear_filter') }}</u-btn>\n            </div>\n          </u-alert>\n          <!-- actual blocked countries listing -->\n          <v-list\n            v-if=\"blockedFiltered.length\"\n            v-model=\"selectedBlocked\"\n            class=\"v-list-item--dense\"\n            height=\"55vh\"\n            style=\"overflow-y: auto\"\n            multiple\n          >\n            <v-list-item-group\n              v-for=\"country in blockedFiltered\"\n              :key=\"country.code\"\n              :value=\"selectedBlocked.includes(country.code)\"\n              :ripple=\"false\"\n            >\n              <v-list-item\n                v-if=\"!country.hidden\"\n                class=\"mb-n4 mt-n4\"\n                :ripple=\"false\"\n                :input-value=\"selectedBlocked.includes(country.code)\"\n                @click=\"updateSelected('blocked', country)\"\n              >\n                <v-checkbox\n                  class=\"align-center\"\n                  :input-value=\"selectedBlocked.includes(country.code)\"\n                  :ripple=\"false\"\n                  @onClick=\"updateSelected('blocked', country)\"\n                ></v-checkbox>\n                <v-list-item-avatar class=\"my-0 mx-2\">\n                  <v-avatar color=\"red\" size=\"32\">\n                    <span class=\"white--text\">{{ country.code }}</span>\n                  </v-avatar>\n                </v-list-item-avatar>\n                <v-list-item-content>\n                  <v-list-item-title class=\"text-uppercase\" v-text=\"country.name\"></v-list-item-title>\n                </v-list-item-content>\n                <!--                </template>-->\n              </v-list-item>\n            </v-list-item-group>\n          </v-list>\n          <v-list v-else height=\"400\" style=\"overflow-y: auto\"> </v-list>\n        </v-card>\n\n        <v-switch v-model=\"blockUnknown\" dense inset hide-details :label=\"$vuntangle.$t('block_unknown_location')\" />\n      </v-col>\n    </v-row>\n  </div>\n</template>\n<script>\n  import {\n    VCard,\n    VRow,\n    VCol,\n    VList,\n    VListItem,\n    VListItemGroup,\n    VListItemContent,\n    VListItemTitle,\n    VListItemAvatar,\n    VSpacer,\n    VSwitch,\n    VDivider,\n    VCheckbox,\n    VAvatar,\n  } from 'vuetify/lib'\n  import cloneDeep from 'lodash/cloneDeep'\n  import util from '../../../plugins/util'\n\n  export default {\n    components: {\n      VCard,\n      VRow,\n      VCol,\n      VList,\n      VListItem,\n      VListItemGroup,\n      VListItemContent,\n      VListItemTitle,\n      VListItemAvatar,\n      VSpacer,\n      VSwitch,\n      VDivider,\n      VCheckbox,\n      VAvatar,\n    },\n    props: {\n      settings: { type: Object, default: () => {} },\n    },\n    data: () => ({\n      countriesMap: util.country_codes,\n      filter: null,\n      selectedUnblocked: [],\n      selectedBlocked: [],\n      countriesDisplayed: [],\n    }),\n    computed: {\n      /**\n       * array of countries as generated from map such as:\n       * [\n       *    ...\n       *    { code: 'CN', name: 'Country Name' },\n       *    ...\n       * ]\n       */\n      countriesArray() {\n        const sortedArray = cloneDeep(this.countriesDisplayed)\n        sortedArray.sort((a, b) => {\n          let comparison = 0\n          if (a.name < b.name) {\n            comparison = -1\n          } else if (a.name > b.name) {\n            comparison = 1\n          }\n          return comparison\n        })\n        return sortedArray\n      },\n\n      /**\n       * Array of unblocked filtered countries (left side listing)\n       */\n      unblockedFiltered() {\n        return this.countriesArray.filter(c => !this.settings.blockedCountries.includes(c.code))\n      },\n\n      /**\n       * Count of unblocked countries\n       */\n      unblockedAllSize() {\n        return this.countriesArray.length - this.settings.blockedCountries.length\n      },\n\n      /**\n       * Array of blocked filtered countries (right side listing)\n       */\n      blockedFiltered() {\n        return this.countriesArray.filter(c => this.settings.blockedCountries.includes(c.code))\n      },\n\n      blockUnknown: {\n        get() {\n          return this.settings.blockedCountries.includes('XU')\n        },\n        set(value) {\n          if (value) {\n            const blockedCountriesCopy = cloneDeep(this.settings.blockedCountries)\n            blockedCountriesCopy.push('XU')\n            this.$set(this.settings, 'blockedCountries', blockedCountriesCopy)\n          } else {\n            const items = []\n            this.settings.blockedCountries.forEach(code => {\n              if (code !== 'XU') {\n                items.push(code)\n              }\n            })\n            this.$set(this.settings, 'blockedCountries', items)\n          }\n        },\n      },\n    },\n    watch: {\n      filter: {\n        handler(filter) {\n          // when filter updates, update the hidden values\n          if (!filter) {\n            this.countriesArray.forEach(c => (c.hidden = false))\n          } else {\n            this.countriesArray.forEach(c => {\n              if (!this.blockedFiltered.includes(c.code) && !c.name.toLowerCase().includes(this.filter.toLowerCase())) {\n                c.hidden = true\n              } else {\n                c.hidden = false\n              }\n            })\n          }\n        },\n      },\n    },\n    created() {\n      // remove LOCAL (XL) and Unknown (XU) from the listing\n      delete this.countriesMap.XL\n      delete this.countriesMap.XU\n      this.countriesDisplayed = [\n        ...Object.keys(this.countriesMap).map(key => ({ code: key, name: this.countriesMap[key], hidden: false })),\n      ]\n    },\n    methods: {\n      updateSelected(type, country) {\n        if (country.code && type === 'unblocked') {\n          const index = this.selectedUnblocked.indexOf(country.code)\n          if (this.selectedUnblocked.includes(country.code) && index > -1) {\n            this.selectedUnblocked.splice(index, 1)\n          } else {\n            this.selectedUnblocked.push(country.code)\n          }\n        }\n        if (country.code && type === 'blocked') {\n          const index = this.selectedBlocked.indexOf(country.code)\n          if (this.selectedBlocked.includes(country.code) && index > -1) {\n            this.selectedBlocked.splice(index, 1)\n          } else {\n            this.selectedBlocked.push(country.code)\n          }\n        }\n      },\n      /**\n       * Selects all (un)blocked countries\n       * cannot be combined with selectClear because of the check for !this.selectedUnblocked.includes(c.code)\n       * @param {string} type - `unblocked` or `blocked`\n       */\n      selectAll(type) {\n        const items = []\n        if (type === 'unblocked') {\n          this.unblockedFiltered.forEach(c => {\n            if (!c.hidden && !this.selectedUnblocked.includes(c.code)) {\n              items.push(c)\n            }\n          })\n          items.forEach(item => this.updateSelected(type, item))\n        }\n        if (type === 'blocked') {\n          this.blockedFiltered.forEach(c => {\n            if (!c.hidden && !this.selectedBlocked.includes(c.code)) {\n              items.push(c)\n            }\n          })\n          items.forEach(item => this.updateSelected(type, item))\n        }\n      },\n\n      /**\n       * Invert selection of  (un)blocked countries\n       * @param {string} type - `unblocked` or `blocked`\n       */\n      selectInverse(type) {\n        const items = []\n        if (type === 'unblocked') {\n          this.unblockedFiltered.forEach(c => {\n            if (!c.hidden) {\n              items.push(c)\n            }\n          })\n          items.forEach(item => this.updateSelected(type, item))\n        }\n        if (type === 'blocked') {\n          this.blockedFiltered.forEach(c => {\n            if (!c.hidden) {\n              items.push(c)\n            }\n          })\n          items.forEach(item => this.updateSelected(type, item))\n        }\n      },\n      /**\n       * Clears all filtered and selected (un)blocked countries\n       * cannot be combined with selectAll because of the check for this.selectedUnblocked.includes(c.code)\n       * @param {string} type - `unblocked` or `blocked`\n       */\n      selectClear(type) {\n        const items = []\n        if (type === 'unblocked') {\n          this.unblockedFiltered.forEach(c => {\n            if (!c.hidden && this.selectedUnblocked.includes(c.code)) {\n              items.push(c)\n            }\n          })\n          items.forEach(item => this.updateSelected(type, item))\n        }\n        if (type === 'blocked') {\n          this.blockedFiltered.forEach(c => {\n            if (!c.hidden && this.selectedBlocked.includes(c.code)) {\n              items.push(c)\n            }\n          })\n          items.forEach(item => this.updateSelected(type, item))\n        }\n      },\n      /**\n       * Adds selected countries to the block settings\n       */\n      onBlockSelected() {\n        let blockedCountriesCopy = cloneDeep(this.settings.blockedCountries)\n        blockedCountriesCopy = blockedCountriesCopy.concat(this.selectedUnblocked)\n        this.selectedUnblocked = []\n        this.$set(this.settings, 'blockedCountries', blockedCountriesCopy)\n      },\n\n      /**\n       * Remove selected countries from the block settings\n       */\n      onUnblockSelected() {\n        const items = []\n        this.settings.blockedCountries.forEach(code => {\n          if (!this.selectedBlocked.includes(code)) {\n            items.push(code)\n          }\n        })\n        this.selectedBlocked = []\n        this.$set(this.settings, 'blockedCountries', items)\n      },\n    },\n  }\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}