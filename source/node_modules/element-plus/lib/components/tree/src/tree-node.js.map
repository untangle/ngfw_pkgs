{"version":3,"file":"tree-node.js","sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { debugWarn, isFunction, isString } from '@element-plus/utils'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.childNodes.length,\n      () => props.node.reInitChecked()\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () => {\n        const nodeKeyProp = tree?.props?.nodeKey\n        if (nodeKeyProp) {\n          const curNodeKey = getNodeKey(props.node)\n          tree.store.value.setCurrentNodeKey(curNodeKey)\n        } else {\n          tree.store.value.setCurrentNode(props.node)\n        }\n      })\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand(() => {\n          ctx.emit('node-expand', props.node.data, props.node, instance)\n        })\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","ElCollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","Node","useNamespace","useNodeExpandEventBroadcast","inject","ref","dragEventsKey","getCurrentInstance","provide","debugWarn","watch","nextTick","getNodeKeyUtil","isFunction","isString","handleCurrentChange","CaretRight","_resolveComponent","_withDirectives","_openBlock","_createElementBlock","_normalizeClass","_withModifiers","_createElementVNode","_normalizeStyle","_createBlock","_withCtx","_resolveDynamicComponent","_createCommentVNode","_createVNode","_Fragment","_renderList","_vShow","_export_sfc"],"mappings":"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"}