#!/usr/bin/env python3
"""
Sync Settings is takes the netork settings JSON file and "syncs" it to the operating system
It reads through the settings and writes the appropriate operating system files such as
/etc/dnsmasq.conf
/etc/hosts
etc etc

This script should be called after changing the settings file to "sync" the settings to the OS.
Afterwards it will be necessary to restart certain services so the new settings will take effect
"""

import sys
import getopt
import json
import copy
import os
import shutil
import stat
import subprocess
import tempfile
import time
import traceback
import collections

# modify sys.path before import
# pylint: disable=wrong-import-position
# need os._exit
# pylint: disable=protected-access
# not globals
# pylint: disable=global-variable-not-assigned
# not globals
# pylint: disable=global-statement
# broad except used to call modules
# pylint: disable=broad-except

# For running in git/dev, prefer loading from git instead of system
if sys.path[0] != "/usr/bin":
    sys.path.insert(0, sys.path[0] + "/../")
import sync

opts = None


class Options(object):
    """Options parses the command line arguments"""

    def __init__(self):
        self.settings_file_names = []
        if os.path.isfile('/etc/debian_version'):
            self.os_name = 'debian'
        elif os.path.isfile('/etc/openwrt_version'):
            self.os_name = 'openwrt'
        if self.os_name == 'openwrt':
            self.default_settings_filename = '/etc/config/settings.json'
        else:
            self.default_settings_filename = '/usr/share/untangle/settings/untangle-vm/network.js'
        self.restart_services = True
        self.test_run = False
        self.create_settings = False
        self.tmpdir = None
        self.tmpdir_delete = None

    def set_settings_filename(self, arg):
        """Set settings filename argument"""
        self.settings_file_names.append(arg)

    def set_os(self, arg):
        """Set os_name argument"""
        self.os_name = arg

    def set_norestart(self, dummy):
        """Disable restart_services flag"""
        self.restart_services = False

    def set_test_run(self, dummy):
        """Set test_run flag"""
        self.test_run = True

    def set_create_settings(self, dummy):
        """Set create_settings flag"""
        self.create_settings = True

    def parse_args(self):
        """Parse command line arguments"""
        handlers = {
            '-f': self.set_settings_filename,
            '-o': self.set_os,
            '-n': self.set_norestart,
            '-s': self.set_test_run,
            '-c': self.set_create_settings,
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'f:o:nsc')
            for opt in optlist:
                handlers[opt[0]](opt[1])

            if len(self.settings_file_names) == 0:
                # If no settings file names specified, use defalt file name.
                self.settings_file_names.append(self.default_settings_filename)
            return args
        except getopt.GetoptError as exc:
            print(exc)
            print_usage()
            exit(1)

def cleanup(code):
    """Cleanup tmpdirs and exit with specified code"""
    cleanup_tmpdirs()
    exit(code)

def print_usage():
    """Print usage"""
    sys.stderr.write("""\
%s Usage:
  optional args:
    -f <file>   : settings filename to sync to OS
    -c          : create settings file if non-existant
    -n          : do not run restart commands (just copy files onto filesystem)
    -s          : do not copy or run restart commands (test run)
    -o          : specify OS manually (debian/openwrt)
""" % sys.argv[0])

def calculate_changed_files(dirname):
    """
    Compares the contents of dirname with the existing filesystem
    Returns a list of files that have changed (using root path)
    """
    cmd = "LC_ALL=C diff -rq / " + dirname + " | grep -v '^Only in' | awk '{print $2}'"
    process = subprocess.Popen(["sh", "-c", cmd], stdout=subprocess.PIPE)
    out, _ = process.communicate()

    changed_files = []

    for line in out.decode('ascii').split():
        if line.strip() != '':
            changed_files.append(line.strip())
    new_files = []
    for root, _, files in os.walk(dirname):
        for file in files:
            rootpath = os.path.join(root, file).replace(dirname, "")
            if not os.path.lexists(rootpath):
                new_files.append(rootpath)

    if len(changed_files) > 0:
        print("Changed files:")
        for filex in changed_files:
            print(filex)
    if len(new_files) > 0:
        print("New files:")
        for filex in new_files:
            print(filex)

    changes = []
    changes.extend(changed_files)
    changes.extend(new_files)
    if len(changes) == 0:
        print("No changed files.")

    return changes

def calculate_deleted_files(dirname_delete):
    """
    Calculate the list of files to be deleted by looking in the dir
    """
    deleted_files = []
    for root, _, files in os.walk(dirname_delete):
        for file in files:
            rootpath = os.path.join(root, file).replace(dirname_delete, "")
            if os.path.lexists(rootpath):
                deleted_files.append(rootpath)
    if len(deleted_files) > 0:
        print("Deleted files:")
        for filex in deleted_files:
            print(filex)

    return deleted_files

def run_cmd(cmd):
    """
    Run the specified command and print the ouput and return the result
    """
    stdin = open(os.devnull, 'rb')
    proc = subprocess.Popen(["sh", "-c", "%s 2>&1" % (cmd)], stdout=subprocess.PIPE, stdin=stdin)
    for line in iter(proc.stdout.readline, ''):
        if line == b'':
            break
        print(line.decode('ascii').strip())
    proc.wait()
    return proc.returncode

def copy_files(dirname):
    """
    Copy the files from dirname into the root filesystem
    """
    global opts
    if opts.os_name == 'debian':
        # First copy all the directories that do not exist
        # then copy remaining files
        # We do this to keep the original permission/ownership on directories, but
        # use the new permission/ownership on files
        cmd = "find " + dirname + \
            " -type d -printf '%P\\n' | while read dir ; do if [ ! -d /$dir ] ; then cp -ar " + \
                dirname + "/$dir /$dir ; fi ; done"
        result = run_cmd(cmd)
        cmd = "find " + dirname + " -type f -printf '%P\\n' | while read file ; do cp --preserve=mode,timestamps --remove-destination " + \
            dirname + "/$file /$file ; done"
        result += run_cmd(cmd)
    else:
        # OpenWRT does not support printf in find, so go back to cp
        run_cmd("/bin/chown -R root:root " + dirname)
        cmd = "/bin/cp -ar " + dirname + "/*" + " /"
        result = run_cmd(cmd)
    if result != 0:
        print("Failed to copy results: " + str(result))
        return result
    run_cmd("/bin/sync")
    return 0

def delete_files(delete_list):
    """
    Delete the files in the list
    """
    print("Deleting files...")
    result_sum = 0
    if delete_list is None:
        return
    for filex in delete_list:
        try:
            cmd = "/bin/rm -f " + filex
            result = run_cmd(cmd)
            if result != 0:
                print("Failed to delete: " + str(result))
                result_sum += result
        except Exception as exc:
            print("Error deleting file: " + filex, exc)

    return result_sum

def run_commands(ops, key):
    """
    Run all the commands for the specified operations
    """
    global opts
    if not opts.restart_services:
        print("Skipping operations " + key + "...")
        return 0
    print("Running operations " + key + "...")
    ret = 0
    for operation in ops:
        oper = sync.registrar.operations.get(operation)
        if oper is None:
            print("Missing operation %s" % str(operation))
            continue
        commands = oper.get(key)
        if commands is None:
            continue
        for command in commands:
            if command is None:
                continue
            print("[" + operation + "]: " + command)
            time1 = time.time()
            result = run_cmd(command)
            time2 = time.time()
            print("[" + operation + "]: " + command +
                  " done. [" + ("%.2f" % (time2 - time1)) + "s]")
            if result != 0:
                print("Error[" + str(result) + "]: " + command)
            ret += result
    return ret

def tee_stdout_log():
    """
    Forks stdout to a log file
    """
    tee = subprocess.Popen(["tee", "-a", "/var/log/sync.log"], stdin=subprocess.PIPE)
    os.dup2(tee.stdin.fileno(), sys.stdout.fileno())
    os.dup2(tee.stdin.fileno(), sys.stderr.fileno())

def drop_permissions():
    """
    Set this process permissions to nobody (drop root permissions)
    """
    os.setegid(65534)  # nogroup
    os.seteuid(65534)  # nobody

def call_without_permissions(func, *args, **kw):
    """
    Call the specified function without root privs
    """
    pid = os.fork()
    if pid == 0:
        drop_permissions()
        result = func(*args, **kw)
        sys.stdout.flush()
        sys.stderr.flush()
        os._exit(result)
    else:
        # os.close(write_pipe)
        (_, result) = os.waitpid(pid, 0)
        return result >> 8

def make_tmpdirs():
    """
    Make required tmp directories
    """
    try:
        global opts
        opts.tmpdir = tempfile.mkdtemp()
        os.chmod(opts.tmpdir, os.stat(opts.tmpdir).st_mode | stat.S_IEXEC | stat.S_IRGRP |
                 stat.S_IWGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH)
        opts.tmpdir_delete = tempfile.mkdtemp()
        os.chmod(opts.tmpdir_delete, os.stat(opts.tmpdir_delete).st_mode | stat.S_IEXEC |
                 stat.S_IRGRP | stat.S_IWGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH)
    except Exception as exc:
        print("Error creating tmp directory.", exc)
        traceback.print_exc()
        cleanup(1)

def cleanup_tmpdirs():
    """
    Delete the tmp directories
    """
    global opts
    if opts.tmpdir != None:
        shutil.rmtree(opts.tmpdir)
    if opts.tmpdir_delete != None:
        shutil.rmtree(opts.tmpdir_delete)

def create_settings(settings_file):
    """
    Create settings from scratch
    """
    global opts

    result = call_without_permissions(sync.managers.create_settings_in_tmpdir, settings_file, opts.tmpdir, opts.tmpdir_delete)
    if result != 0:
        print("Failed to create settings.")
        cleanup(result)

    deleted_files = calculate_deleted_files(opts.tmpdir_delete)
    if len(deleted_files) > 0:
        delete_files(deleted_files)
    copy_files(opts.tmpdir)

    # Cleanup and make new tmpdirs
    cleanup_tmpdirs()
    make_tmpdirs()

def sanitize_settings(settings_file):
    """
    Sanitize settings. If they changed, save the new version
    """
    try:
        orig_settings = copy.deepcopy(settings_file.settings)
        sync.managers.sanitize_settings(settings_file)
        if json.dumps(orig_settings) != json.dumps(settings_file.settings):
            print("Sanitization changed settings. Saving new settings...")
            print()
            settings_file.save_settings()
    except Exception:
        print("Settings sanitization failed!")
        traceback.print_exc()
        cleanup(1)

def validate_settings(settings_file):
    """
    Validate settings.
    """
    try:
        sync.managers.validate_settings(settings_file)
    except Exception:
        print("Settings verification failed!")
        traceback.print_exc()
        cleanup(1)

def sync_settings(settings_file):
    """
    Validate settings.
    """
    result = call_without_permissions(sync.managers.sync_to_tmpdirs, settings_file, opts.tmpdir, opts.tmpdir_delete)
    if result != 0:
        print("Failed to sync settings.")
        cleanup(result)


def sync_to_system(settings):
    """
    Synchronize these settings to the system
    These settings should have been sanitized and verified before calling this function
    """
    # Check that all new files in the tmpdir are registered in the registrar
    if sync.registrar.check_registrar_files(opts.tmpdir) != 0:
        print("File missing in registrar.")
        cleanup(1)

    # Calculate the changed files and the needed operations
    changed_files = calculate_changed_files(opts.tmpdir)
    deleted_files = calculate_deleted_files(opts.tmpdir_delete)
    operations = sync.registrar.calculate_required_operations(changed_files)
    operations = sync.registrar.reduce_operations(operations)

    # Check that all operations are registered
    if sync.registrar.check_registrar_operations(operations) != 0:
        print("Operation missing from registrar")
        cleanup(1)

    print("")
    if opts.test_run:
        print("Test run complete.")
        # exit without cleanup
        exit(0)

    # Copy in the files and delete any required files
    if len(deleted_files) > 0:
        delete_files(deleted_files)
    if len(operations) < 1:
        print("Copying files...")
        copy_files(opts.tmpdir)
        print("Done.")
        cleanup(0)

    copy_ret = 0
    commands_ret = 0

    # Run all pre commands
    try:
        commands_ret += run_commands(operations, 'pre_commands')
    except Exception:
        traceback.print_exc()

    # Copy files to / filesystem
    try:
        print("Copying files...")
        copy_ret = copy_files(opts.tmpdir)
    except Exception:
        traceback.print_exc()

    # Run all post commands
    try:
        commands_ret += run_commands(operations, 'post_commands')
    except Exception:
        traceback.print_exc()

    if copy_ret != 0:
        print("\nDone. (with critical errors)")
        cleanup(1)
    elif commands_ret != 0:
        print("\nDone. (with non-critical errors)")
        cleanup(0)  # exit 0 for non-critical errors
    else:
        print("\nDone.")
        cleanup(0)

def main():
    """
    main()
    """
    global opts

    # Duplicate all stdout to log
    tee_stdout_log()

    # options argument parser
    opts = Options()
    opts.parse_args()

    # Import appropriate library for our architecture.
    if opts.os_name == 'debian':
        import sync.debian as _
    elif opts.os_name == 'openwrt':
        import sync.openwrt as _
    else:
        print("\nUnknown OS: " + opts.os_name)
        cleanup(1)

    make_tmpdirs()

    # Initialize all managers
    result = sync.managers.managers_init()
    if result != 0:
        print("\nError during init process. Abort.")
        cleanup(result)

    #
    # Walk through settings, running create, read, santize, validate, and sync commands
    #
    sync.SettingsFile.set_os_name(opts.os_name)
    # Sort so that our default settings file name, if specified, comes first to use
    # in sync.NetworkUtil.settings
    sorted_settings_file_names = sorted(opts.settings_file_names, key=lambda x:(x.endswith(opts.default_settings_filename) == False, x))
    for settings_file_name in sorted_settings_file_names:
        settings_file = sync.SettingsFile(settings_file_name)

        # Create settings if necessary
        if opts.create_settings:
            create_settings(settings_file)

        # Read settings
        settings_file.read_settings()

        # Sanitize settings
        sanitize_settings(settings_file)

        # Validate settings
        validate_settings(settings_file)

        if settings_file_name.endswith(opts.default_settings_filename):
            sync.NetworkUtil.settings = settings_file.settings

        # Call all the managers to "sync" settings to tmpdir
        # We drop root permissions to call these functions so that
        # the managers can't access the / filesystem directly
        sync_settings(settings_file)

    print("Syncing to system...")
    sync_to_system(settings_file)
    exit(0)

main()
